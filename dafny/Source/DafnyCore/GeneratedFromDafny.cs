// Dafny program the_program compiled into C#
// To recompile, you will need the libraries
//     System.Runtime.Numerics.dll System.Collections.Immutable.dll
// but the 'dotnet' tool in net6.0 should pick those up automatically.
// Optionally, you may want to include compiler switches like
//     /debug /nowarn:162,164,168,183,219,436,1717,1718

using System;
using System.Numerics;
using System.Collections;
namespace Formatting {

  public partial class __default {
    public static System.String ReindentProgramFromFirstToken(Microsoft.Dafny.IToken firstToken, Formatting.IIndentationFormatter reindent) {
      System.String s = default(System.String);
      Microsoft.Dafny.IToken token;
      token = firstToken;
      System.Text.StringBuilder sb;
      System.Text.StringBuilder _nw0 = new System.Text.StringBuilder();
      sb = _nw0;
      while ((token) != (object)((Microsoft.Dafny.IToken)null)) {
        System.String newLeadingTrivia;
        newLeadingTrivia = (reindent).GetNewLeadingTrivia(token);
        System.String newTrailingTrivia;
        newTrailingTrivia = (reindent).GetNewTrailingTrivia(token);
        (sb).Append(newLeadingTrivia);
        (sb).Append(token.val);
        (sb).Append(newTrailingTrivia);
        token = token.Next;
      }
      System.String _out0;
      _out0 = (sb).ToString().ToString();
      s = _out0;
      return s;
    }
  }

  public interface IIndentationFormatter {
    System.String GetNewLeadingTrivia(Microsoft.Dafny.IToken token);
    System.String GetNewTrailingTrivia(Microsoft.Dafny.IToken token);
  }
  public class _Companion_IIndentationFormatter {
  }
} // end of namespace Formatting


namespace Std.Wrappers {

  public partial class __default {
    public static Std.Wrappers._IOutcomeResult<__E> Need<__E>(bool condition, __E error) {
      if (condition) {
        return Std.Wrappers.OutcomeResult<__E>.create_Pass_k();
      } else {
        return Std.Wrappers.OutcomeResult<__E>.create_Fail_k(error);
      }
    }
  }

  public interface _IOption<out T> {
    bool is_None { get; }
    bool is_Some { get; }
    T dtor_value { get; }
    _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    bool IsFailure();
    Std.Wrappers._IOption<__U> PropagateFailure<__U>();
    T Extract();
    Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error);
    Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error);
  }
  public abstract class Option<T> : _IOption<T> {
    public Option() {
    }
    public static Std.Wrappers._IOption<T> Default() {
      return create_None();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOption<T>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOption<T>>(Std.Wrappers.Option<T>.Default());
    }
    public static _IOption<T> create_None() {
      return new Option_None<T>();
    }
    public static _IOption<T> create_Some(T @value) {
      return new Option_Some<T>(@value);
    }
    public bool is_None { get { return this is Option_None<T>; } }
    public bool is_Some { get { return this is Option_Some<T>; } }
    public T dtor_value {
      get {
        var d = this;
        return ((Option_Some<T>)d)._value;
      }
    }
    public abstract _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0);
    public bool IsFailure() {
      return (this).is_None;
    }
    public Std.Wrappers._IOption<__U> PropagateFailure<__U>() {
      return Std.Wrappers.Option<__U>.create_None();
    }
    public T Extract() {
      return (this).dtor_value;
    }
    public static T GetOr(Std.Wrappers._IOption<T> _this, T @default) {
      Std.Wrappers._IOption<T> _source0 = _this;
      if (_source0.is_None) {
        return @default;
      } else {
        T __mcc_h0 = _source0.dtor_value;
        T v = __mcc_h0;
        return v;
      }
    }
    public Std.Wrappers._IResult<T, __E> ToResult<__E>(__E error) {
      Std.Wrappers._IOption<T> _source1 = this;
      if (_source1.is_None) {
        return Std.Wrappers.Result<T, __E>.create_Failure(error);
      } else {
        T __mcc_h0 = _source1.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Result<T, __E>.create_Success(v);
      }
    }
    public Std.Wrappers._IOutcome<__E> ToOutcome<__E>(__E error) {
      Std.Wrappers._IOption<T> _source2 = this;
      if (_source2.is_None) {
        return Std.Wrappers.Outcome<__E>.create_Fail(error);
      } else {
        T __mcc_h0 = _source2.dtor_value;
        T v = __mcc_h0;
        return Std.Wrappers.Outcome<__E>.create_Pass();
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOption<T> _this, Func<Std.Wrappers._IOption<T>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOption<T>, __FC>>(rewrap)(_this);
    }
  }
  public class Option_None<T> : Option<T> {
    public Option_None() : base() {
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_None<__T>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_None<T>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.None";
      return s;
    }
  }
  public class Option_Some<T> : Option<T> {
    public readonly T _value;
    public Option_Some(T @value) : base() {
      this._value = @value;
    }
    public override _IOption<__T> DowncastClone<__T>(Func<T, __T> converter0) {
      if (this is _IOption<__T> dt) { return dt; }
      return new Option_Some<__T>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Option_Some<T>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Option.Some";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }

  public interface _IResult<out R, out E> {
    bool is_Success { get; }
    bool is_Failure { get; }
    R dtor_value { get; }
    E dtor_error { get; }
    _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
    R Extract();
    Std.Wrappers._IOption<R> ToOption();
    Std.Wrappers._IOutcome<E> ToOutcome();
  }
  public abstract class Result<R, E> : _IResult<R, E> {
    public Result() {
    }
    public static Std.Wrappers._IResult<R, E> Default(R _default_R) {
      return create_Success(_default_R);
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>> _TypeDescriptor(Dafny.TypeDescriptor<R> _td_R) {
      return new Dafny.TypeDescriptor<Std.Wrappers._IResult<R, E>>(Std.Wrappers.Result<R, E>.Default(_td_R.Default()));
    }
    public static _IResult<R, E> create_Success(R @value) {
      return new Result_Success<R, E>(@value);
    }
    public static _IResult<R, E> create_Failure(E error) {
      return new Result_Failure<R, E>(error);
    }
    public bool is_Success { get { return this is Result_Success<R, E>; } }
    public bool is_Failure { get { return this is Result_Failure<R, E>; } }
    public R dtor_value {
      get {
        var d = this;
        return ((Result_Success<R, E>)d)._value;
      }
    }
    public E dtor_error {
      get {
        var d = this;
        return ((Result_Failure<R, E>)d)._error;
      }
    }
    public abstract _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1);
    public bool IsFailure() {
      return (this).is_Failure;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
    public R Extract() {
      return (this).dtor_value;
    }
    public static R GetOr(Std.Wrappers._IResult<R, E> _this, R @default) {
      Std.Wrappers._IResult<R, E> _source3 = _this;
      if (_source3.is_Success) {
        R _10___mcc_h0 = _source3.dtor_value;
        R _11_s = _10___mcc_h0;
        return _11_s;
      } else {
        E _12___mcc_h1 = _source3.dtor_error;
        E _13_e = _12___mcc_h1;
        return @default;
      }
    }
    public Std.Wrappers._IOption<R> ToOption() {
      Std.Wrappers._IResult<R, E> _source4 = this;
      if (_source4.is_Success) {
        R _14___mcc_h0 = _source4.dtor_value;
        R _15_s = _14___mcc_h0;
        return Std.Wrappers.Option<R>.create_Some(_15_s);
      } else {
        E _16___mcc_h1 = _source4.dtor_error;
        E _17_e = _16___mcc_h1;
        return Std.Wrappers.Option<R>.create_None();
      }
    }
    public Std.Wrappers._IOutcome<E> ToOutcome() {
      Std.Wrappers._IResult<R, E> _source5 = this;
      if (_source5.is_Success) {
        R _18___mcc_h0 = _source5.dtor_value;
        R _19_s = _18___mcc_h0;
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        E _20___mcc_h1 = _source5.dtor_error;
        E _21_e = _20___mcc_h1;
        return Std.Wrappers.Outcome<E>.create_Fail(_21_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IResult<R, E> _this, Func<Std.Wrappers._IResult<R, E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IResult<R, E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<R, __NewE> MapFailure<__NewE>(Std.Wrappers._IResult<R, E> _this, Func<E, __NewE> reWrap) {
      Std.Wrappers._IResult<R, E> _source6 = _this;
      if (_source6.is_Success) {
        R _22___mcc_h0 = _source6.dtor_value;
        R _23_s = _22___mcc_h0;
        return Std.Wrappers.Result<R, __NewE>.create_Success(_23_s);
      } else {
        E _24___mcc_h1 = _source6.dtor_error;
        E _25_e = _24___mcc_h1;
        return Std.Wrappers.Result<R, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(reWrap)(_25_e));
      }
    }
  }
  public class Result_Success<R, E> : Result<R, E> {
    public readonly R _value;
    public Result_Success(R @value) : base() {
      this._value = @value;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Success<__R, __E>(converter0(_value));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Success<R, E>;
      return oth != null && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Success";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Result_Failure<R, E> : Result<R, E> {
    public readonly E _error;
    public Result_Failure(E error) : base() {
      this._error = error;
    }
    public override _IResult<__R, __E> DowncastClone<__R, __E>(Func<R, __R> converter0, Func<E, __E> converter1) {
      if (this is _IResult<__R, __E> dt) { return dt; }
      return new Result_Failure<__R, __E>(converter1(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Result_Failure<R, E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Result.Failure";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcome<out E> {
    bool is_Pass { get; }
    bool is_Fail { get; }
    E dtor_error { get; }
    _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IOutcome<E> PropagateFailure();
    Std.Wrappers._IOption<__R> ToOption<__R>(__R r);
    Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r);
  }
  public abstract class Outcome<E> : _IOutcome<E> {
    public Outcome() {
    }
    public static Std.Wrappers._IOutcome<E> Default() {
      return create_Pass();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcome<E>>(Std.Wrappers.Outcome<E>.Default());
    }
    public static _IOutcome<E> create_Pass() {
      return new Outcome_Pass<E>();
    }
    public static _IOutcome<E> create_Fail(E error) {
      return new Outcome_Fail<E>(error);
    }
    public bool is_Pass { get { return this is Outcome_Pass<E>; } }
    public bool is_Fail { get { return this is Outcome_Fail<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((Outcome_Fail<E>)d)._error;
      }
    }
    public abstract _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail;
    }
    public Std.Wrappers._IOutcome<E> PropagateFailure() {
      return this;
    }
    public Std.Wrappers._IOption<__R> ToOption<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source7 = this;
      if (_source7.is_Pass) {
        return Std.Wrappers.Option<__R>.create_Some(r);
      } else {
        E _26___mcc_h0 = _source7.dtor_error;
        E _27_e = _26___mcc_h0;
        return Std.Wrappers.Option<__R>.create_None();
      }
    }
    public Std.Wrappers._IResult<__R, E> ToResult<__R>(__R r) {
      Std.Wrappers._IOutcome<E> _source8 = this;
      if (_source8.is_Pass) {
        return Std.Wrappers.Result<__R, E>.create_Success(r);
      } else {
        E _28___mcc_h0 = _source8.dtor_error;
        E _29_e = _28___mcc_h0;
        return Std.Wrappers.Result<__R, E>.create_Failure(_29_e);
      }
    }
    public static __FC Map<__FC>(Std.Wrappers._IOutcome<E> _this, Func<Std.Wrappers._IOutcome<E>, __FC> rewrap) {
      return Dafny.Helpers.Id<Func<Std.Wrappers._IOutcome<E>, __FC>>(rewrap)(_this);
    }
    public static Std.Wrappers._IResult<__T, __NewE> MapFailure<__T, __NewE>(Std.Wrappers._IOutcome<E> _this, Func<E, __NewE> rewrap, __T @default) {
      Std.Wrappers._IOutcome<E> _source9 = _this;
      if (_source9.is_Pass) {
        return Std.Wrappers.Result<__T, __NewE>.create_Success(@default);
      } else {
        E _30___mcc_h0 = _source9.dtor_error;
        E _31_e = _30___mcc_h0;
        return Std.Wrappers.Result<__T, __NewE>.create_Failure(Dafny.Helpers.Id<Func<E, __NewE>>(rewrap)(_31_e));
      }
    }
    public static Std.Wrappers._IOutcome<E> Need(bool condition, E error) {
      if (condition) {
        return Std.Wrappers.Outcome<E>.create_Pass();
      } else {
        return Std.Wrappers.Outcome<E>.create_Fail(error);
      }
    }
  }
  public class Outcome_Pass<E> : Outcome<E> {
    public Outcome_Pass() : base() {
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Pass<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Pass<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Pass";
      return s;
    }
  }
  public class Outcome_Fail<E> : Outcome<E> {
    public readonly E _error;
    public Outcome_Fail(E error) : base() {
      this._error = error;
    }
    public override _IOutcome<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcome<__E> dt) { return dt; }
      return new Outcome_Fail<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.Outcome_Fail<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.Outcome.Fail";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }

  public interface _IOutcomeResult<out E> {
    bool is_Pass_k { get; }
    bool is_Fail_k { get; }
    E dtor_error { get; }
    _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    bool IsFailure();
    Std.Wrappers._IResult<__U, E> PropagateFailure<__U>();
  }
  public abstract class OutcomeResult<E> : _IOutcomeResult<E> {
    public OutcomeResult() {
    }
    public static Std.Wrappers._IOutcomeResult<E> Default() {
      return create_Pass_k();
    }
    public static Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>> _TypeDescriptor() {
      return new Dafny.TypeDescriptor<Std.Wrappers._IOutcomeResult<E>>(Std.Wrappers.OutcomeResult<E>.Default());
    }
    public static _IOutcomeResult<E> create_Pass_k() {
      return new OutcomeResult_Pass_k<E>();
    }
    public static _IOutcomeResult<E> create_Fail_k(E error) {
      return new OutcomeResult_Fail_k<E>(error);
    }
    public bool is_Pass_k { get { return this is OutcomeResult_Pass_k<E>; } }
    public bool is_Fail_k { get { return this is OutcomeResult_Fail_k<E>; } }
    public E dtor_error {
      get {
        var d = this;
        return ((OutcomeResult_Fail_k<E>)d)._error;
      }
    }
    public abstract _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0);
    public bool IsFailure() {
      return (this).is_Fail_k;
    }
    public Std.Wrappers._IResult<__U, E> PropagateFailure<__U>() {
      return Std.Wrappers.Result<__U, E>.create_Failure((this).dtor_error);
    }
  }
  public class OutcomeResult_Pass_k<E> : OutcomeResult<E> {
    public OutcomeResult_Pass_k() : base() {
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Pass_k<__E>();
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Pass_k<E>;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Pass'";
      return s;
    }
  }
  public class OutcomeResult_Fail_k<E> : OutcomeResult<E> {
    public readonly E _error;
    public OutcomeResult_Fail_k(E error) : base() {
      this._error = error;
    }
    public override _IOutcomeResult<__E> DowncastClone<__E>(Func<E, __E> converter0) {
      if (this is _IOutcomeResult<__E> dt) { return dt; }
      return new OutcomeResult_Fail_k<__E>(converter0(_error));
    }
    public override bool Equals(object other) {
      var oth = other as Std.Wrappers.OutcomeResult_Fail_k<E>;
      return oth != null && object.Equals(this._error, oth._error);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._error));
      return (int)hash;
    }
    public override string ToString() {
      string s = "Wrappers.OutcomeResult.Fail'";
      s += "(";
      s += Dafny.Helpers.ToString(this._error);
      s += ")";
      return s;
    }
  }
} // end of namespace Std.Wrappers
namespace Std.Math {

  public partial class __default {
    public static BigInteger Min(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return a;
      } else {
        return b;
      }
    }
    public static BigInteger Min3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Min(a, Std.Math.__default.Min(b, c));
    }
    public static BigInteger Max(BigInteger a, BigInteger b) {
      if ((a) < (b)) {
        return b;
      } else {
        return a;
      }
    }
    public static BigInteger Max3(BigInteger a, BigInteger b, BigInteger c) {
      return Std.Math.__default.Max(a, Std.Math.__default.Max(b, c));
    }
    public static BigInteger Abs(BigInteger a) {
      if ((a).Sign == -1) {
        return (BigInteger.Zero) - (a);
      } else {
        return a;
      }
    }
  }
} // end of namespace Std.Math
namespace Std.Collections.Seq {

  public partial class __default {
    public static __T First<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select(BigInteger.Zero);
    }
    public static Dafny.ISequence<__T> DropFirst<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Drop(BigInteger.One);
    }
    public static __T Last<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Select((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static Dafny.ISequence<__T> DropLast<__T>(Dafny.ISequence<__T> xs) {
      return (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
    }
    public static __T[] ToArray<__T>(Dafny.ISequence<__T> xs) {
      __T[] a = new __T[0];
      Func<BigInteger, __T> _init2 = Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Func<BigInteger, __T>>>((_75_xs) => ((System.Func<BigInteger, __T>)((_76_i) => {
        return (_75_xs).Select(_76_i);
      })))(xs);
      __T[] _nw3 = new __T[Dafny.Helpers.ToIntChecked(new BigInteger((xs).Count), "array size exceeds memory limit")];
      for (var _i0_2 = 0; _i0_2 < new BigInteger(_nw3.Length); _i0_2++) {
        _nw3[(int)(_i0_2)] = _init2(_i0_2);
      }
      a = _nw3;
      return a;
    }
    public static Dafny.ISet<__T> ToSet<__T>(Dafny.ISequence<__T> xs) {
      return Dafny.Helpers.Id<Func<Dafny.ISequence<__T>, Dafny.ISet<__T>>>((_77_xs) => ((System.Func<Dafny.ISet<__T>>)(() => {
        var _coll0 = new System.Collections.Generic.List<__T>();
        foreach (__T _compr_0 in (_77_xs).CloneAsArray()) {
          __T _78_x = (__T)_compr_0;
          if ((_77_xs).Contains(_78_x)) {
            _coll0.Add(_78_x);
          }
        }
        return Dafny.Set<__T>.FromCollection(_coll0);
      }))())(xs);
    }
    public static BigInteger IndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
      BigInteger _79___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if (object.Equals((xs).Select(BigInteger.Zero), v)) {
        return (BigInteger.Zero) + (_79___accumulator);
      } else {
        _79___accumulator = (_79___accumulator) + (BigInteger.One);
        Dafny.ISequence<__T> _in0 = (xs).Drop(BigInteger.One);
        __T _in1 = v;
        xs = _in0;
        v = _in1;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> IndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.IndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_80_v) => ((System.Func<__T, bool>)((_81_x) => {
        return object.Equals(_81_x, _80_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> IndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select(BigInteger.Zero))) {
        return Std.Wrappers.Option<BigInteger>.create_Some(BigInteger.Zero);
      } else {
        Std.Wrappers._IOption<BigInteger> _82_o_k = Std.Collections.Seq.__default.IndexByOption<__T>((xs).Drop(BigInteger.One), p);
        if ((_82_o_k).is_Some) {
          return Std.Wrappers.Option<BigInteger>.create_Some(((_82_o_k).dtor_value) + (BigInteger.One));
        } else {
          return Std.Wrappers.Option<BigInteger>.create_None();
        }
      }
    }
    public static BigInteger LastIndexOf<__T>(Dafny.ISequence<__T> xs, __T v) {
    TAIL_CALL_START:;
      if (object.Equals((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)), v)) {
        return (new BigInteger((xs).Count)) - (BigInteger.One);
      } else {
        Dafny.ISequence<__T> _in2 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        __T _in3 = v;
        xs = _in2;
        v = _in3;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexOfOption<__T>(Dafny.ISequence<__T> xs, __T v) {
      return Std.Collections.Seq.__default.LastIndexByOption<__T>(xs, Dafny.Helpers.Id<Func<__T, Func<__T, bool>>>((_83_v) => ((System.Func<__T, bool>)((_84_x) => {
        return object.Equals(_84_x, _83_v);
      })))(v));
    }
    public static Std.Wrappers._IOption<BigInteger> LastIndexByOption<__T>(Dafny.ISequence<__T> xs, Func<__T, bool> p) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Option<BigInteger>.create_None();
      } else if (Dafny.Helpers.Id<Func<__T, bool>>(p)((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One)))) {
        return Std.Wrappers.Option<BigInteger>.create_Some((new BigInteger((xs).Count)) - (BigInteger.One));
      } else {
        Dafny.ISequence<__T> _in4 = (xs).Take((new BigInteger((xs).Count)) - (BigInteger.One));
        Func<__T, bool> _in5 = p;
        xs = _in4;
        p = _in5;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Remove<__T>(Dafny.ISequence<__T> xs, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat((xs).Take(pos), (xs).Drop((pos) + (BigInteger.One)));
    }
    public static Dafny.ISequence<__T> RemoveValue<__T>(Dafny.ISequence<__T> xs, __T v) {
      if (!(xs).Contains(v)) {
        return xs;
      } else {
        BigInteger _85_i = Std.Collections.Seq.__default.IndexOf<__T>(xs, v);
        return Dafny.Sequence<__T>.Concat((xs).Take(_85_i), (xs).Drop((_85_i) + (BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Insert<__T>(Dafny.ISequence<__T> xs, __T a, BigInteger pos) {
      return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.Concat((xs).Take(pos), Dafny.Sequence<__T>.FromElements(a)), (xs).Drop(pos));
    }
    public static Dafny.ISequence<__T> Reverse<__T>(Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _86___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((xs).Equals(Dafny.Sequence<__T>.FromElements())) {
        return Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _86___accumulator = Dafny.Sequence<__T>.Concat(_86___accumulator, Dafny.Sequence<__T>.FromElements((xs).Select((new BigInteger((xs).Count)) - (BigInteger.One))));
        Dafny.ISequence<__T> _in6 = (xs).Subsequence(BigInteger.Zero, (new BigInteger((xs).Count)) - (BigInteger.One));
        xs = _in6;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Repeat<__T>(__T v, BigInteger length) {
      Dafny.ISequence<__T> _87___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((length).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _87___accumulator = Dafny.Sequence<__T>.Concat(_87___accumulator, Dafny.Sequence<__T>.FromElements(v));
        __T _in7 = v;
        BigInteger _in8 = (length) - (BigInteger.One);
        v = _in7;
        length = _in8;
        goto TAIL_CALL_START;
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> Unzip<__A, __B>(Dafny.ISequence<_System._ITuple2<__A, __B>> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.FromElements(), Dafny.Sequence<__B>.FromElements());
      } else {
        _System._ITuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>> _let_tmp_rhs0 = Std.Collections.Seq.__default.Unzip<__A, __B>(Std.Collections.Seq.__default.DropLast<_System._ITuple2<__A, __B>>(xs));
        Dafny.ISequence<__A> _88_a = _let_tmp_rhs0.dtor__0;
        Dafny.ISequence<__B> _89_b = _let_tmp_rhs0.dtor__1;
        return _System.Tuple2<Dafny.ISequence<__A>, Dafny.ISequence<__B>>.create(Dafny.Sequence<__A>.Concat(_88_a, Dafny.Sequence<__A>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__0)), Dafny.Sequence<__B>.Concat(_89_b, Dafny.Sequence<__B>.FromElements((Std.Collections.Seq.__default.Last<_System._ITuple2<__A, __B>>(xs)).dtor__1)));
      }
    }
    public static Dafny.ISequence<_System._ITuple2<__A, __B>> Zip<__A, __B>(Dafny.ISequence<__A> xs, Dafny.ISequence<__B> ys) {
      Dafny.ISequence<_System._ITuple2<__A, __B>> _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(), _90___accumulator);
      } else {
        _90___accumulator = Dafny.Sequence<_System._ITuple2<__A, __B>>.Concat(Dafny.Sequence<_System._ITuple2<__A, __B>>.FromElements(_System.Tuple2<__A, __B>.create(Std.Collections.Seq.__default.Last<__A>(xs), Std.Collections.Seq.__default.Last<__B>(ys))), _90___accumulator);
        Dafny.ISequence<__A> _in9 = Std.Collections.Seq.__default.DropLast<__A>(xs);
        Dafny.ISequence<__B> _in10 = Std.Collections.Seq.__default.DropLast<__B>(ys);
        xs = _in9;
        ys = _in10;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger Max(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Max((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Max((xs).Drop(BigInteger.One)));
      }
    }
    public static BigInteger Min(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)) == (BigInteger.One)) {
        return (xs).Select(BigInteger.Zero);
      } else {
        return Std.Math.__default.Min((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.Min((xs).Drop(BigInteger.One)));
      }
    }
    public static Dafny.ISequence<__T> Flatten<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _91___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_91___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _91___accumulator = Dafny.Sequence<__T>.Concat(_91___accumulator, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<Dafny.ISequence<__T>> _in11 = (xs).Drop(BigInteger.One);
        xs = _in11;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> FlattenReverse<__T>(Dafny.ISequence<Dafny.ISequence<__T>> xs) {
      Dafny.ISequence<__T> _92___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(Dafny.Sequence<__T>.FromElements(), _92___accumulator);
      } else {
        _92___accumulator = Dafny.Sequence<__T>.Concat(Std.Collections.Seq.__default.Last<Dafny.ISequence<__T>>(xs), _92___accumulator);
        Dafny.ISequence<Dafny.ISequence<__T>> _in12 = Std.Collections.Seq.__default.DropLast<Dafny.ISequence<__T>>(xs);
        xs = _in12;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<__T> Join<__T>(Dafny.ISequence<Dafny.ISequence<__T>> seqs, Dafny.ISequence<__T> separator) {
      Dafny.ISequence<__T> _93___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((seqs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.FromElements());
      } else if ((new BigInteger((seqs).Count)) == (BigInteger.One)) {
        return Dafny.Sequence<__T>.Concat(_93___accumulator, (seqs).Select(BigInteger.Zero));
      } else {
        _93___accumulator = Dafny.Sequence<__T>.Concat(_93___accumulator, Dafny.Sequence<__T>.Concat((seqs).Select(BigInteger.Zero), separator));
        Dafny.ISequence<Dafny.ISequence<__T>> _in13 = (seqs).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in14 = separator;
        seqs = _in13;
        separator = _in14;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.ISequence<__T>> Split<__T>(Dafny.ISequence<__T> s, __T delim) {
      Dafny.ISequence<Dafny.ISequence<__T>> _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.FromElements();
    TAIL_CALL_START:;
      Std.Wrappers._IOption<BigInteger> _95_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_95_i).is_Some) {
        _94___accumulator = Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements((s).Take((_95_i).dtor_value)));
        Dafny.ISequence<__T> _in15 = (s).Drop(((_95_i).dtor_value) + (BigInteger.One));
        __T _in16 = delim;
        s = _in15;
        delim = _in16;
        goto TAIL_CALL_START;
      } else {
        return Dafny.Sequence<Dafny.ISequence<__T>>.Concat(_94___accumulator, Dafny.Sequence<Dafny.ISequence<__T>>.FromElements(s));
      }
    }
    public static _System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>> SplitOnce<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _96_i = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      return _System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take((_96_i).dtor_value), (s).Drop(((_96_i).dtor_value) + (BigInteger.One)));
    }
    public static Std.Wrappers._IOption<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>> SplitOnceOption<__T>(Dafny.ISequence<__T> s, __T delim) {
      Std.Wrappers._IOption<BigInteger> _97_valueOrError0 = Std.Collections.Seq.__default.IndexOfOption<__T>(s, delim);
      if ((_97_valueOrError0).IsFailure()) {
        return (_97_valueOrError0).PropagateFailure<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>();
      } else {
        BigInteger _98_i = (_97_valueOrError0).Extract();
        return Std.Wrappers.Option<_System._ITuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>>.create_Some(_System.Tuple2<Dafny.ISequence<__T>, Dafny.ISequence<__T>>.create((s).Take(_98_i), (s).Drop((_98_i) + (BigInteger.One))));
      }
    }
    public static Dafny.ISequence<__R> Map<__T, __R>(Func<__T, __R> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__R> _99___accumulator = Dafny.Sequence<__R>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements());
      } else {
        _99___accumulator = Dafny.Sequence<__R>.Concat(_99___accumulator, Dafny.Sequence<__R>.FromElements(Dafny.Helpers.Id<Func<__T, __R>>(f)((xs).Select(BigInteger.Zero))));
        Func<__T, __R> _in17 = f;
        Dafny.ISequence<__T> _in18 = (xs).Drop(BigInteger.One);
        f = _in17;
        xs = _in18;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> MapWithResult<__T, __R, __E>(Func<__T, Std.Wrappers._IResult<__R, __E>> f, Dafny.ISequence<__T> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.FromElements());
      } else {
        Std.Wrappers._IResult<__R, __E> _100_valueOrError0 = Dafny.Helpers.Id<Func<__T, Std.Wrappers._IResult<__R, __E>>>(f)((xs).Select(BigInteger.Zero));
        if ((_100_valueOrError0).IsFailure()) {
          return (_100_valueOrError0).PropagateFailure<Dafny.ISequence<__R>>();
        } else {
          __R _101_head = (_100_valueOrError0).Extract();
          Std.Wrappers._IResult<Dafny.ISequence<__R>, __E> _102_valueOrError1 = Std.Collections.Seq.__default.MapWithResult<__T, __R, __E>(f, (xs).Drop(BigInteger.One));
          if ((_102_valueOrError1).IsFailure()) {
            return (_102_valueOrError1).PropagateFailure<Dafny.ISequence<__R>>();
          } else {
            Dafny.ISequence<__R> _103_tail = (_102_valueOrError1).Extract();
            return Std.Wrappers.Result<Dafny.ISequence<__R>, __E>.create_Success(Dafny.Sequence<__R>.Concat(Dafny.Sequence<__R>.FromElements(_101_head), _103_tail));
          }
        }
      }
    }
    public static Dafny.ISequence<__T> Filter<__T>(Func<__T, bool> f, Dafny.ISequence<__T> xs) {
      Dafny.ISequence<__T> _104___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_104___accumulator, Dafny.Sequence<__T>.FromElements());
      } else {
        _104___accumulator = Dafny.Sequence<__T>.Concat(_104___accumulator, ((Dafny.Helpers.Id<Func<__T, bool>>(f)((xs).Select(BigInteger.Zero))) ? (Dafny.Sequence<__T>.FromElements((xs).Select(BigInteger.Zero))) : (Dafny.Sequence<__T>.FromElements())));
        Func<__T, bool> _in19 = f;
        Dafny.ISequence<__T> _in20 = (xs).Drop(BigInteger.One);
        f = _in19;
        xs = _in20;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldLeft<__A, __T>(Func<__A, __T, __A> f, __A init, Dafny.ISequence<__T> xs) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        Func<__A, __T, __A> _in21 = f;
        __A _in22 = Dafny.Helpers.Id<Func<__A, __T, __A>>(f)(init, (xs).Select(BigInteger.Zero));
        Dafny.ISequence<__T> _in23 = (xs).Drop(BigInteger.One);
        f = _in21;
        init = _in22;
        xs = _in23;
        goto TAIL_CALL_START;
      }
    }
    public static __A FoldRight<__A, __T>(Func<__T, __A, __A> f, Dafny.ISequence<__T> xs, __A init) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return init;
      } else {
        return Dafny.Helpers.Id<Func<__T, __A, __A>>(f)((xs).Select(BigInteger.Zero), Std.Collections.Seq.__default.FoldRight<__A, __T>(f, (xs).Drop(BigInteger.One), init));
      }
    }
    public static Dafny.ISequence<__T> SetToSeq<__T>(Dafny.ISet<__T> s) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      xs = Dafny.Sequence<__T>.FromElements();
      Dafny.ISet<__T> _105_left;
      _105_left = s;
      while (!(_105_left).Equals(Dafny.Set<__T>.FromElements())) {
        __T _106_x;
        foreach (__T _assign_such_that_0 in (_105_left).Elements) {
          _106_x = (__T)_assign_such_that_0;
          if ((_105_left).Contains(_106_x)) {
            goto after__ASSIGN_SUCH_THAT_0;
          }
        }
        throw new System.Exception("assign-such-that search produced no value (line 7247)");
      after__ASSIGN_SUCH_THAT_0:;
        _105_left = Dafny.Set<__T>.Difference(_105_left, Dafny.Set<__T>.FromElements(_106_x));
        xs = Dafny.Sequence<__T>.Concat(xs, Dafny.Sequence<__T>.FromElements(_106_x));
      }
      return xs;
    }
    public static Dafny.ISequence<__T> SetToSortedSeq<__T>(Dafny.ISet<__T> s, Func<__T, __T, bool> R) {
      Dafny.ISequence<__T> xs = Dafny.Sequence<__T>.Empty;
      Dafny.ISequence<__T> _out6;
      _out6 = Std.Collections.Seq.__default.SetToSeq<__T>(s);
      xs = _out6;
      xs = Std.Collections.Seq.__default.MergeSortBy<__T>(R, xs);
      return xs;
    }
    public static Dafny.ISequence<__T> MergeSortBy<__T>(Func<__T, __T, bool> lessThanOrEq, Dafny.ISequence<__T> a) {
      if ((new BigInteger((a).Count)) <= (BigInteger.One)) {
        return a;
      } else {
        BigInteger _107_splitIndex = Dafny.Helpers.EuclideanDivision(new BigInteger((a).Count), new BigInteger(2));
        Dafny.ISequence<__T> _108_left = (a).Take(_107_splitIndex);
        Dafny.ISequence<__T> _109_right = (a).Drop(_107_splitIndex);
        Dafny.ISequence<__T> _110_leftSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _108_left);
        Dafny.ISequence<__T> _111_rightSorted = Std.Collections.Seq.__default.MergeSortBy<__T>(lessThanOrEq, _109_right);
        return Std.Collections.Seq.__default.MergeSortedWith<__T>(_110_leftSorted, _111_rightSorted, lessThanOrEq);
      }
    }
    public static Dafny.ISequence<__T> MergeSortedWith<__T>(Dafny.ISequence<__T> left, Dafny.ISequence<__T> right, Func<__T, __T, bool> lessThanOrEq) {
      Dafny.ISequence<__T> _112___accumulator = Dafny.Sequence<__T>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((left).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, right);
      } else if ((new BigInteger((right).Count)).Sign == 0) {
        return Dafny.Sequence<__T>.Concat(_112___accumulator, left);
      } else if (Dafny.Helpers.Id<Func<__T, __T, bool>>(lessThanOrEq)((left).Select(BigInteger.Zero), (right).Select(BigInteger.Zero))) {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((left).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in24 = (left).Drop(BigInteger.One);
        Dafny.ISequence<__T> _in25 = right;
        Func<__T, __T, bool> _in26 = lessThanOrEq;
        left = _in24;
        right = _in25;
        lessThanOrEq = _in26;
        goto TAIL_CALL_START;
      } else {
        _112___accumulator = Dafny.Sequence<__T>.Concat(_112___accumulator, Dafny.Sequence<__T>.FromElements((right).Select(BigInteger.Zero)));
        Dafny.ISequence<__T> _in27 = left;
        Dafny.ISequence<__T> _in28 = (right).Drop(BigInteger.One);
        Func<__T, __T, bool> _in29 = lessThanOrEq;
        left = _in27;
        right = _in28;
        lessThanOrEq = _in29;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Collections.Seq
namespace Std.Arithmetic.GeneralInternals {

} // end of namespace Std.Arithmetic.GeneralInternals
namespace Std.Arithmetic.MulInternalsNonlinear {

} // end of namespace Std.Arithmetic.MulInternalsNonlinear
namespace Std.Arithmetic.MulInternals {

  public partial class __default {
    public static BigInteger MulPos(BigInteger x, BigInteger y) {
      BigInteger _141___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == 0) {
        return (BigInteger.Zero) + (_141___accumulator);
      } else {
        _141___accumulator = (_141___accumulator) + (y);
        BigInteger _in32 = (x) - (BigInteger.One);
        BigInteger _in33 = y;
        x = _in32;
        y = _in33;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger MulRecursive(BigInteger x, BigInteger y) {
      if ((x).Sign != -1) {
        return Std.Arithmetic.MulInternals.__default.MulPos(x, y);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.MulInternals.__default.MulPos((new BigInteger(-1)) * (x), y));
      }
    }
  }
} // end of namespace Std.Arithmetic.MulInternals
namespace Std.Arithmetic.Mul {

} // end of namespace Std.Arithmetic.Mul
namespace Std.Arithmetic.ModInternalsNonlinear {

} // end of namespace Std.Arithmetic.ModInternalsNonlinear
namespace Std.Arithmetic.DivInternalsNonlinear {

} // end of namespace Std.Arithmetic.DivInternalsNonlinear
namespace Std.Arithmetic.ModInternals {

  public partial class __default {
    public static BigInteger ModRecursive(BigInteger x, BigInteger d) {
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        BigInteger _in34 = (d) + (x);
        BigInteger _in35 = d;
        x = _in34;
        d = _in35;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return x;
      } else {
        BigInteger _in36 = (x) - (d);
        BigInteger _in37 = d;
        x = _in36;
        d = _in37;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.ModInternals
namespace Std.Arithmetic.DivInternals {

  public partial class __default {
    public static BigInteger DivPos(BigInteger x, BigInteger d) {
      BigInteger _142___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((x).Sign == -1) {
        _142___accumulator = (_142___accumulator) + (new BigInteger(-1));
        BigInteger _in38 = (x) + (d);
        BigInteger _in39 = d;
        x = _in38;
        d = _in39;
        goto TAIL_CALL_START;
      } else if ((x) < (d)) {
        return (BigInteger.Zero) + (_142___accumulator);
      } else {
        _142___accumulator = (_142___accumulator) + (BigInteger.One);
        BigInteger _in40 = (x) - (d);
        BigInteger _in41 = d;
        x = _in40;
        d = _in41;
        goto TAIL_CALL_START;
      }
    }
    public static BigInteger DivRecursive(BigInteger x, BigInteger d) {
      if ((d).Sign == 1) {
        return Std.Arithmetic.DivInternals.__default.DivPos(x, d);
      } else {
        return (new BigInteger(-1)) * (Std.Arithmetic.DivInternals.__default.DivPos(x, (new BigInteger(-1)) * (d)));
      }
    }
  }
} // end of namespace Std.Arithmetic.DivInternals
namespace Std.Arithmetic.DivMod {

  public partial class __default {
    public static bool MultiplesVanish(BigInteger a, BigInteger b, BigInteger m) {
      return (Dafny.Helpers.EuclideanModulus(((m) * (a)) + (b), m)) == (Dafny.Helpers.EuclideanModulus(b, m));
    }
  }
} // end of namespace Std.Arithmetic.DivMod
namespace Std.Arithmetic.Power {

  public partial class __default {
    public static BigInteger Pow(BigInteger b, BigInteger e) {
      BigInteger _143___accumulator = BigInteger.One;
    TAIL_CALL_START:;
      if ((e).Sign == 0) {
        return (BigInteger.One) * (_143___accumulator);
      } else {
        _143___accumulator = (_143___accumulator) * (b);
        BigInteger _in42 = b;
        BigInteger _in43 = (e) - (BigInteger.One);
        b = _in42;
        e = _in43;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Power
namespace Std.Arithmetic.Logarithm {

  public partial class __default {
    public static BigInteger Log(BigInteger @base, BigInteger pow) {
      BigInteger _144___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((pow) < (@base)) {
        return (BigInteger.Zero) + (_144___accumulator);
      } else {
        _144___accumulator = (_144___accumulator) + (BigInteger.One);
        BigInteger _in44 = @base;
        BigInteger _in45 = Dafny.Helpers.EuclideanDivision(pow, @base);
        @base = _in44;
        pow = _in45;
        goto TAIL_CALL_START;
      }
    }
  }
} // end of namespace Std.Arithmetic.Logarithm
namespace Std.Arithmetic.Power2 {

  public partial class __default {
    public static BigInteger Pow2(BigInteger e) {
      return Std.Arithmetic.Power.__default.Pow(new BigInteger(2), e);
    }
  }
} // end of namespace Std.Arithmetic.Power2
namespace Std.Arithmetic {

} // end of namespace Std.Arithmetic
namespace Std.Strings.HexConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.HexConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.HexConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _145___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _145___accumulator);
      } else {
        _145___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _145___accumulator);
        Dafny.ISequence<BigInteger> _in46 = (digits).Drop(BigInteger.One);
        digits = _in46;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.HexConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.HexConversion.__default.OfDigits(Std.Strings.HexConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.HexConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_146_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_146_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_1) => {
        Dafny.Rune _147_c = (Dafny.Rune)_forall_var_1;
        return !(((_146_str).Drop(BigInteger.One)).Contains(_147_c)) || (Std.Strings.HexConversion.__default.IsDigitChar(_147_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.HexConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.HexConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _148_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.HexConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.HexConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.HexConversion.__default.charToDigit, _148_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.HexConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.HexConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.HexConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.HexConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _149___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_149___accumulator);
      } else {
        _149___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.HexConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_149___accumulator);
        Dafny.ISequence<BigInteger> _in47 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in47;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _150___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _150___accumulator = Dafny.Sequence<BigInteger>.Concat(_150___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.HexConversion.__default.BASE())));
        BigInteger _in48 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.HexConversion.__default.BASE());
        n = _in48;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in49 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in50 = n;
        xs = _in49;
        n = _in50;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _151_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.HexConversion.__default.SeqExtend(xs, _151_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.HexConversion.__default.SeqExtend(Std.Strings.HexConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _152_xs = Std.Strings.HexConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _152_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs1 = Std.Strings.HexConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _153_zs_k = _let_tmp_rhs1.dtor__0;
        BigInteger _154_cin = _let_tmp_rhs1.dtor__1;
        BigInteger _155_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_154_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs2 = (((_155_sum) < (Std.Strings.HexConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_155_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_155_sum) - (Std.Strings.HexConversion.__default.BASE()), BigInteger.One)));
        BigInteger _156_sum__out = _let_tmp_rhs2.dtor__0;
        BigInteger _157_cout = _let_tmp_rhs2.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_153_zs_k, Dafny.Sequence<BigInteger>.FromElements(_156_sum__out)), _157_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs3 = Std.Strings.HexConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _158_zs = _let_tmp_rhs3.dtor__0;
        BigInteger _159_cin = _let_tmp_rhs3.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs4 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_159_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.HexConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_159_cin), BigInteger.One)));
        BigInteger _160_diff__out = _let_tmp_rhs4.dtor__0;
        BigInteger _161_cout = _let_tmp_rhs4.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_158_zs, Dafny.Sequence<BigInteger>.FromElements(_160_diff__out)), _161_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> HEX__DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789ABCDEF");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.HexConversion.__default.HEX__DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.HexConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('a'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('b'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('c'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('d'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('e'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('f'), new BigInteger(15)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('A'), new BigInteger(10)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('B'), new BigInteger(11)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('C'), new BigInteger(12)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('D'), new BigInteger(13)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('E'), new BigInteger(14)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('F'), new BigInteger(15)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.HexConversion
namespace Std.Strings.DecimalConversion {

  public partial class __default {
    public static BigInteger BASE() {
      return Std.Strings.DecimalConversion.__default.@base;
    }
    public static bool IsDigitChar(Dafny.Rune c) {
      return (Std.Strings.DecimalConversion.__default.charToDigit).Contains(c);
    }
    public static Dafny.ISequence<Dafny.Rune> OfDigits(Dafny.ISequence<BigInteger> digits) {
      Dafny.ISequence<Dafny.Rune> _162___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((digits).Equals(Dafny.Sequence<BigInteger>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(), _162___accumulator);
      } else {
        _162___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select((digits).Select(BigInteger.Zero))), _162___accumulator);
        Dafny.ISequence<BigInteger> _in51 = (digits).Drop(BigInteger.One);
        digits = _in51;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      if ((n).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.FromElements((Std.Strings.DecimalConversion.__default.chars).Select(BigInteger.Zero));
      } else {
        return Std.Strings.DecimalConversion.__default.OfDigits(Std.Strings.DecimalConversion.__default.FromNat(n));
      }
    }
    public static bool IsNumberStr(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      return !(!(str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) || (((((str).Select(BigInteger.Zero)) == (minus)) || ((Std.Strings.DecimalConversion.__default.charToDigit).Contains((str).Select(BigInteger.Zero)))) && (Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, bool>>((_163_str) => Dafny.Helpers.Quantifier<Dafny.Rune>(((_163_str).Drop(BigInteger.One)).UniqueElements, true, (((_forall_var_2) => {
        Dafny.Rune _164_c = (Dafny.Rune)_forall_var_2;
        return !(((_163_str).Drop(BigInteger.One)).Contains(_164_c)) || (Std.Strings.DecimalConversion.__default.IsDigitChar(_164_c));
      }))))(str)));
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n, Dafny.Rune minus) {
      if ((n).Sign != -1) {
        return Std.Strings.DecimalConversion.__default.OfNat(n);
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements(minus), Std.Strings.DecimalConversion.__default.OfNat((BigInteger.Zero) - (n)));
      }
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return BigInteger.Zero;
      } else {
        Dafny.Rune _165_c = (str).Select((new BigInteger((str).Count)) - (BigInteger.One));
        return ((Std.Strings.DecimalConversion.__default.ToNat((str).Take((new BigInteger((str).Count)) - (BigInteger.One)))) * (Std.Strings.DecimalConversion.__default.@base)) + (Dafny.Map<Dafny.Rune, BigInteger>.Select(Std.Strings.DecimalConversion.__default.charToDigit, _165_c));
      }
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune minus) {
      if (Dafny.Sequence<Dafny.Rune>.IsPrefixOf(Dafny.Sequence<Dafny.Rune>.FromElements(minus), str)) {
        return (BigInteger.Zero) - (Std.Strings.DecimalConversion.__default.ToNat((str).Drop(BigInteger.One)));
      } else {
        return Std.Strings.DecimalConversion.__default.ToNat(str);
      }
    }
    public static BigInteger ToNatRight(Dafny.ISequence<BigInteger> xs) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return BigInteger.Zero;
      } else {
        return ((Std.Strings.DecimalConversion.__default.ToNatRight(Std.Collections.Seq.__default.DropFirst<BigInteger>(xs))) * (Std.Strings.DecimalConversion.__default.BASE())) + (Std.Collections.Seq.__default.First<BigInteger>(xs));
      }
    }
    public static BigInteger ToNatLeft(Dafny.ISequence<BigInteger> xs) {
      BigInteger _166___accumulator = BigInteger.Zero;
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return (BigInteger.Zero) + (_166___accumulator);
      } else {
        _166___accumulator = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) * (Std.Arithmetic.Power.__default.Pow(Std.Strings.DecimalConversion.__default.BASE(), (new BigInteger((xs).Count)) - (BigInteger.One)))) + (_166___accumulator);
        Dafny.ISequence<BigInteger> _in52 = Std.Collections.Seq.__default.DropLast<BigInteger>(xs);
        xs = _in52;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> FromNat(BigInteger n) {
      Dafny.ISequence<BigInteger> _167___accumulator = Dafny.Sequence<BigInteger>.FromElements();
    TAIL_CALL_START:;
      if ((n).Sign == 0) {
        return Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements());
      } else {
        _167___accumulator = Dafny.Sequence<BigInteger>.Concat(_167___accumulator, Dafny.Sequence<BigInteger>.FromElements(Dafny.Helpers.EuclideanModulus(n, Std.Strings.DecimalConversion.__default.BASE())));
        BigInteger _in53 = Dafny.Helpers.EuclideanDivision(n, Std.Strings.DecimalConversion.__default.BASE());
        n = _in53;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtend(Dafny.ISequence<BigInteger> xs, BigInteger n) {
    TAIL_CALL_START:;
      if ((new BigInteger((xs).Count)) >= (n)) {
        return xs;
      } else {
        Dafny.ISequence<BigInteger> _in54 = Dafny.Sequence<BigInteger>.Concat(xs, Dafny.Sequence<BigInteger>.FromElements(BigInteger.Zero));
        BigInteger _in55 = n;
        xs = _in54;
        n = _in55;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<BigInteger> SeqExtendMultiple(Dafny.ISequence<BigInteger> xs, BigInteger n) {
      BigInteger _168_newLen = ((new BigInteger((xs).Count)) + (n)) - (Dafny.Helpers.EuclideanModulus(new BigInteger((xs).Count), n));
      return Std.Strings.DecimalConversion.__default.SeqExtend(xs, _168_newLen);
    }
    public static Dafny.ISequence<BigInteger> FromNatWithLen(BigInteger n, BigInteger len) {
      return Std.Strings.DecimalConversion.__default.SeqExtend(Std.Strings.DecimalConversion.__default.FromNat(n), len);
    }
    public static Dafny.ISequence<BigInteger> SeqZero(BigInteger len) {
      Dafny.ISequence<BigInteger> _169_xs = Std.Strings.DecimalConversion.__default.FromNatWithLen(BigInteger.Zero, len);
      return _169_xs;
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqAdd(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs5 = Std.Strings.DecimalConversion.__default.SeqAdd(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _170_zs_k = _let_tmp_rhs5.dtor__0;
        BigInteger _171_cin = _let_tmp_rhs5.dtor__1;
        BigInteger _172_sum = ((Std.Collections.Seq.__default.Last<BigInteger>(xs)) + (Std.Collections.Seq.__default.Last<BigInteger>(ys))) + (_171_cin);
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs6 = (((_172_sum) < (Std.Strings.DecimalConversion.__default.BASE())) ? (_System.Tuple2<BigInteger, BigInteger>.create(_172_sum, BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((_172_sum) - (Std.Strings.DecimalConversion.__default.BASE()), BigInteger.One)));
        BigInteger _173_sum__out = _let_tmp_rhs6.dtor__0;
        BigInteger _174_cout = _let_tmp_rhs6.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_170_zs_k, Dafny.Sequence<BigInteger>.FromElements(_173_sum__out)), _174_cout);
      }
    }
    public static _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> SeqSub(Dafny.ISequence<BigInteger> xs, Dafny.ISequence<BigInteger> ys) {
      if ((new BigInteger((xs).Count)).Sign == 0) {
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.FromElements(), BigInteger.Zero);
      } else {
        _System._ITuple2<Dafny.ISequence<BigInteger>, BigInteger> _let_tmp_rhs7 = Std.Strings.DecimalConversion.__default.SeqSub(Std.Collections.Seq.__default.DropLast<BigInteger>(xs), Std.Collections.Seq.__default.DropLast<BigInteger>(ys));
        Dafny.ISequence<BigInteger> _175_zs = _let_tmp_rhs7.dtor__0;
        BigInteger _176_cin = _let_tmp_rhs7.dtor__1;
        _System._ITuple2<BigInteger, BigInteger> _let_tmp_rhs8 = (((Std.Collections.Seq.__default.Last<BigInteger>(xs)) >= ((Std.Collections.Seq.__default.Last<BigInteger>(ys)) + (_176_cin))) ? (_System.Tuple2<BigInteger, BigInteger>.create(((Std.Collections.Seq.__default.Last<BigInteger>(xs)) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.Zero)) : (_System.Tuple2<BigInteger, BigInteger>.create((((Std.Strings.DecimalConversion.__default.BASE()) + (Std.Collections.Seq.__default.Last<BigInteger>(xs))) - (Std.Collections.Seq.__default.Last<BigInteger>(ys))) - (_176_cin), BigInteger.One)));
        BigInteger _177_diff__out = _let_tmp_rhs8.dtor__0;
        BigInteger _178_cout = _let_tmp_rhs8.dtor__1;
        return _System.Tuple2<Dafny.ISequence<BigInteger>, BigInteger>.create(Dafny.Sequence<BigInteger>.Concat(_175_zs, Dafny.Sequence<BigInteger>.FromElements(_177_diff__out)), _178_cout);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DIGITS {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> chars {
      get {
        return Std.Strings.DecimalConversion.__default.DIGITS;
      }
    }
    public static BigInteger @base {
      get {
        return new BigInteger((Std.Strings.DecimalConversion.__default.chars).Count);
      }
    }
    public static Dafny.IMap<Dafny.Rune, BigInteger> charToDigit {
      get {
        return Dafny.Map<Dafny.Rune, BigInteger>.FromElements(new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('0'), BigInteger.Zero), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('1'), BigInteger.One), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('2'), new BigInteger(2)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('3'), new BigInteger(3)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('4'), new BigInteger(4)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('5'), new BigInteger(5)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('6'), new BigInteger(6)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('7'), new BigInteger(7)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('8'), new BigInteger(8)), new Dafny.Pair<Dafny.Rune, BigInteger>(new Dafny.Rune('9'), new BigInteger(9)));
      }
    }
  }

  public partial class CharSeq {
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public partial class digit {
    private static readonly Dafny.TypeDescriptor<BigInteger> _TYPE = new Dafny.TypeDescriptor<BigInteger>(BigInteger.Zero);
    public static Dafny.TypeDescriptor<BigInteger> _TypeDescriptor() {
      return _TYPE;
    }
  }
} // end of namespace Std.Strings.DecimalConversion
namespace Std.Strings.CharStrEscaping {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> Escape(Dafny.ISequence<Dafny.Rune> str, Dafny.ISet<Dafny.Rune> mustEscape, Dafny.Rune escape) {
      Dafny.ISequence<Dafny.Rune> _179___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, str);
      } else if ((mustEscape).Contains((str).Select(BigInteger.Zero))) {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements(escape, (str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in56 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in57 = mustEscape;
        Dafny.Rune _in58 = escape;
        str = _in56;
        mustEscape = _in57;
        escape = _in58;
        goto TAIL_CALL_START;
      } else {
        _179___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_179___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in59 = (str).Drop(BigInteger.One);
        Dafny.ISet<Dafny.Rune> _in60 = mustEscape;
        Dafny.Rune _in61 = escape;
        str = _in59;
        mustEscape = _in60;
        escape = _in61;
        goto TAIL_CALL_START;
      }
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> Unescape(Dafny.ISequence<Dafny.Rune> str, Dafny.Rune escape) {
      if ((str).Equals(Dafny.Sequence<Dafny.Rune>.FromElements())) {
        return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(str);
      } else if (((str).Select(BigInteger.Zero)) == (escape)) {
        if ((new BigInteger((str).Count)) > (BigInteger.One)) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _180_valueOrError0 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(new BigInteger(2)), escape);
          if ((_180_valueOrError0).IsFailure()) {
            return (_180_valueOrError0).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
          } else {
            Dafny.ISequence<Dafny.Rune> _181_tl = (_180_valueOrError0).Extract();
            return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.One)), _181_tl));
          }
        } else {
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
        }
      } else {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _182_valueOrError1 = Std.Strings.CharStrEscaping.__default.Unescape((str).Drop(BigInteger.One), escape);
        if ((_182_valueOrError1).IsFailure()) {
          return (_182_valueOrError1).PropagateFailure<Dafny.ISequence<Dafny.Rune>>();
        } else {
          Dafny.ISequence<Dafny.Rune> _183_tl = (_182_valueOrError1).Extract();
          return Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((str).Select(BigInteger.Zero)), _183_tl));
        }
      }
    }
  }
} // end of namespace Std.Strings.CharStrEscaping
namespace Std.Strings {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> OfNat(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfNat(n);
    }
    public static Dafny.ISequence<Dafny.Rune> OfInt(BigInteger n) {
      return Std.Strings.DecimalConversion.__default.OfInt(n, new Dafny.Rune('-'));
    }
    public static BigInteger ToNat(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToNat(str);
    }
    public static BigInteger ToInt(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.DecimalConversion.__default.ToInt(str, new Dafny.Rune('-'));
    }
    public static Dafny.ISequence<Dafny.Rune> EscapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Escape(str, Dafny.Set<Dafny.Rune>.FromElements(new Dafny.Rune('\"'), new Dafny.Rune('\'')), new Dafny.Rune('\\'));
    }
    public static Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> UnescapeQuotes(Dafny.ISequence<Dafny.Rune> str) {
      return Std.Strings.CharStrEscaping.__default.Unescape(str, new Dafny.Rune('\\'));
    }
    public static Dafny.ISequence<Dafny.Rune> OfBool(bool b) {
      if (b) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
      } else {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
      }
    }
    public static Dafny.ISequence<Dafny.Rune> OfChar(Dafny.Rune c) {
      return Dafny.Sequence<Dafny.Rune>.FromElements(c);
    }
  }
} // end of namespace Std.Strings

namespace DAST {


  public interface _IModule {
    bool is_Module { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    bool dtor_isExtern { get; }
    Dafny.ISequence<DAST._IModuleItem> dtor_body { get; }
    _IModule DowncastClone();
  }
  public class Module : _IModule {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly bool _isExtern;
    public readonly Dafny.ISequence<DAST._IModuleItem> _body;
    public Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      this._name = name;
      this._isExtern = isExtern;
      this._body = body;
    }
    public _IModule DowncastClone() {
      if (this is _IModule dt) { return dt; }
      return new Module(_name, _isExtern, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Module;
      return oth != null && object.Equals(this._name, oth._name) && this._isExtern == oth._isExtern && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isExtern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Module.Module";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isExtern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IModule theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, false, Dafny.Sequence<DAST._IModuleItem>.Empty);
    public static DAST._IModule Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModule> _TYPE = new Dafny.TypeDescriptor<DAST._IModule>(DAST.Module.Default());
    public static Dafny.TypeDescriptor<DAST._IModule> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModule create(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return new Module(name, isExtern, body);
    }
    public static _IModule create_Module(Dafny.ISequence<Dafny.Rune> name, bool isExtern, Dafny.ISequence<DAST._IModuleItem> body) {
      return create(name, isExtern, body);
    }
    public bool is_Module { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public bool dtor_isExtern {
      get {
        return this._isExtern;
      }
    }
    public Dafny.ISequence<DAST._IModuleItem> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IModuleItem {
    bool is_Module { get; }
    bool is_Class { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    bool is_Datatype { get; }
    DAST._IModule dtor_Module_a0 { get; }
    DAST._IClass dtor_Class_a0 { get; }
    DAST._ITrait dtor_Trait_a0 { get; }
    DAST._INewtype dtor_Newtype_a0 { get; }
    DAST._IDatatype dtor_Datatype_a0 { get; }
    _IModuleItem DowncastClone();
  }
  public abstract class ModuleItem : _IModuleItem {
    public ModuleItem() {
    }
    private static readonly DAST._IModuleItem theDefault = create_Module(DAST.Module.Default());
    public static DAST._IModuleItem Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IModuleItem> _TYPE = new Dafny.TypeDescriptor<DAST._IModuleItem>(DAST.ModuleItem.Default());
    public static Dafny.TypeDescriptor<DAST._IModuleItem> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModuleItem create_Module(DAST._IModule _a0) {
      return new ModuleItem_Module(_a0);
    }
    public static _IModuleItem create_Class(DAST._IClass _a0) {
      return new ModuleItem_Class(_a0);
    }
    public static _IModuleItem create_Trait(DAST._ITrait _a0) {
      return new ModuleItem_Trait(_a0);
    }
    public static _IModuleItem create_Newtype(DAST._INewtype _a0) {
      return new ModuleItem_Newtype(_a0);
    }
    public static _IModuleItem create_Datatype(DAST._IDatatype _a0) {
      return new ModuleItem_Datatype(_a0);
    }
    public bool is_Module { get { return this is ModuleItem_Module; } }
    public bool is_Class { get { return this is ModuleItem_Class; } }
    public bool is_Trait { get { return this is ModuleItem_Trait; } }
    public bool is_Newtype { get { return this is ModuleItem_Newtype; } }
    public bool is_Datatype { get { return this is ModuleItem_Datatype; } }
    public DAST._IModule dtor_Module_a0 {
      get {
        var d = this;
        return ((ModuleItem_Module)d)._a0;
      }
    }
    public DAST._IClass dtor_Class_a0 {
      get {
        var d = this;
        return ((ModuleItem_Class)d)._a0;
      }
    }
    public DAST._ITrait dtor_Trait_a0 {
      get {
        var d = this;
        return ((ModuleItem_Trait)d)._a0;
      }
    }
    public DAST._INewtype dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Newtype)d)._a0;
      }
    }
    public DAST._IDatatype dtor_Datatype_a0 {
      get {
        var d = this;
        return ((ModuleItem_Datatype)d)._a0;
      }
    }
    public abstract _IModuleItem DowncastClone();
  }
  public class ModuleItem_Module : ModuleItem {
    public readonly DAST._IModule _a0;
    public ModuleItem_Module(DAST._IModule _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Module(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Module;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Module";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Class : ModuleItem {
    public readonly DAST._IClass _a0;
    public ModuleItem_Class(DAST._IClass _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Class(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Class;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Class";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Trait : ModuleItem {
    public readonly DAST._ITrait _a0;
    public ModuleItem_Trait(DAST._ITrait _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Trait(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Trait;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Newtype : ModuleItem {
    public readonly DAST._INewtype _a0;
    public ModuleItem_Newtype(DAST._INewtype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class ModuleItem_Datatype : ModuleItem {
    public readonly DAST._IDatatype _a0;
    public ModuleItem_Datatype(DAST._IDatatype _a0) : base() {
      this._a0 = _a0;
    }
    public override _IModuleItem DowncastClone() {
      if (this is _IModuleItem dt) { return dt; }
      return new ModuleItem_Datatype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ModuleItem_Datatype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ModuleItem.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IType {
    bool is_Path { get; }
    bool is_Nullable { get; }
    bool is_Tuple { get; }
    bool is_Array { get; }
    bool is_Seq { get; }
    bool is_Set { get; }
    bool is_Multiset { get; }
    bool is_Map { get; }
    bool is_Arrow { get; }
    bool is_Primitive { get; }
    bool is_Passthrough { get; }
    bool is_TypeArg { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    DAST._IResolvedType dtor_resolved { get; }
    DAST._IType dtor_Nullable_a0 { get; }
    Dafny.ISequence<DAST._IType> dtor_Tuple_a0 { get; }
    DAST._IType dtor_element { get; }
    BigInteger dtor_dims { get; }
    DAST._IType dtor_key { get; }
    DAST._IType dtor_value { get; }
    Dafny.ISequence<DAST._IType> dtor_args { get; }
    DAST._IType dtor_result { get; }
    DAST._IPrimitive dtor_Primitive_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 { get; }
    _IType DowncastClone();
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly DAST._IType theDefault = create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.ResolvedType.Default());
    public static DAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IType> _TYPE = new Dafny.TypeDescriptor<DAST._IType>(DAST.Type.Default());
    public static Dafny.TypeDescriptor<DAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) {
      return new Type_Path(_a0, typeArgs, resolved);
    }
    public static _IType create_Nullable(DAST._IType _a0) {
      return new Type_Nullable(_a0);
    }
    public static _IType create_Tuple(Dafny.ISequence<DAST._IType> _a0) {
      return new Type_Tuple(_a0);
    }
    public static _IType create_Array(DAST._IType element, BigInteger dims) {
      return new Type_Array(element, dims);
    }
    public static _IType create_Seq(DAST._IType element) {
      return new Type_Seq(element);
    }
    public static _IType create_Set(DAST._IType element) {
      return new Type_Set(element);
    }
    public static _IType create_Multiset(DAST._IType element) {
      return new Type_Multiset(element);
    }
    public static _IType create_Map(DAST._IType key, DAST._IType @value) {
      return new Type_Map(key, @value);
    }
    public static _IType create_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) {
      return new Type_Arrow(args, result);
    }
    public static _IType create_Primitive(DAST._IPrimitive _a0) {
      return new Type_Primitive(_a0);
    }
    public static _IType create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_Passthrough(_a0);
    }
    public static _IType create_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Type_TypeArg(_a0);
    }
    public bool is_Path { get { return this is Type_Path; } }
    public bool is_Nullable { get { return this is Type_Nullable; } }
    public bool is_Tuple { get { return this is Type_Tuple; } }
    public bool is_Array { get { return this is Type_Array; } }
    public bool is_Seq { get { return this is Type_Seq; } }
    public bool is_Set { get { return this is Type_Set; } }
    public bool is_Multiset { get { return this is Type_Multiset; } }
    public bool is_Map { get { return this is Type_Map; } }
    public bool is_Arrow { get { return this is Type_Arrow; } }
    public bool is_Primitive { get { return this is Type_Primitive; } }
    public bool is_Passthrough { get { return this is Type_Passthrough; } }
    public bool is_TypeArg { get { return this is Type_TypeArg; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Path_a0 {
      get {
        var d = this;
        return ((Type_Path)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Type_Path)d)._typeArgs;
      }
    }
    public DAST._IResolvedType dtor_resolved {
      get {
        var d = this;
        return ((Type_Path)d)._resolved;
      }
    }
    public DAST._IType dtor_Nullable_a0 {
      get {
        var d = this;
        return ((Type_Nullable)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Type_Tuple)d)._a0;
      }
    }
    public DAST._IType dtor_element {
      get {
        var d = this;
        if (d is Type_Array) { return ((Type_Array)d)._element; }
        if (d is Type_Seq) { return ((Type_Seq)d)._element; }
        if (d is Type_Set) { return ((Type_Set)d)._element; }
        return ((Type_Multiset)d)._element;
      }
    }
    public BigInteger dtor_dims {
      get {
        var d = this;
        return ((Type_Array)d)._dims;
      }
    }
    public DAST._IType dtor_key {
      get {
        var d = this;
        return ((Type_Map)d)._key;
      }
    }
    public DAST._IType dtor_value {
      get {
        var d = this;
        return ((Type_Map)d)._value;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_args {
      get {
        var d = this;
        return ((Type_Arrow)d)._args;
      }
    }
    public DAST._IType dtor_result {
      get {
        var d = this;
        return ((Type_Arrow)d)._result;
      }
    }
    public DAST._IPrimitive dtor_Primitive_a0 {
      get {
        var d = this;
        return ((Type_Primitive)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((Type_Passthrough)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_TypeArg_a0 {
      get {
        var d = this;
        return ((Type_TypeArg)d)._a0;
      }
    }
    public abstract _IType DowncastClone();
  }
  public class Type_Path : Type {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly DAST._IResolvedType _resolved;
    public Type_Path(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0, Dafny.ISequence<DAST._IType> typeArgs, DAST._IResolvedType resolved) : base() {
      this._a0 = _a0;
      this._typeArgs = typeArgs;
      this._resolved = resolved;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Path(_a0, _typeArgs, _resolved);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Path;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._resolved, oth._resolved);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._resolved));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Path";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._resolved);
      s += ")";
      return s;
    }
  }
  public class Type_Nullable : Type {
    public readonly DAST._IType _a0;
    public Type_Nullable(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Nullable(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Nullable;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Nullable";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Tuple : Type {
    public readonly Dafny.ISequence<DAST._IType> _a0;
    public Type_Tuple(Dafny.ISequence<DAST._IType> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Array : Type {
    public readonly DAST._IType _element;
    public readonly BigInteger _dims;
    public Type_Array(DAST._IType element, BigInteger dims) : base() {
      this._element = element;
      this._dims = dims;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Array(_element, _dims);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Array;
      return oth != null && object.Equals(this._element, oth._element) && this._dims == oth._dims;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Array";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dims);
      s += ")";
      return s;
    }
  }
  public class Type_Seq : Type {
    public readonly DAST._IType _element;
    public Type_Seq(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Seq(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Seq;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Seq";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Set : Type {
    public readonly DAST._IType _element;
    public Type_Set(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Set(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Set;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Set";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Multiset : Type {
    public readonly DAST._IType _element;
    public Type_Multiset(DAST._IType element) : base() {
      this._element = element;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Multiset(_element);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Multiset;
      return oth != null && object.Equals(this._element, oth._element);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._element));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Multiset";
      s += "(";
      s += Dafny.Helpers.ToString(this._element);
      s += ")";
      return s;
    }
  }
  public class Type_Map : Type {
    public readonly DAST._IType _key;
    public readonly DAST._IType _value;
    public Type_Map(DAST._IType key, DAST._IType @value) : base() {
      this._key = key;
      this._value = @value;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Map(_key, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Map;
      return oth != null && object.Equals(this._key, oth._key) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._key));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Map";
      s += "(";
      s += Dafny.Helpers.ToString(this._key);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Type_Arrow : Type {
    public readonly Dafny.ISequence<DAST._IType> _args;
    public readonly DAST._IType _result;
    public Type_Arrow(Dafny.ISequence<DAST._IType> args, DAST._IType result) : base() {
      this._args = args;
      this._result = result;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Arrow(_args, _result);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Arrow;
      return oth != null && object.Equals(this._args, oth._args) && object.Equals(this._result, oth._result);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._result));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Arrow";
      s += "(";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._result);
      s += ")";
      return s;
    }
  }
  public class Type_Primitive : Type {
    public readonly DAST._IPrimitive _a0;
    public Type_Primitive(DAST._IPrimitive _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Primitive(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Primitive;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Primitive";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Type_Passthrough : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Type_TypeArg : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Type_TypeArg(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_TypeArg(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Type_TypeArg;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Type.TypeArg";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IPrimitive {
    bool is_Int { get; }
    bool is_Real { get; }
    bool is_String { get; }
    bool is_Bool { get; }
    bool is_Char { get; }
    _IPrimitive DowncastClone();
  }
  public abstract class Primitive : _IPrimitive {
    public Primitive() {
    }
    private static readonly DAST._IPrimitive theDefault = create_Int();
    public static DAST._IPrimitive Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IPrimitive> _TYPE = new Dafny.TypeDescriptor<DAST._IPrimitive>(DAST.Primitive.Default());
    public static Dafny.TypeDescriptor<DAST._IPrimitive> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPrimitive create_Int() {
      return new Primitive_Int();
    }
    public static _IPrimitive create_Real() {
      return new Primitive_Real();
    }
    public static _IPrimitive create_String() {
      return new Primitive_String();
    }
    public static _IPrimitive create_Bool() {
      return new Primitive_Bool();
    }
    public static _IPrimitive create_Char() {
      return new Primitive_Char();
    }
    public bool is_Int { get { return this is Primitive_Int; } }
    public bool is_Real { get { return this is Primitive_Real; } }
    public bool is_String { get { return this is Primitive_String; } }
    public bool is_Bool { get { return this is Primitive_Bool; } }
    public bool is_Char { get { return this is Primitive_Char; } }
    public static System.Collections.Generic.IEnumerable<_IPrimitive> AllSingletonConstructors {
      get {
        yield return Primitive.create_Int();
        yield return Primitive.create_Real();
        yield return Primitive.create_String();
        yield return Primitive.create_Bool();
        yield return Primitive.create_Char();
      }
    }
    public abstract _IPrimitive DowncastClone();
  }
  public class Primitive_Int : Primitive {
    public Primitive_Int() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Int();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Int;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Int";
      return s;
    }
  }
  public class Primitive_Real : Primitive {
    public Primitive_Real() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Real();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Real;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Real";
      return s;
    }
  }
  public class Primitive_String : Primitive {
    public Primitive_String() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_String();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_String;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.String";
      return s;
    }
  }
  public class Primitive_Bool : Primitive {
    public Primitive_Bool() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Bool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Bool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Bool";
      return s;
    }
  }
  public class Primitive_Char : Primitive {
    public Primitive_Char() : base() {
    }
    public override _IPrimitive DowncastClone() {
      if (this is _IPrimitive dt) { return dt; }
      return new Primitive_Char();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Primitive_Char;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Primitive.Char";
      return s;
    }
  }

  public interface _IResolvedType {
    bool is_Datatype { get; }
    bool is_Trait { get; }
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    DAST._IType dtor_Newtype_a0 { get; }
    _IResolvedType DowncastClone();
  }
  public abstract class ResolvedType : _IResolvedType {
    public ResolvedType() {
    }
    private static readonly DAST._IResolvedType theDefault = create_Datatype(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty);
    public static DAST._IResolvedType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IResolvedType> _TYPE = new Dafny.TypeDescriptor<DAST._IResolvedType>(DAST.ResolvedType.Default());
    public static Dafny.TypeDescriptor<DAST._IResolvedType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IResolvedType create_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Datatype(path);
    }
    public static _IResolvedType create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      return new ResolvedType_Trait(path);
    }
    public static _IResolvedType create_Newtype(DAST._IType _a0) {
      return new ResolvedType_Newtype(_a0);
    }
    public bool is_Datatype { get { return this is ResolvedType_Datatype; } }
    public bool is_Trait { get { return this is ResolvedType_Trait; } }
    public bool is_Newtype { get { return this is ResolvedType_Newtype; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is ResolvedType_Datatype) { return ((ResolvedType_Datatype)d)._path; }
        return ((ResolvedType_Trait)d)._path;
      }
    }
    public DAST._IType dtor_Newtype_a0 {
      get {
        var d = this;
        return ((ResolvedType_Newtype)d)._a0;
      }
    }
    public abstract _IResolvedType DowncastClone();
  }
  public class ResolvedType_Datatype : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Datatype(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Datatype(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Datatype;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Datatype";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Trait : ResolvedType {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public ResolvedType_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) : base() {
      this._path = path;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Trait(_path);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Trait;
      return oth != null && object.Equals(this._path, oth._path);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ")";
      return s;
    }
  }
  public class ResolvedType_Newtype : ResolvedType {
    public readonly DAST._IType _a0;
    public ResolvedType_Newtype(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _IResolvedType DowncastClone() {
      if (this is _IResolvedType dt) { return dt; }
      return new ResolvedType_Newtype(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ResolvedType_Newtype;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ResolvedType.Newtype";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IIdent {
    bool is_Ident { get; }
    Dafny.ISequence<Dafny.Rune> dtor_id { get; }
  }
  public class Ident : _IIdent {
    public readonly Dafny.ISequence<Dafny.Rune> _id;
    public Ident(Dafny.ISequence<Dafny.Rune> id) {
      this._id = id;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Ident;
      return oth != null && object.Equals(this._id, oth._id);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._id));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Ident.Ident";
      s += "(";
      s += this._id.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IIdent create(Dafny.ISequence<Dafny.Rune> id) {
      return new Ident(id);
    }
    public static _IIdent create_Ident(Dafny.ISequence<Dafny.Rune> id) {
      return create(id);
    }
    public bool is_Ident { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_id {
      get {
        return this._id;
      }
    }
  }

  public interface _IClass {
    bool is_Class { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IType> dtor_superClasses { get; }
    Dafny.ISequence<DAST._IField> dtor_fields { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _IClass DowncastClone();
  }
  public class Class : _IClass {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IType> _superClasses;
    public readonly Dafny.ISequence<DAST._IField> _fields;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._superClasses = superClasses;
      this._fields = fields;
      this._body = body;
    }
    public _IClass DowncastClone() {
      if (this is _IClass dt) { return dt; }
      return new Class(_name, _enclosingModule, _typeParams, _superClasses, _fields, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Class;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._superClasses, oth._superClasses) && object.Equals(this._fields, oth._fields) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._superClasses));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Class.Class";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._superClasses);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._IClass theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IField>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._IClass Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IClass> _TYPE = new Dafny.TypeDescriptor<DAST._IClass>(DAST.Class.Default());
    public static Dafny.TypeDescriptor<DAST._IClass> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClass create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return new Class(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public static _IClass create_Class(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IType> superClasses, Dafny.ISequence<DAST._IField> fields, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, enclosingModule, typeParams, superClasses, fields, body);
    }
    public bool is_Class { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_superClasses {
      get {
        return this._superClasses;
      }
    }
    public Dafny.ISequence<DAST._IField> dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    _ITrait DowncastClone();
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_name, _typeParams, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Trait;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Trait.Trait";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly DAST._ITrait theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IMethod>.Empty);
    public static DAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ITrait> _TYPE = new Dafny.TypeDescriptor<DAST._ITrait>(DAST.Trait.Default());
    public static Dafny.TypeDescriptor<DAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return new Trait(name, typeParams, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IMethod> body) {
      return create(name, typeParams, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
  }

  public interface _IDatatype {
    bool is_Datatype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.Rune> dtor_enclosingModule { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors { get; }
    Dafny.ISequence<DAST._IMethod> dtor_body { get; }
    bool dtor_isCo { get; }
    _IDatatype DowncastClone();
  }
  public class Datatype : _IDatatype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.Rune> _enclosingModule;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IDatatypeCtor> _ctors;
    public readonly Dafny.ISequence<DAST._IMethod> _body;
    public readonly bool _isCo;
    public Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      this._name = name;
      this._enclosingModule = enclosingModule;
      this._typeParams = typeParams;
      this._ctors = ctors;
      this._body = body;
      this._isCo = isCo;
    }
    public _IDatatype DowncastClone() {
      if (this is _IDatatype dt) { return dt; }
      return new Datatype(_name, _enclosingModule, _typeParams, _ctors, _body, _isCo);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Datatype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._enclosingModule, oth._enclosingModule) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._ctors, oth._ctors) && object.Equals(this._body, oth._body) && this._isCo == oth._isCo;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enclosingModule));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._ctors));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Datatype.Datatype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._enclosingModule);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._ctors);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IDatatypeCtor>.Empty, Dafny.Sequence<DAST._IMethod>.Empty, false);
    public static DAST._IDatatype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatype> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatype>(DAST.Datatype.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return new Datatype(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public static _IDatatype create_Datatype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.Rune> enclosingModule, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IDatatypeCtor> ctors, Dafny.ISequence<DAST._IMethod> body, bool isCo) {
      return create(name, enclosingModule, typeParams, ctors, body, isCo);
    }
    public bool is_Datatype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_enclosingModule {
      get {
        return this._enclosingModule;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IDatatypeCtor> dtor_ctors {
      get {
        return this._ctors;
      }
    }
    public Dafny.ISequence<DAST._IMethod> dtor_body {
      get {
        return this._body;
      }
    }
    public bool dtor_isCo {
      get {
        return this._isCo;
      }
    }
  }

  public interface _IDatatypeCtor {
    bool is_DatatypeCtor { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_args { get; }
    bool dtor_hasAnyArgs { get; }
    _IDatatypeCtor DowncastClone();
  }
  public class DatatypeCtor : _IDatatypeCtor {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IFormal> _args;
    public readonly bool _hasAnyArgs;
    public DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      this._name = name;
      this._args = args;
      this._hasAnyArgs = hasAnyArgs;
    }
    public _IDatatypeCtor DowncastClone() {
      if (this is _IDatatypeCtor dt) { return dt; }
      return new DatatypeCtor(_name, _args, _hasAnyArgs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.DatatypeCtor;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._args, oth._args) && this._hasAnyArgs == oth._hasAnyArgs;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasAnyArgs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.DatatypeCtor.DatatypeCtor";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasAnyArgs);
      s += ")";
      return s;
    }
    private static readonly DAST._IDatatypeCtor theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, false);
    public static DAST._IDatatypeCtor Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TYPE = new Dafny.TypeDescriptor<DAST._IDatatypeCtor>(DAST.DatatypeCtor.Default());
    public static Dafny.TypeDescriptor<DAST._IDatatypeCtor> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IDatatypeCtor create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return new DatatypeCtor(name, args, hasAnyArgs);
    }
    public static _IDatatypeCtor create_DatatypeCtor(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IFormal> args, bool hasAnyArgs) {
      return create(name, args, hasAnyArgs);
    }
    public bool is_DatatypeCtor { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_args {
      get {
        return this._args;
      }
    }
    public bool dtor_hasAnyArgs {
      get {
        return this._hasAnyArgs;
      }
    }
  }

  public interface _INewtype {
    bool is_Newtype { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    DAST._IType dtor_base { get; }
    Dafny.ISequence<DAST._IStatement> dtor_witnessStmts { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr { get; }
    _INewtype DowncastClone();
  }
  public class Newtype : _INewtype {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly DAST._IType _base;
    public readonly Dafny.ISequence<DAST._IStatement> _witnessStmts;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _witnessExpr;
    public Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      this._name = name;
      this._typeParams = typeParams;
      this._base = @base;
      this._witnessStmts = witnessStmts;
      this._witnessExpr = witnessExpr;
    }
    public _INewtype DowncastClone() {
      if (this is _INewtype dt) { return dt; }
      return new Newtype(_name, _typeParams, _base, _witnessStmts, _witnessExpr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Newtype;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._base, oth._base) && object.Equals(this._witnessStmts, oth._witnessStmts) && object.Equals(this._witnessExpr, oth._witnessExpr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._base));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessStmts));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._witnessExpr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Newtype.Newtype";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._base);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessStmts);
      s += ", ";
      s += Dafny.Helpers.ToString(this._witnessExpr);
      s += ")";
      return s;
    }
    private static readonly DAST._INewtype theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, DAST.Type.Default(), Dafny.Sequence<DAST._IStatement>.Empty, Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._INewtype Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._INewtype> _TYPE = new Dafny.TypeDescriptor<DAST._INewtype>(DAST.Newtype.Default());
    public static Dafny.TypeDescriptor<DAST._INewtype> _TypeDescriptor() {
      return _TYPE;
    }
    public static _INewtype create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return new Newtype(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public static _INewtype create_Newtype(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, DAST._IType @base, Dafny.ISequence<DAST._IStatement> witnessStmts, Std.Wrappers._IOption<DAST._IExpression> witnessExpr) {
      return create(name, typeParams, @base, witnessStmts, witnessExpr);
    }
    public bool is_Newtype { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public DAST._IType dtor_base {
      get {
        return this._base;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_witnessStmts {
      get {
        return this._witnessStmts;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_witnessExpr {
      get {
        return this._witnessExpr;
      }
    }
  }

  public interface _IClassItem {
    bool is_Method { get; }
    DAST._IMethod dtor_Method_a0 { get; }
  }
  public class ClassItem : _IClassItem {
    public readonly DAST._IMethod _a0;
    public ClassItem(DAST._IMethod _a0) {
      this._a0 = _a0;
    }
    public static DAST._IMethod DowncastClone(DAST._IMethod _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as DAST.ClassItem;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.ClassItem.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = DAST.Method.Default();
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IClassItem create(DAST._IMethod _a0) {
      return new ClassItem(_a0);
    }
    public static _IClassItem create_Method(DAST._IMethod _a0) {
      return create(_a0);
    }
    public bool is_Method { get { return true; } }
    public DAST._IMethod dtor_Method_a0 {
      get {
        return this._a0;
      }
    }
  }

  public interface _IField {
    bool is_Field { get; }
    DAST._IFormal dtor_formal { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue { get; }
    _IField DowncastClone();
  }
  public class Field : _IField {
    public readonly DAST._IFormal _formal;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _defaultValue;
    public Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      this._formal = formal;
      this._defaultValue = defaultValue;
    }
    public _IField DowncastClone() {
      if (this is _IField dt) { return dt; }
      return new Field(_formal, _defaultValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Field;
      return oth != null && object.Equals(this._formal, oth._formal) && object.Equals(this._defaultValue, oth._defaultValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formal));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._defaultValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Field.Field";
      s += "(";
      s += Dafny.Helpers.ToString(this._formal);
      s += ", ";
      s += Dafny.Helpers.ToString(this._defaultValue);
      s += ")";
      return s;
    }
    private static readonly DAST._IField theDefault = create(DAST.Formal.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IField Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IField> _TYPE = new Dafny.TypeDescriptor<DAST._IField>(DAST.Field.Default());
    public static Dafny.TypeDescriptor<DAST._IField> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IField create(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return new Field(formal, defaultValue);
    }
    public static _IField create_Field(DAST._IFormal formal, Std.Wrappers._IOption<DAST._IExpression> defaultValue) {
      return create(formal, defaultValue);
    }
    public bool is_Field { get { return true; } }
    public DAST._IFormal dtor_formal {
      get {
        return this._formal;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_defaultValue {
      get {
        return this._defaultValue;
      }
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    _IFormal DowncastClone();
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      this._name = name;
      this._typ = typ;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
    private static readonly DAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default());
    public static DAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IFormal> _TYPE = new Dafny.TypeDescriptor<DAST._IFormal>(DAST.Formal.Default());
    public static Dafny.TypeDescriptor<DAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return new Formal(name, typ);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ) {
      return create(name, typ);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        return this._typ;
      }
    }
  }

  public interface _IMethod {
    bool is_Method { get; }
    bool dtor_isStatic { get; }
    bool dtor_hasBody { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IType> dtor_typeParams { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<DAST._IType> dtor_outTypes { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars { get; }
    _IMethod DowncastClone();
  }
  public class Method : _IMethod {
    public readonly bool _isStatic;
    public readonly bool _hasBody;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _overridingPath;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeParams;
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public readonly Dafny.ISequence<DAST._IType> _outTypes;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outVars;
    public Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      this._isStatic = isStatic;
      this._hasBody = hasBody;
      this._overridingPath = overridingPath;
      this._name = name;
      this._typeParams = typeParams;
      this._params = @params;
      this._body = body;
      this._outTypes = outTypes;
      this._outVars = outVars;
    }
    public _IMethod DowncastClone() {
      if (this is _IMethod dt) { return dt; }
      return new Method(_isStatic, _hasBody, _overridingPath, _name, _typeParams, _params, _body, _outTypes, _outVars);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Method;
      return oth != null && this._isStatic == oth._isStatic && this._hasBody == oth._hasBody && object.Equals(this._overridingPath, oth._overridingPath) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._params, oth._params) && object.Equals(this._body, oth._body) && object.Equals(this._outTypes, oth._outTypes) && object.Equals(this._outVars, oth._outVars);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hasBody));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._overridingPath));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outTypes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outVars));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Method.Method";
      s += "(";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hasBody);
      s += ", ";
      s += Dafny.Helpers.ToString(this._overridingPath);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outTypes);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outVars);
      s += ")";
      return s;
    }
    private static readonly DAST._IMethod theDefault = create(false, false, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<DAST._IType>.Empty, Dafny.Sequence<DAST._IFormal>.Empty, Dafny.Sequence<DAST._IStatement>.Empty, Dafny.Sequence<DAST._IType>.Empty, Std.Wrappers.Option<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>>.Default());
    public static DAST._IMethod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IMethod> _TYPE = new Dafny.TypeDescriptor<DAST._IMethod>(DAST.Method.Default());
    public static Dafny.TypeDescriptor<DAST._IMethod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMethod create(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return new Method(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public static _IMethod create_Method(bool isStatic, bool hasBody, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> overridingPath, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeParams, Dafny.ISequence<DAST._IFormal> @params, Dafny.ISequence<DAST._IStatement> body, Dafny.ISequence<DAST._IType> outTypes, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outVars) {
      return create(isStatic, hasBody, overridingPath, name, typeParams, @params, body, outTypes, outVars);
    }
    public bool is_Method { get { return true; } }
    public bool dtor_isStatic {
      get {
        return this._isStatic;
      }
    }
    public bool dtor_hasBody {
      get {
        return this._hasBody;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_overridingPath {
      get {
        return this._overridingPath;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        return this._params;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_outTypes {
      get {
        return this._outTypes;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outVars {
      get {
        return this._outVars;
      }
    }
  }

  public interface _IStatement {
    bool is_DeclareVar { get; }
    bool is_Assign { get; }
    bool is_If { get; }
    bool is_Labeled { get; }
    bool is_While { get; }
    bool is_Foreach { get; }
    bool is_Call { get; }
    bool is_Return { get; }
    bool is_EarlyReturn { get; }
    bool is_Break { get; }
    bool is_TailRecursive { get; }
    bool is_JumpTailCallStart { get; }
    bool is_Halt { get; }
    bool is_Print { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    DAST._IType dtor_typ { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue { get; }
    DAST._IAssignLhs dtor_lhs { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IExpression dtor_cond { get; }
    Dafny.ISequence<DAST._IStatement> dtor_thn { get; }
    Dafny.ISequence<DAST._IStatement> dtor_els { get; }
    Dafny.ISequence<Dafny.Rune> dtor_lbl { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<Dafny.Rune> dtor_boundName { get; }
    DAST._IType dtor_boundType { get; }
    DAST._IExpression dtor_over { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs { get; }
    DAST._IExpression dtor_expr { get; }
    Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel { get; }
    DAST._IExpression dtor_Print_a0 { get; }
    _IStatement DowncastClone();
  }
  public abstract class Statement : _IStatement {
    public Statement() {
    }
    private static readonly DAST._IStatement theDefault = create_DeclareVar(Dafny.Sequence<Dafny.Rune>.Empty, DAST.Type.Default(), Std.Wrappers.Option<DAST._IExpression>.Default());
    public static DAST._IStatement Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IStatement> _TYPE = new Dafny.TypeDescriptor<DAST._IStatement>(DAST.Statement.Default());
    public static Dafny.TypeDescriptor<DAST._IStatement> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStatement create_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) {
      return new Statement_DeclareVar(name, typ, maybeValue);
    }
    public static _IStatement create_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) {
      return new Statement_Assign(lhs, @value);
    }
    public static _IStatement create_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) {
      return new Statement_If(cond, thn, els);
    }
    public static _IStatement create_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Labeled(lbl, body);
    }
    public static _IStatement create_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_While(cond, body);
    }
    public static _IStatement create_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_Foreach(boundName, boundType, over, body);
    }
    public static _IStatement create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) {
      return new Statement_Call(@on, name, typeArgs, args, outs);
    }
    public static _IStatement create_Return(DAST._IExpression expr) {
      return new Statement_Return(expr);
    }
    public static _IStatement create_EarlyReturn() {
      return new Statement_EarlyReturn();
    }
    public static _IStatement create_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) {
      return new Statement_Break(toLabel);
    }
    public static _IStatement create_TailRecursive(Dafny.ISequence<DAST._IStatement> body) {
      return new Statement_TailRecursive(body);
    }
    public static _IStatement create_JumpTailCallStart() {
      return new Statement_JumpTailCallStart();
    }
    public static _IStatement create_Halt() {
      return new Statement_Halt();
    }
    public static _IStatement create_Print(DAST._IExpression _a0) {
      return new Statement_Print(_a0);
    }
    public bool is_DeclareVar { get { return this is Statement_DeclareVar; } }
    public bool is_Assign { get { return this is Statement_Assign; } }
    public bool is_If { get { return this is Statement_If; } }
    public bool is_Labeled { get { return this is Statement_Labeled; } }
    public bool is_While { get { return this is Statement_While; } }
    public bool is_Foreach { get { return this is Statement_Foreach; } }
    public bool is_Call { get { return this is Statement_Call; } }
    public bool is_Return { get { return this is Statement_Return; } }
    public bool is_EarlyReturn { get { return this is Statement_EarlyReturn; } }
    public bool is_Break { get { return this is Statement_Break; } }
    public bool is_TailRecursive { get { return this is Statement_TailRecursive; } }
    public bool is_JumpTailCallStart { get { return this is Statement_JumpTailCallStart; } }
    public bool is_Halt { get { return this is Statement_Halt; } }
    public bool is_Print { get { return this is Statement_Print; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Statement_DeclareVar) { return ((Statement_DeclareVar)d)._name; }
        return ((Statement_Call)d)._name;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._typ;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_maybeValue {
      get {
        var d = this;
        return ((Statement_DeclareVar)d)._maybeValue;
      }
    }
    public DAST._IAssignLhs dtor_lhs {
      get {
        var d = this;
        return ((Statement_Assign)d)._lhs;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        return ((Statement_Assign)d)._value;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        if (d is Statement_If) { return ((Statement_If)d)._cond; }
        return ((Statement_While)d)._cond;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_thn {
      get {
        var d = this;
        return ((Statement_If)d)._thn;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_els {
      get {
        var d = this;
        return ((Statement_If)d)._els;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_lbl {
      get {
        var d = this;
        return ((Statement_Labeled)d)._lbl;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        if (d is Statement_Labeled) { return ((Statement_Labeled)d)._body; }
        if (d is Statement_While) { return ((Statement_While)d)._body; }
        if (d is Statement_Foreach) { return ((Statement_Foreach)d)._body; }
        return ((Statement_TailRecursive)d)._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_boundName {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundName;
      }
    }
    public DAST._IType dtor_boundType {
      get {
        var d = this;
        return ((Statement_Foreach)d)._boundType;
      }
    }
    public DAST._IExpression dtor_over {
      get {
        var d = this;
        return ((Statement_Foreach)d)._over;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        return ((Statement_Call)d)._on;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        return ((Statement_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        return ((Statement_Call)d)._args;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> dtor_outs {
      get {
        var d = this;
        return ((Statement_Call)d)._outs;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        return ((Statement_Return)d)._expr;
      }
    }
    public Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> dtor_toLabel {
      get {
        var d = this;
        return ((Statement_Break)d)._toLabel;
      }
    }
    public DAST._IExpression dtor_Print_a0 {
      get {
        var d = this;
        return ((Statement_Print)d)._a0;
      }
    }
    public abstract _IStatement DowncastClone();
  }
  public class Statement_DeclareVar : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _maybeValue;
    public Statement_DeclareVar(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, Std.Wrappers._IOption<DAST._IExpression> maybeValue) : base() {
      this._name = name;
      this._typ = typ;
      this._maybeValue = maybeValue;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_DeclareVar(_name, _typ, _maybeValue);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_DeclareVar;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._maybeValue, oth._maybeValue);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._maybeValue));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.DeclareVar";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._maybeValue);
      s += ")";
      return s;
    }
  }
  public class Statement_Assign : Statement {
    public readonly DAST._IAssignLhs _lhs;
    public readonly DAST._IExpression _value;
    public Statement_Assign(DAST._IAssignLhs lhs, DAST._IExpression @value) : base() {
      this._lhs = lhs;
      this._value = @value;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Assign(_lhs, _value);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Assign;
      return oth != null && object.Equals(this._lhs, oth._lhs) && object.Equals(this._value, oth._value);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lhs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Assign";
      s += "(";
      s += Dafny.Helpers.ToString(this._lhs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ")";
      return s;
    }
  }
  public class Statement_If : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _thn;
    public readonly Dafny.ISequence<DAST._IStatement> _els;
    public Statement_If(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> thn, Dafny.ISequence<DAST._IStatement> els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_If(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_If;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.If";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Statement_Labeled : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _lbl;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Labeled(Dafny.ISequence<Dafny.Rune> lbl, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._lbl = lbl;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Labeled(_lbl, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Labeled;
      return oth != null && object.Equals(this._lbl, oth._lbl) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lbl));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Labeled";
      s += "(";
      s += this._lbl.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_While : Statement {
    public readonly DAST._IExpression _cond;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_While(DAST._IExpression cond, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._cond = cond;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_While(_cond, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_While;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.While";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Foreach : Statement {
    public readonly Dafny.ISequence<Dafny.Rune> _boundName;
    public readonly DAST._IType _boundType;
    public readonly DAST._IExpression _over;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_Foreach(Dafny.ISequence<Dafny.Rune> boundName, DAST._IType boundType, DAST._IExpression over, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._boundName = boundName;
      this._boundType = boundType;
      this._over = over;
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Foreach(_boundName, _boundType, _over, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Foreach;
      return oth != null && object.Equals(this._boundName, oth._boundName) && object.Equals(this._boundType, oth._boundType) && object.Equals(this._over, oth._over) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundName));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._boundType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._over));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Foreach";
      s += "(";
      s += this._boundName.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._boundType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._over);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_Call : Statement {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _outs;
    public Statement_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args, Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> outs) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
      this._outs = outs;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Call(_on, _name, _typeArgs, _args, _outs);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args) && object.Equals(this._outs, oth._outs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._outs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ", ";
      s += Dafny.Helpers.ToString(this._outs);
      s += ")";
      return s;
    }
  }
  public class Statement_Return : Statement {
    public readonly DAST._IExpression _expr;
    public Statement_Return(DAST._IExpression expr) : base() {
      this._expr = expr;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Return(_expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Return;
      return oth != null && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Return";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Statement_EarlyReturn : Statement {
    public Statement_EarlyReturn() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_EarlyReturn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_EarlyReturn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.EarlyReturn";
      return s;
    }
  }
  public class Statement_Break : Statement {
    public readonly Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _toLabel;
    public Statement_Break(Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> toLabel) : base() {
      this._toLabel = toLabel;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Break(_toLabel);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Break;
      return oth != null && object.Equals(this._toLabel, oth._toLabel);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._toLabel));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Break";
      s += "(";
      s += Dafny.Helpers.ToString(this._toLabel);
      s += ")";
      return s;
    }
  }
  public class Statement_TailRecursive : Statement {
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Statement_TailRecursive(Dafny.ISequence<DAST._IStatement> body) : base() {
      this._body = body;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_TailRecursive(_body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_TailRecursive;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.TailRecursive";
      s += "(";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Statement_JumpTailCallStart : Statement {
    public Statement_JumpTailCallStart() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_JumpTailCallStart();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_JumpTailCallStart;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.JumpTailCallStart";
      return s;
    }
  }
  public class Statement_Halt : Statement {
    public Statement_Halt() : base() {
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Halt();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Halt;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Halt";
      return s;
    }
  }
  public class Statement_Print : Statement {
    public readonly DAST._IExpression _a0;
    public Statement_Print(DAST._IExpression _a0) : base() {
      this._a0 = _a0;
    }
    public override _IStatement DowncastClone() {
      if (this is _IStatement dt) { return dt; }
      return new Statement_Print(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Statement_Print;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Statement.Print";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }

  public interface _IAssignLhs {
    bool is_Ident { get; }
    bool is_Select { get; }
    bool is_Index { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    DAST._IExpression dtor_expr { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    _IAssignLhs DowncastClone();
  }
  public abstract class AssignLhs : _IAssignLhs {
    public AssignLhs() {
    }
    private static readonly DAST._IAssignLhs theDefault = create_Ident(Dafny.Sequence<Dafny.Rune>.Empty);
    public static DAST._IAssignLhs Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IAssignLhs> _TYPE = new Dafny.TypeDescriptor<DAST._IAssignLhs>(DAST.AssignLhs.Default());
    public static Dafny.TypeDescriptor<DAST._IAssignLhs> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignLhs create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new AssignLhs_Ident(_a0);
    }
    public static _IAssignLhs create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) {
      return new AssignLhs_Select(expr, field);
    }
    public static _IAssignLhs create_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) {
      return new AssignLhs_Index(expr, indices);
    }
    public bool is_Ident { get { return this is AssignLhs_Ident; } }
    public bool is_Select { get { return this is AssignLhs_Select; } }
    public bool is_Index { get { return this is AssignLhs_Index; } }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((AssignLhs_Ident)d)._a0;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is AssignLhs_Select) { return ((AssignLhs_Select)d)._expr; }
        return ((AssignLhs_Index)d)._expr;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        return ((AssignLhs_Select)d)._field;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((AssignLhs_Index)d)._indices;
      }
    }
    public abstract _IAssignLhs DowncastClone();
  }
  public class AssignLhs_Ident : AssignLhs {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public AssignLhs_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Ident";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Select : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public AssignLhs_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field) : base() {
      this._expr = expr;
      this._field = field;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Select(_expr, _field);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class AssignLhs_Index : AssignLhs {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public AssignLhs_Index(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._indices = indices;
    }
    public override _IAssignLhs DowncastClone() {
      if (this is _IAssignLhs dt) { return dt; }
      return new AssignLhs_Index(_expr, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.AssignLhs_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.AssignLhs.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }

  public interface _ICollKind {
    bool is_Seq { get; }
    bool is_Array { get; }
    bool is_Map { get; }
    _ICollKind DowncastClone();
  }
  public abstract class CollKind : _ICollKind {
    public CollKind() {
    }
    private static readonly DAST._ICollKind theDefault = create_Seq();
    public static DAST._ICollKind Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ICollKind> _TYPE = new Dafny.TypeDescriptor<DAST._ICollKind>(DAST.CollKind.Default());
    public static Dafny.TypeDescriptor<DAST._ICollKind> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ICollKind create_Seq() {
      return new CollKind_Seq();
    }
    public static _ICollKind create_Array() {
      return new CollKind_Array();
    }
    public static _ICollKind create_Map() {
      return new CollKind_Map();
    }
    public bool is_Seq { get { return this is CollKind_Seq; } }
    public bool is_Array { get { return this is CollKind_Array; } }
    public bool is_Map { get { return this is CollKind_Map; } }
    public static System.Collections.Generic.IEnumerable<_ICollKind> AllSingletonConstructors {
      get {
        yield return CollKind.create_Seq();
        yield return CollKind.create_Array();
        yield return CollKind.create_Map();
      }
    }
    public abstract _ICollKind DowncastClone();
  }
  public class CollKind_Seq : CollKind {
    public CollKind_Seq() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Seq();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Seq;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Seq";
      return s;
    }
  }
  public class CollKind_Array : CollKind {
    public CollKind_Array() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Array();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Array;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Array";
      return s;
    }
  }
  public class CollKind_Map : CollKind {
    public CollKind_Map() : base() {
    }
    public override _ICollKind DowncastClone() {
      if (this is _ICollKind dt) { return dt; }
      return new CollKind_Map();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.CollKind_Map;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.CollKind.Map";
      return s;
    }
  }

  public interface _IBinOp {
    bool is_Eq { get; }
    bool is_Neq { get; }
    bool is_Div { get; }
    bool is_EuclidianDiv { get; }
    bool is_Mod { get; }
    bool is_EuclidianMod { get; }
    bool is_Implies { get; }
    bool is_In { get; }
    bool is_NotIn { get; }
    bool is_SetDifference { get; }
    bool is_Concat { get; }
    bool is_Passthrough { get; }
    bool dtor_referential { get; }
    bool dtor_nullable { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 { get; }
    _IBinOp DowncastClone();
  }
  public abstract class BinOp : _IBinOp {
    public BinOp() {
    }
    private static readonly DAST._IBinOp theDefault = create_Eq(false, false);
    public static DAST._IBinOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IBinOp> _TYPE = new Dafny.TypeDescriptor<DAST._IBinOp>(DAST.BinOp.Default());
    public static Dafny.TypeDescriptor<DAST._IBinOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IBinOp create_Eq(bool referential, bool nullable) {
      return new BinOp_Eq(referential, nullable);
    }
    public static _IBinOp create_Neq(bool referential, bool nullable) {
      return new BinOp_Neq(referential, nullable);
    }
    public static _IBinOp create_Div() {
      return new BinOp_Div();
    }
    public static _IBinOp create_EuclidianDiv() {
      return new BinOp_EuclidianDiv();
    }
    public static _IBinOp create_Mod() {
      return new BinOp_Mod();
    }
    public static _IBinOp create_EuclidianMod() {
      return new BinOp_EuclidianMod();
    }
    public static _IBinOp create_Implies() {
      return new BinOp_Implies();
    }
    public static _IBinOp create_In() {
      return new BinOp_In();
    }
    public static _IBinOp create_NotIn() {
      return new BinOp_NotIn();
    }
    public static _IBinOp create_SetDifference() {
      return new BinOp_SetDifference();
    }
    public static _IBinOp create_Concat() {
      return new BinOp_Concat();
    }
    public static _IBinOp create_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) {
      return new BinOp_Passthrough(_a0);
    }
    public bool is_Eq { get { return this is BinOp_Eq; } }
    public bool is_Neq { get { return this is BinOp_Neq; } }
    public bool is_Div { get { return this is BinOp_Div; } }
    public bool is_EuclidianDiv { get { return this is BinOp_EuclidianDiv; } }
    public bool is_Mod { get { return this is BinOp_Mod; } }
    public bool is_EuclidianMod { get { return this is BinOp_EuclidianMod; } }
    public bool is_Implies { get { return this is BinOp_Implies; } }
    public bool is_In { get { return this is BinOp_In; } }
    public bool is_NotIn { get { return this is BinOp_NotIn; } }
    public bool is_SetDifference { get { return this is BinOp_SetDifference; } }
    public bool is_Concat { get { return this is BinOp_Concat; } }
    public bool is_Passthrough { get { return this is BinOp_Passthrough; } }
    public bool dtor_referential {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._referential; }
        return ((BinOp_Neq)d)._referential;
      }
    }
    public bool dtor_nullable {
      get {
        var d = this;
        if (d is BinOp_Eq) { return ((BinOp_Eq)d)._nullable; }
        return ((BinOp_Neq)d)._nullable;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Passthrough_a0 {
      get {
        var d = this;
        return ((BinOp_Passthrough)d)._a0;
      }
    }
    public abstract _IBinOp DowncastClone();
  }
  public class BinOp_Eq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Eq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Eq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Eq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Eq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Neq : BinOp {
    public readonly bool _referential;
    public readonly bool _nullable;
    public BinOp_Neq(bool referential, bool nullable) : base() {
      this._referential = referential;
      this._nullable = nullable;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Neq(_referential, _nullable);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Neq;
      return oth != null && this._referential == oth._referential && this._nullable == oth._nullable;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._referential));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._nullable));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Neq";
      s += "(";
      s += Dafny.Helpers.ToString(this._referential);
      s += ", ";
      s += Dafny.Helpers.ToString(this._nullable);
      s += ")";
      return s;
    }
  }
  public class BinOp_Div : BinOp {
    public BinOp_Div() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Div();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Div;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Div";
      return s;
    }
  }
  public class BinOp_EuclidianDiv : BinOp {
    public BinOp_EuclidianDiv() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianDiv();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianDiv;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianDiv";
      return s;
    }
  }
  public class BinOp_Mod : BinOp {
    public BinOp_Mod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Mod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Mod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Mod";
      return s;
    }
  }
  public class BinOp_EuclidianMod : BinOp {
    public BinOp_EuclidianMod() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_EuclidianMod();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_EuclidianMod;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.EuclidianMod";
      return s;
    }
  }
  public class BinOp_Implies : BinOp {
    public BinOp_Implies() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Implies();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Implies;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Implies";
      return s;
    }
  }
  public class BinOp_In : BinOp {
    public BinOp_In() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_In();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_In;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.In";
      return s;
    }
  }
  public class BinOp_NotIn : BinOp {
    public BinOp_NotIn() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_NotIn();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_NotIn;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.NotIn";
      return s;
    }
  }
  public class BinOp_SetDifference : BinOp {
    public BinOp_SetDifference() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_SetDifference();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_SetDifference;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.SetDifference";
      return s;
    }
  }
  public class BinOp_Concat : BinOp {
    public BinOp_Concat() : base() {
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Concat();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Concat;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Concat";
      return s;
    }
  }
  public class BinOp_Passthrough : BinOp {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public BinOp_Passthrough(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IBinOp DowncastClone() {
      if (this is _IBinOp dt) { return dt; }
      return new BinOp_Passthrough(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.BinOp_Passthrough;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.BinOp.Passthrough";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IExpression {
    bool is_Literal { get; }
    bool is_Ident { get; }
    bool is_Companion { get; }
    bool is_Tuple { get; }
    bool is_New { get; }
    bool is_NewArray { get; }
    bool is_DatatypeValue { get; }
    bool is_Convert { get; }
    bool is_SeqConstruct { get; }
    bool is_SeqValue { get; }
    bool is_SetValue { get; }
    bool is_MapValue { get; }
    bool is_This { get; }
    bool is_Ite { get; }
    bool is_UnOp { get; }
    bool is_BinOp { get; }
    bool is_ArrayLen { get; }
    bool is_Select { get; }
    bool is_SelectFn { get; }
    bool is_Index { get; }
    bool is_IndexRange { get; }
    bool is_TupleSelect { get; }
    bool is_Call { get; }
    bool is_Lambda { get; }
    bool is_BetaRedex { get; }
    bool is_IIFE { get; }
    bool is_Apply { get; }
    bool is_TypeTest { get; }
    bool is_InitializationValue { get; }
    bool is_BoolBoundedPool { get; }
    bool is_SetBoundedPool { get; }
    bool is_SeqBoundedPool { get; }
    bool is_IntRange { get; }
    DAST._ILiteral dtor_Literal_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 { get; }
    Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path { get; }
    Dafny.ISequence<DAST._IType> dtor_typeArgs { get; }
    Dafny.ISequence<DAST._IExpression> dtor_args { get; }
    Dafny.ISequence<DAST._IExpression> dtor_dims { get; }
    DAST._IType dtor_typ { get; }
    Dafny.ISequence<Dafny.Rune> dtor_variant { get; }
    bool dtor_isCo { get; }
    Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents { get; }
    DAST._IExpression dtor_value { get; }
    DAST._IType dtor_from { get; }
    DAST._IExpression dtor_length { get; }
    DAST._IExpression dtor_elem { get; }
    Dafny.ISequence<DAST._IExpression> dtor_elements { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems { get; }
    DAST._IExpression dtor_cond { get; }
    DAST._IExpression dtor_thn { get; }
    DAST._IExpression dtor_els { get; }
    DAST._IUnaryOp dtor_unOp { get; }
    DAST._IExpression dtor_expr { get; }
    DAST._IBinOp dtor_op { get; }
    DAST._IExpression dtor_left { get; }
    DAST._IExpression dtor_right { get; }
    BigInteger dtor_dim { get; }
    Dafny.ISequence<Dafny.Rune> dtor_field { get; }
    bool dtor_isConstant { get; }
    bool dtor_onDatatype { get; }
    bool dtor_isStatic { get; }
    BigInteger dtor_arity { get; }
    DAST._ICollKind dtor_collKind { get; }
    Dafny.ISequence<DAST._IExpression> dtor_indices { get; }
    bool dtor_isArray { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_low { get; }
    Std.Wrappers._IOption<DAST._IExpression> dtor_high { get; }
    BigInteger dtor_index { get; }
    DAST._IExpression dtor_on { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<DAST._IFormal> dtor_params { get; }
    DAST._IType dtor_retType { get; }
    Dafny.ISequence<DAST._IStatement> dtor_body { get; }
    Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values { get; }
    DAST._IExpression dtor_iifeBody { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType { get; }
    DAST._IExpression dtor_of { get; }
    bool dtor_includeDuplicates { get; }
    DAST._IExpression dtor_lo { get; }
    DAST._IExpression dtor_hi { get; }
    _IExpression DowncastClone();
  }
  public abstract class Expression : _IExpression {
    public Expression() {
    }
    private static readonly DAST._IExpression theDefault = create_Literal(DAST.Literal.Default());
    public static DAST._IExpression Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IExpression> _TYPE = new Dafny.TypeDescriptor<DAST._IExpression>(DAST.Expression.Default());
    public static Dafny.TypeDescriptor<DAST._IExpression> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpression create_Literal(DAST._ILiteral _a0) {
      return new Expression_Literal(_a0);
    }
    public static _IExpression create_Ident(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Expression_Ident(_a0);
    }
    public static _IExpression create_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) {
      return new Expression_Companion(_a0);
    }
    public static _IExpression create_Tuple(Dafny.ISequence<DAST._IExpression> _a0) {
      return new Expression_Tuple(_a0);
    }
    public static _IExpression create_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_New(path, typeArgs, args);
    }
    public static _IExpression create_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) {
      return new Expression_NewArray(dims, typ);
    }
    public static _IExpression create_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) {
      return new Expression_DatatypeValue(path, typeArgs, variant, isCo, contents);
    }
    public static _IExpression create_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) {
      return new Expression_Convert(@value, @from, typ);
    }
    public static _IExpression create_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) {
      return new Expression_SeqConstruct(length, elem);
    }
    public static _IExpression create_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) {
      return new Expression_SeqValue(elements, typ);
    }
    public static _IExpression create_SetValue(Dafny.ISequence<DAST._IExpression> elements) {
      return new Expression_SetValue(elements);
    }
    public static _IExpression create_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) {
      return new Expression_MapValue(mapElems);
    }
    public static _IExpression create_This() {
      return new Expression_This();
    }
    public static _IExpression create_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) {
      return new Expression_Ite(cond, thn, els);
    }
    public static _IExpression create_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) {
      return new Expression_UnOp(unOp, expr);
    }
    public static _IExpression create_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) {
      return new Expression_BinOp(op, left, right);
    }
    public static _IExpression create_ArrayLen(DAST._IExpression expr, BigInteger dim) {
      return new Expression_ArrayLen(expr, dim);
    }
    public static _IExpression create_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) {
      return new Expression_Select(expr, field, isConstant, onDatatype);
    }
    public static _IExpression create_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) {
      return new Expression_SelectFn(expr, field, onDatatype, isStatic, arity);
    }
    public static _IExpression create_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) {
      return new Expression_Index(expr, collKind, indices);
    }
    public static _IExpression create_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) {
      return new Expression_IndexRange(expr, isArray, low, high);
    }
    public static _IExpression create_TupleSelect(DAST._IExpression expr, BigInteger index) {
      return new Expression_TupleSelect(expr, index);
    }
    public static _IExpression create_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Call(@on, name, typeArgs, args);
    }
    public static _IExpression create_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) {
      return new Expression_Lambda(@params, retType, body);
    }
    public static _IExpression create_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) {
      return new Expression_BetaRedex(values, retType, expr);
    }
    public static _IExpression create_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) {
      return new Expression_IIFE(name, typ, @value, iifeBody);
    }
    public static _IExpression create_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) {
      return new Expression_Apply(expr, args);
    }
    public static _IExpression create_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) {
      return new Expression_TypeTest(@on, dType, variant);
    }
    public static _IExpression create_InitializationValue(DAST._IType typ) {
      return new Expression_InitializationValue(typ);
    }
    public static _IExpression create_BoolBoundedPool() {
      return new Expression_BoolBoundedPool();
    }
    public static _IExpression create_SetBoundedPool(DAST._IExpression of) {
      return new Expression_SetBoundedPool(of);
    }
    public static _IExpression create_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) {
      return new Expression_SeqBoundedPool(of, includeDuplicates);
    }
    public static _IExpression create_IntRange(DAST._IExpression lo, DAST._IExpression hi) {
      return new Expression_IntRange(lo, hi);
    }
    public bool is_Literal { get { return this is Expression_Literal; } }
    public bool is_Ident { get { return this is Expression_Ident; } }
    public bool is_Companion { get { return this is Expression_Companion; } }
    public bool is_Tuple { get { return this is Expression_Tuple; } }
    public bool is_New { get { return this is Expression_New; } }
    public bool is_NewArray { get { return this is Expression_NewArray; } }
    public bool is_DatatypeValue { get { return this is Expression_DatatypeValue; } }
    public bool is_Convert { get { return this is Expression_Convert; } }
    public bool is_SeqConstruct { get { return this is Expression_SeqConstruct; } }
    public bool is_SeqValue { get { return this is Expression_SeqValue; } }
    public bool is_SetValue { get { return this is Expression_SetValue; } }
    public bool is_MapValue { get { return this is Expression_MapValue; } }
    public bool is_This { get { return this is Expression_This; } }
    public bool is_Ite { get { return this is Expression_Ite; } }
    public bool is_UnOp { get { return this is Expression_UnOp; } }
    public bool is_BinOp { get { return this is Expression_BinOp; } }
    public bool is_ArrayLen { get { return this is Expression_ArrayLen; } }
    public bool is_Select { get { return this is Expression_Select; } }
    public bool is_SelectFn { get { return this is Expression_SelectFn; } }
    public bool is_Index { get { return this is Expression_Index; } }
    public bool is_IndexRange { get { return this is Expression_IndexRange; } }
    public bool is_TupleSelect { get { return this is Expression_TupleSelect; } }
    public bool is_Call { get { return this is Expression_Call; } }
    public bool is_Lambda { get { return this is Expression_Lambda; } }
    public bool is_BetaRedex { get { return this is Expression_BetaRedex; } }
    public bool is_IIFE { get { return this is Expression_IIFE; } }
    public bool is_Apply { get { return this is Expression_Apply; } }
    public bool is_TypeTest { get { return this is Expression_TypeTest; } }
    public bool is_InitializationValue { get { return this is Expression_InitializationValue; } }
    public bool is_BoolBoundedPool { get { return this is Expression_BoolBoundedPool; } }
    public bool is_SetBoundedPool { get { return this is Expression_SetBoundedPool; } }
    public bool is_SeqBoundedPool { get { return this is Expression_SeqBoundedPool; } }
    public bool is_IntRange { get { return this is Expression_IntRange; } }
    public DAST._ILiteral dtor_Literal_a0 {
      get {
        var d = this;
        return ((Expression_Literal)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_Ident_a0 {
      get {
        var d = this;
        return ((Expression_Ident)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_Companion_a0 {
      get {
        var d = this;
        return ((Expression_Companion)d)._a0;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_Tuple_a0 {
      get {
        var d = this;
        return ((Expression_Tuple)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_path {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._path; }
        return ((Expression_DatatypeValue)d)._path;
      }
    }
    public Dafny.ISequence<DAST._IType> dtor_typeArgs {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._typeArgs; }
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._typeArgs; }
        return ((Expression_Call)d)._typeArgs;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_args {
      get {
        var d = this;
        if (d is Expression_New) { return ((Expression_New)d)._args; }
        if (d is Expression_Call) { return ((Expression_Call)d)._args; }
        return ((Expression_Apply)d)._args;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_dims {
      get {
        var d = this;
        return ((Expression_NewArray)d)._dims;
      }
    }
    public DAST._IType dtor_typ {
      get {
        var d = this;
        if (d is Expression_NewArray) { return ((Expression_NewArray)d)._typ; }
        if (d is Expression_Convert) { return ((Expression_Convert)d)._typ; }
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._typ; }
        if (d is Expression_IIFE) { return ((Expression_IIFE)d)._typ; }
        return ((Expression_InitializationValue)d)._typ;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_variant {
      get {
        var d = this;
        if (d is Expression_DatatypeValue) { return ((Expression_DatatypeValue)d)._variant; }
        return ((Expression_TypeTest)d)._variant;
      }
    }
    public bool dtor_isCo {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._isCo;
      }
    }
    public Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> dtor_contents {
      get {
        var d = this;
        return ((Expression_DatatypeValue)d)._contents;
      }
    }
    public DAST._IExpression dtor_value {
      get {
        var d = this;
        if (d is Expression_Convert) { return ((Expression_Convert)d)._value; }
        return ((Expression_IIFE)d)._value;
      }
    }
    public DAST._IType dtor_from {
      get {
        var d = this;
        return ((Expression_Convert)d)._from;
      }
    }
    public DAST._IExpression dtor_length {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._length;
      }
    }
    public DAST._IExpression dtor_elem {
      get {
        var d = this;
        return ((Expression_SeqConstruct)d)._elem;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_elements {
      get {
        var d = this;
        if (d is Expression_SeqValue) { return ((Expression_SeqValue)d)._elements; }
        return ((Expression_SetValue)d)._elements;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> dtor_mapElems {
      get {
        var d = this;
        return ((Expression_MapValue)d)._mapElems;
      }
    }
    public DAST._IExpression dtor_cond {
      get {
        var d = this;
        return ((Expression_Ite)d)._cond;
      }
    }
    public DAST._IExpression dtor_thn {
      get {
        var d = this;
        return ((Expression_Ite)d)._thn;
      }
    }
    public DAST._IExpression dtor_els {
      get {
        var d = this;
        return ((Expression_Ite)d)._els;
      }
    }
    public DAST._IUnaryOp dtor_unOp {
      get {
        var d = this;
        return ((Expression_UnOp)d)._unOp;
      }
    }
    public DAST._IExpression dtor_expr {
      get {
        var d = this;
        if (d is Expression_UnOp) { return ((Expression_UnOp)d)._expr; }
        if (d is Expression_ArrayLen) { return ((Expression_ArrayLen)d)._expr; }
        if (d is Expression_Select) { return ((Expression_Select)d)._expr; }
        if (d is Expression_SelectFn) { return ((Expression_SelectFn)d)._expr; }
        if (d is Expression_Index) { return ((Expression_Index)d)._expr; }
        if (d is Expression_IndexRange) { return ((Expression_IndexRange)d)._expr; }
        if (d is Expression_TupleSelect) { return ((Expression_TupleSelect)d)._expr; }
        if (d is Expression_BetaRedex) { return ((Expression_BetaRedex)d)._expr; }
        return ((Expression_Apply)d)._expr;
      }
    }
    public DAST._IBinOp dtor_op {
      get {
        var d = this;
        return ((Expression_BinOp)d)._op;
      }
    }
    public DAST._IExpression dtor_left {
      get {
        var d = this;
        return ((Expression_BinOp)d)._left;
      }
    }
    public DAST._IExpression dtor_right {
      get {
        var d = this;
        return ((Expression_BinOp)d)._right;
      }
    }
    public BigInteger dtor_dim {
      get {
        var d = this;
        return ((Expression_ArrayLen)d)._dim;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_field {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._field; }
        return ((Expression_SelectFn)d)._field;
      }
    }
    public bool dtor_isConstant {
      get {
        var d = this;
        return ((Expression_Select)d)._isConstant;
      }
    }
    public bool dtor_onDatatype {
      get {
        var d = this;
        if (d is Expression_Select) { return ((Expression_Select)d)._onDatatype; }
        return ((Expression_SelectFn)d)._onDatatype;
      }
    }
    public bool dtor_isStatic {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._isStatic;
      }
    }
    public BigInteger dtor_arity {
      get {
        var d = this;
        return ((Expression_SelectFn)d)._arity;
      }
    }
    public DAST._ICollKind dtor_collKind {
      get {
        var d = this;
        return ((Expression_Index)d)._collKind;
      }
    }
    public Dafny.ISequence<DAST._IExpression> dtor_indices {
      get {
        var d = this;
        return ((Expression_Index)d)._indices;
      }
    }
    public bool dtor_isArray {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._isArray;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_low {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._low;
      }
    }
    public Std.Wrappers._IOption<DAST._IExpression> dtor_high {
      get {
        var d = this;
        return ((Expression_IndexRange)d)._high;
      }
    }
    public BigInteger dtor_index {
      get {
        var d = this;
        return ((Expression_TupleSelect)d)._index;
      }
    }
    public DAST._IExpression dtor_on {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._on; }
        return ((Expression_TypeTest)d)._on;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Expression_Call) { return ((Expression_Call)d)._name; }
        return ((Expression_IIFE)d)._name;
      }
    }
    public Dafny.ISequence<DAST._IFormal> dtor_params {
      get {
        var d = this;
        return ((Expression_Lambda)d)._params;
      }
    }
    public DAST._IType dtor_retType {
      get {
        var d = this;
        if (d is Expression_Lambda) { return ((Expression_Lambda)d)._retType; }
        return ((Expression_BetaRedex)d)._retType;
      }
    }
    public Dafny.ISequence<DAST._IStatement> dtor_body {
      get {
        var d = this;
        return ((Expression_Lambda)d)._body;
      }
    }
    public Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> dtor_values {
      get {
        var d = this;
        return ((Expression_BetaRedex)d)._values;
      }
    }
    public DAST._IExpression dtor_iifeBody {
      get {
        var d = this;
        return ((Expression_IIFE)d)._iifeBody;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_dType {
      get {
        var d = this;
        return ((Expression_TypeTest)d)._dType;
      }
    }
    public DAST._IExpression dtor_of {
      get {
        var d = this;
        if (d is Expression_SetBoundedPool) { return ((Expression_SetBoundedPool)d)._of; }
        return ((Expression_SeqBoundedPool)d)._of;
      }
    }
    public bool dtor_includeDuplicates {
      get {
        var d = this;
        return ((Expression_SeqBoundedPool)d)._includeDuplicates;
      }
    }
    public DAST._IExpression dtor_lo {
      get {
        var d = this;
        return ((Expression_IntRange)d)._lo;
      }
    }
    public DAST._IExpression dtor_hi {
      get {
        var d = this;
        return ((Expression_IntRange)d)._hi;
      }
    }
    public abstract _IExpression DowncastClone();
  }
  public class Expression_Literal : Expression {
    public readonly DAST._ILiteral _a0;
    public Expression_Literal(DAST._ILiteral _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Literal(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Literal;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Literal";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Ident : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Expression_Ident(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ident(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ident;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ident";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_Companion : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0;
    public Expression_Companion(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Companion(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Companion;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Companion";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_Tuple : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _a0;
    public Expression_Tuple(Dafny.ISequence<DAST._IExpression> _a0) : base() {
      this._a0 = _a0;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Tuple(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Tuple;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Tuple";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Expression_New : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_New(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_New(_path, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_New;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.New";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_NewArray : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _dims;
    public readonly DAST._IType _typ;
    public Expression_NewArray(Dafny.ISequence<DAST._IExpression> dims, DAST._IType typ) : base() {
      this._dims = dims;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_NewArray(_dims, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_NewArray;
      return oth != null && object.Equals(this._dims, oth._dims) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dims));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.NewArray";
      s += "(";
      s += Dafny.Helpers.ToString(this._dims);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_DatatypeValue : Expression {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _path;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public readonly bool _isCo;
    public readonly Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _contents;
    public Expression_DatatypeValue(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<Dafny.Rune> variant, bool isCo, Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> contents) : base() {
      this._path = path;
      this._typeArgs = typeArgs;
      this._variant = variant;
      this._isCo = isCo;
      this._contents = contents;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_DatatypeValue(_path, _typeArgs, _variant, _isCo, _contents);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_DatatypeValue;
      return oth != null && object.Equals(this._path, oth._path) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._variant, oth._variant) && this._isCo == oth._isCo && object.Equals(this._contents, oth._contents);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 6;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._path));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isCo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._contents));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.DatatypeValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._path);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isCo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._contents);
      s += ")";
      return s;
    }
  }
  public class Expression_Convert : Expression {
    public readonly DAST._IExpression _value;
    public readonly DAST._IType _from;
    public readonly DAST._IType _typ;
    public Expression_Convert(DAST._IExpression @value, DAST._IType @from, DAST._IType typ) : base() {
      this._value = @value;
      this._from = @from;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Convert(_value, _from, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Convert;
      return oth != null && object.Equals(this._value, oth._value) && object.Equals(this._from, oth._from) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 7;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._from));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Convert";
      s += "(";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._from);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqConstruct : Expression {
    public readonly DAST._IExpression _length;
    public readonly DAST._IExpression _elem;
    public Expression_SeqConstruct(DAST._IExpression length, DAST._IExpression elem) : base() {
      this._length = length;
      this._elem = elem;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqConstruct(_length, _elem);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqConstruct;
      return oth != null && object.Equals(this._length, oth._length) && object.Equals(this._elem, oth._elem);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 8;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._length));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elem));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqConstruct";
      s += "(";
      s += Dafny.Helpers.ToString(this._length);
      s += ", ";
      s += Dafny.Helpers.ToString(this._elem);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public readonly DAST._IType _typ;
    public Expression_SeqValue(Dafny.ISequence<DAST._IExpression> elements, DAST._IType typ) : base() {
      this._elements = elements;
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqValue(_elements, _typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqValue;
      return oth != null && object.Equals(this._elements, oth._elements) && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 9;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_SetValue : Expression {
    public readonly Dafny.ISequence<DAST._IExpression> _elements;
    public Expression_SetValue(Dafny.ISequence<DAST._IExpression> elements) : base() {
      this._elements = elements;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetValue(_elements);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetValue;
      return oth != null && object.Equals(this._elements, oth._elements);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 10;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._elements));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._elements);
      s += ")";
      return s;
    }
  }
  public class Expression_MapValue : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _mapElems;
    public Expression_MapValue(Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> mapElems) : base() {
      this._mapElems = mapElems;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_MapValue(_mapElems);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_MapValue;
      return oth != null && object.Equals(this._mapElems, oth._mapElems);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 11;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mapElems));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.MapValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._mapElems);
      s += ")";
      return s;
    }
  }
  public class Expression_This : Expression {
    public Expression_This() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_This();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_This;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 12;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.This";
      return s;
    }
  }
  public class Expression_Ite : Expression {
    public readonly DAST._IExpression _cond;
    public readonly DAST._IExpression _thn;
    public readonly DAST._IExpression _els;
    public Expression_Ite(DAST._IExpression cond, DAST._IExpression thn, DAST._IExpression els) : base() {
      this._cond = cond;
      this._thn = thn;
      this._els = els;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Ite(_cond, _thn, _els);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Ite;
      return oth != null && object.Equals(this._cond, oth._cond) && object.Equals(this._thn, oth._thn) && object.Equals(this._els, oth._els);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 13;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cond));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._thn));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._els));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Ite";
      s += "(";
      s += Dafny.Helpers.ToString(this._cond);
      s += ", ";
      s += Dafny.Helpers.ToString(this._thn);
      s += ", ";
      s += Dafny.Helpers.ToString(this._els);
      s += ")";
      return s;
    }
  }
  public class Expression_UnOp : Expression {
    public readonly DAST._IUnaryOp _unOp;
    public readonly DAST._IExpression _expr;
    public Expression_UnOp(DAST._IUnaryOp unOp, DAST._IExpression expr) : base() {
      this._unOp = unOp;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_UnOp(_unOp, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_UnOp;
      return oth != null && object.Equals(this._unOp, oth._unOp) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 14;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._unOp));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.UnOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._unOp);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_BinOp : Expression {
    public readonly DAST._IBinOp _op;
    public readonly DAST._IExpression _left;
    public readonly DAST._IExpression _right;
    public Expression_BinOp(DAST._IBinOp op, DAST._IExpression left, DAST._IExpression right) : base() {
      this._op = op;
      this._left = left;
      this._right = right;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BinOp(_op, _left, _right);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BinOp;
      return oth != null && object.Equals(this._op, oth._op) && object.Equals(this._left, oth._left) && object.Equals(this._right, oth._right);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 15;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._op));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._left));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._right));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BinOp";
      s += "(";
      s += Dafny.Helpers.ToString(this._op);
      s += ", ";
      s += Dafny.Helpers.ToString(this._left);
      s += ", ";
      s += Dafny.Helpers.ToString(this._right);
      s += ")";
      return s;
    }
  }
  public class Expression_ArrayLen : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _dim;
    public Expression_ArrayLen(DAST._IExpression expr, BigInteger dim) : base() {
      this._expr = expr;
      this._dim = dim;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_ArrayLen(_expr, _dim);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_ArrayLen;
      return oth != null && object.Equals(this._expr, oth._expr) && this._dim == oth._dim;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 16;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dim));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.ArrayLen";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dim);
      s += ")";
      return s;
    }
  }
  public class Expression_Select : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _isConstant;
    public readonly bool _onDatatype;
    public Expression_Select(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool isConstant, bool onDatatype) : base() {
      this._expr = expr;
      this._field = field;
      this._isConstant = isConstant;
      this._onDatatype = onDatatype;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Select(_expr, _field, _isConstant, _onDatatype);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Select;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._isConstant == oth._isConstant && this._onDatatype == oth._onDatatype;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 17;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isConstant));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Select";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isConstant);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ")";
      return s;
    }
  }
  public class Expression_SelectFn : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<Dafny.Rune> _field;
    public readonly bool _onDatatype;
    public readonly bool _isStatic;
    public readonly BigInteger _arity;
    public Expression_SelectFn(DAST._IExpression expr, Dafny.ISequence<Dafny.Rune> field, bool onDatatype, bool isStatic, BigInteger arity) : base() {
      this._expr = expr;
      this._field = field;
      this._onDatatype = onDatatype;
      this._isStatic = isStatic;
      this._arity = arity;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SelectFn(_expr, _field, _onDatatype, _isStatic, _arity);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SelectFn;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._field, oth._field) && this._onDatatype == oth._onDatatype && this._isStatic == oth._isStatic && this._arity == oth._arity;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 18;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._field));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._onDatatype));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isStatic));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._arity));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SelectFn";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += this._field.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._onDatatype);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isStatic);
      s += ", ";
      s += Dafny.Helpers.ToString(this._arity);
      s += ")";
      return s;
    }
  }
  public class Expression_Index : Expression {
    public readonly DAST._IExpression _expr;
    public readonly DAST._ICollKind _collKind;
    public readonly Dafny.ISequence<DAST._IExpression> _indices;
    public Expression_Index(DAST._IExpression expr, DAST._ICollKind collKind, Dafny.ISequence<DAST._IExpression> indices) : base() {
      this._expr = expr;
      this._collKind = collKind;
      this._indices = indices;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Index(_expr, _collKind, _indices);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Index;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._collKind, oth._collKind) && object.Equals(this._indices, oth._indices);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 19;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._collKind));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._indices));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Index";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._collKind);
      s += ", ";
      s += Dafny.Helpers.ToString(this._indices);
      s += ")";
      return s;
    }
  }
  public class Expression_IndexRange : Expression {
    public readonly DAST._IExpression _expr;
    public readonly bool _isArray;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _low;
    public readonly Std.Wrappers._IOption<DAST._IExpression> _high;
    public Expression_IndexRange(DAST._IExpression expr, bool isArray, Std.Wrappers._IOption<DAST._IExpression> low, Std.Wrappers._IOption<DAST._IExpression> high) : base() {
      this._expr = expr;
      this._isArray = isArray;
      this._low = low;
      this._high = high;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IndexRange(_expr, _isArray, _low, _high);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IndexRange;
      return oth != null && object.Equals(this._expr, oth._expr) && this._isArray == oth._isArray && object.Equals(this._low, oth._low) && object.Equals(this._high, oth._high);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 20;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._isArray));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._low));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._high));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IndexRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._isArray);
      s += ", ";
      s += Dafny.Helpers.ToString(this._low);
      s += ", ";
      s += Dafny.Helpers.ToString(this._high);
      s += ")";
      return s;
    }
  }
  public class Expression_TupleSelect : Expression {
    public readonly DAST._IExpression _expr;
    public readonly BigInteger _index;
    public Expression_TupleSelect(DAST._IExpression expr, BigInteger index) : base() {
      this._expr = expr;
      this._index = index;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TupleSelect(_expr, _index);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TupleSelect;
      return oth != null && object.Equals(this._expr, oth._expr) && this._index == oth._index;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 21;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._index));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TupleSelect";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._index);
      s += ")";
      return s;
    }
  }
  public class Expression_Call : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<DAST._IType> _typeArgs;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Call(DAST._IExpression @on, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<DAST._IType> typeArgs, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._on = @on;
      this._name = name;
      this._typeArgs = typeArgs;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Call(_on, _name, _typeArgs, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Call;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._name, oth._name) && object.Equals(this._typeArgs, oth._typeArgs) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 22;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeArgs));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Call";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeArgs);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_Lambda : Expression {
    public readonly Dafny.ISequence<DAST._IFormal> _params;
    public readonly DAST._IType _retType;
    public readonly Dafny.ISequence<DAST._IStatement> _body;
    public Expression_Lambda(Dafny.ISequence<DAST._IFormal> @params, DAST._IType retType, Dafny.ISequence<DAST._IStatement> body) : base() {
      this._params = @params;
      this._retType = retType;
      this._body = body;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Lambda(_params, _retType, _body);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Lambda;
      return oth != null && object.Equals(this._params, oth._params) && object.Equals(this._retType, oth._retType) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 23;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._params));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Lambda";
      s += "(";
      s += Dafny.Helpers.ToString(this._params);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Expression_BetaRedex : Expression {
    public readonly Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _values;
    public readonly DAST._IType _retType;
    public readonly DAST._IExpression _expr;
    public Expression_BetaRedex(Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> values, DAST._IType retType, DAST._IExpression expr) : base() {
      this._values = values;
      this._retType = retType;
      this._expr = expr;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BetaRedex(_values, _retType, _expr);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BetaRedex;
      return oth != null && object.Equals(this._values, oth._values) && object.Equals(this._retType, oth._retType) && object.Equals(this._expr, oth._expr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 24;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._values));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._retType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BetaRedex";
      s += "(";
      s += Dafny.Helpers.ToString(this._values);
      s += ", ";
      s += Dafny.Helpers.ToString(this._retType);
      s += ", ";
      s += Dafny.Helpers.ToString(this._expr);
      s += ")";
      return s;
    }
  }
  public class Expression_IIFE : Expression {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly DAST._IType _typ;
    public readonly DAST._IExpression _value;
    public readonly DAST._IExpression _iifeBody;
    public Expression_IIFE(Dafny.ISequence<Dafny.Rune> name, DAST._IType typ, DAST._IExpression @value, DAST._IExpression iifeBody) : base() {
      this._name = name;
      this._typ = typ;
      this._value = @value;
      this._iifeBody = iifeBody;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IIFE(_name, _typ, _value, _iifeBody);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IIFE;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typ, oth._typ) && object.Equals(this._value, oth._value) && object.Equals(this._iifeBody, oth._iifeBody);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 25;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._value));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._iifeBody));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IIFE";
      s += "(";
      s += Dafny.Helpers.ToString(this._name);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typ);
      s += ", ";
      s += Dafny.Helpers.ToString(this._value);
      s += ", ";
      s += Dafny.Helpers.ToString(this._iifeBody);
      s += ")";
      return s;
    }
  }
  public class Expression_Apply : Expression {
    public readonly DAST._IExpression _expr;
    public readonly Dafny.ISequence<DAST._IExpression> _args;
    public Expression_Apply(DAST._IExpression expr, Dafny.ISequence<DAST._IExpression> args) : base() {
      this._expr = expr;
      this._args = args;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_Apply(_expr, _args);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_Apply;
      return oth != null && object.Equals(this._expr, oth._expr) && object.Equals(this._args, oth._args);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 26;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._expr));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._args));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.Apply";
      s += "(";
      s += Dafny.Helpers.ToString(this._expr);
      s += ", ";
      s += Dafny.Helpers.ToString(this._args);
      s += ")";
      return s;
    }
  }
  public class Expression_TypeTest : Expression {
    public readonly DAST._IExpression _on;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _dType;
    public readonly Dafny.ISequence<Dafny.Rune> _variant;
    public Expression_TypeTest(DAST._IExpression @on, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dType, Dafny.ISequence<Dafny.Rune> variant) : base() {
      this._on = @on;
      this._dType = dType;
      this._variant = variant;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_TypeTest(_on, _dType, _variant);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_TypeTest;
      return oth != null && object.Equals(this._on, oth._on) && object.Equals(this._dType, oth._dType) && object.Equals(this._variant, oth._variant);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 27;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._on));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._dType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variant));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.TypeTest";
      s += "(";
      s += Dafny.Helpers.ToString(this._on);
      s += ", ";
      s += Dafny.Helpers.ToString(this._dType);
      s += ", ";
      s += this._variant.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expression_InitializationValue : Expression {
    public readonly DAST._IType _typ;
    public Expression_InitializationValue(DAST._IType typ) : base() {
      this._typ = typ;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_InitializationValue(_typ);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_InitializationValue;
      return oth != null && object.Equals(this._typ, oth._typ);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 28;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typ));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.InitializationValue";
      s += "(";
      s += Dafny.Helpers.ToString(this._typ);
      s += ")";
      return s;
    }
  }
  public class Expression_BoolBoundedPool : Expression {
    public Expression_BoolBoundedPool() : base() {
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_BoolBoundedPool();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_BoolBoundedPool;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 29;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.BoolBoundedPool";
      return s;
    }
  }
  public class Expression_SetBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public Expression_SetBoundedPool(DAST._IExpression of) : base() {
      this._of = of;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SetBoundedPool(_of);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SetBoundedPool;
      return oth != null && object.Equals(this._of, oth._of);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 30;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SetBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ")";
      return s;
    }
  }
  public class Expression_SeqBoundedPool : Expression {
    public readonly DAST._IExpression _of;
    public readonly bool _includeDuplicates;
    public Expression_SeqBoundedPool(DAST._IExpression of, bool includeDuplicates) : base() {
      this._of = of;
      this._includeDuplicates = includeDuplicates;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_SeqBoundedPool(_of, _includeDuplicates);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_SeqBoundedPool;
      return oth != null && object.Equals(this._of, oth._of) && this._includeDuplicates == oth._includeDuplicates;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 31;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._of));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._includeDuplicates));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.SeqBoundedPool";
      s += "(";
      s += Dafny.Helpers.ToString(this._of);
      s += ", ";
      s += Dafny.Helpers.ToString(this._includeDuplicates);
      s += ")";
      return s;
    }
  }
  public class Expression_IntRange : Expression {
    public readonly DAST._IExpression _lo;
    public readonly DAST._IExpression _hi;
    public Expression_IntRange(DAST._IExpression lo, DAST._IExpression hi) : base() {
      this._lo = lo;
      this._hi = hi;
    }
    public override _IExpression DowncastClone() {
      if (this is _IExpression dt) { return dt; }
      return new Expression_IntRange(_lo, _hi);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Expression_IntRange;
      return oth != null && object.Equals(this._lo, oth._lo) && object.Equals(this._hi, oth._hi);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 32;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._lo));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._hi));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Expression.IntRange";
      s += "(";
      s += Dafny.Helpers.ToString(this._lo);
      s += ", ";
      s += Dafny.Helpers.ToString(this._hi);
      s += ")";
      return s;
    }
  }

  public interface _IUnaryOp {
    bool is_Not { get; }
    bool is_BitwiseNot { get; }
    bool is_Cardinality { get; }
    _IUnaryOp DowncastClone();
  }
  public abstract class UnaryOp : _IUnaryOp {
    public UnaryOp() {
    }
    private static readonly DAST._IUnaryOp theDefault = create_Not();
    public static DAST._IUnaryOp Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._IUnaryOp> _TYPE = new Dafny.TypeDescriptor<DAST._IUnaryOp>(DAST.UnaryOp.Default());
    public static Dafny.TypeDescriptor<DAST._IUnaryOp> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IUnaryOp create_Not() {
      return new UnaryOp_Not();
    }
    public static _IUnaryOp create_BitwiseNot() {
      return new UnaryOp_BitwiseNot();
    }
    public static _IUnaryOp create_Cardinality() {
      return new UnaryOp_Cardinality();
    }
    public bool is_Not { get { return this is UnaryOp_Not; } }
    public bool is_BitwiseNot { get { return this is UnaryOp_BitwiseNot; } }
    public bool is_Cardinality { get { return this is UnaryOp_Cardinality; } }
    public static System.Collections.Generic.IEnumerable<_IUnaryOp> AllSingletonConstructors {
      get {
        yield return UnaryOp.create_Not();
        yield return UnaryOp.create_BitwiseNot();
        yield return UnaryOp.create_Cardinality();
      }
    }
    public abstract _IUnaryOp DowncastClone();
  }
  public class UnaryOp_Not : UnaryOp {
    public UnaryOp_Not() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Not();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Not;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Not";
      return s;
    }
  }
  public class UnaryOp_BitwiseNot : UnaryOp {
    public UnaryOp_BitwiseNot() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_BitwiseNot();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_BitwiseNot;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.BitwiseNot";
      return s;
    }
  }
  public class UnaryOp_Cardinality : UnaryOp {
    public UnaryOp_Cardinality() : base() {
    }
    public override _IUnaryOp DowncastClone() {
      if (this is _IUnaryOp dt) { return dt; }
      return new UnaryOp_Cardinality();
    }
    public override bool Equals(object other) {
      var oth = other as DAST.UnaryOp_Cardinality;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.UnaryOp.Cardinality";
      return s;
    }
  }

  public interface _ILiteral {
    bool is_BoolLiteral { get; }
    bool is_IntLiteral { get; }
    bool is_DecLiteral { get; }
    bool is_StringLiteral { get; }
    bool is_CharLiteral { get; }
    bool is_Null { get; }
    bool dtor_BoolLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 { get; }
    DAST._IType dtor_IntLiteral_a1 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 { get; }
    DAST._IType dtor_DecLiteral_a2 { get; }
    Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 { get; }
    Dafny.Rune dtor_CharLiteral_a0 { get; }
    DAST._IType dtor_Null_a0 { get; }
    _ILiteral DowncastClone();
  }
  public abstract class Literal : _ILiteral {
    public Literal() {
    }
    private static readonly DAST._ILiteral theDefault = create_BoolLiteral(false);
    public static DAST._ILiteral Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<DAST._ILiteral> _TYPE = new Dafny.TypeDescriptor<DAST._ILiteral>(DAST.Literal.Default());
    public static Dafny.TypeDescriptor<DAST._ILiteral> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ILiteral create_BoolLiteral(bool _a0) {
      return new Literal_BoolLiteral(_a0);
    }
    public static _ILiteral create_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) {
      return new Literal_IntLiteral(_a0, _a1);
    }
    public static _ILiteral create_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) {
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public static _ILiteral create_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) {
      return new Literal_StringLiteral(_a0);
    }
    public static _ILiteral create_CharLiteral(Dafny.Rune _a0) {
      return new Literal_CharLiteral(_a0);
    }
    public static _ILiteral create_Null(DAST._IType _a0) {
      return new Literal_Null(_a0);
    }
    public bool is_BoolLiteral { get { return this is Literal_BoolLiteral; } }
    public bool is_IntLiteral { get { return this is Literal_IntLiteral; } }
    public bool is_DecLiteral { get { return this is Literal_DecLiteral; } }
    public bool is_StringLiteral { get { return this is Literal_StringLiteral; } }
    public bool is_CharLiteral { get { return this is Literal_CharLiteral; } }
    public bool is_Null { get { return this is Literal_Null; } }
    public bool dtor_BoolLiteral_a0 {
      get {
        var d = this;
        return ((Literal_BoolLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_IntLiteral_a0 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_IntLiteral_a1 {
      get {
        var d = this;
        return ((Literal_IntLiteral)d)._a1;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a0 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a0;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_DecLiteral_a1 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a1;
      }
    }
    public DAST._IType dtor_DecLiteral_a2 {
      get {
        var d = this;
        return ((Literal_DecLiteral)d)._a2;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_StringLiteral_a0 {
      get {
        var d = this;
        return ((Literal_StringLiteral)d)._a0;
      }
    }
    public Dafny.Rune dtor_CharLiteral_a0 {
      get {
        var d = this;
        return ((Literal_CharLiteral)d)._a0;
      }
    }
    public DAST._IType dtor_Null_a0 {
      get {
        var d = this;
        return ((Literal_Null)d)._a0;
      }
    }
    public abstract _ILiteral DowncastClone();
  }
  public class Literal_BoolLiteral : Literal {
    public readonly bool _a0;
    public Literal_BoolLiteral(bool _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_BoolLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_BoolLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.BoolLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_IntLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly DAST._IType _a1;
    public Literal_IntLiteral(Dafny.ISequence<Dafny.Rune> _a0, DAST._IType _a1) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_IntLiteral(_a0, _a1);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_IntLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.IntLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a1);
      s += ")";
      return s;
    }
  }
  public class Literal_DecLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public readonly Dafny.ISequence<Dafny.Rune> _a1;
    public readonly DAST._IType _a2;
    public Literal_DecLiteral(Dafny.ISequence<Dafny.Rune> _a0, Dafny.ISequence<Dafny.Rune> _a1, DAST._IType _a2) : base() {
      this._a0 = _a0;
      this._a1 = _a1;
      this._a2 = _a2;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_DecLiteral(_a0, _a1, _a2);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_DecLiteral;
      return oth != null && object.Equals(this._a0, oth._a0) && object.Equals(this._a1, oth._a1) && object.Equals(this._a2, oth._a2);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a1));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a2));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.DecLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ", ";
      s += this._a1.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._a2);
      s += ")";
      return s;
    }
  }
  public class Literal_StringLiteral : Literal {
    public readonly Dafny.ISequence<Dafny.Rune> _a0;
    public Literal_StringLiteral(Dafny.ISequence<Dafny.Rune> _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_StringLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_StringLiteral;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.StringLiteral";
      s += "(";
      s += this._a0.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Literal_CharLiteral : Literal {
    public readonly Dafny.Rune _a0;
    public Literal_CharLiteral(Dafny.Rune _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_CharLiteral(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_CharLiteral;
      return oth != null && this._a0 == oth._a0;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.CharLiteral";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
  public class Literal_Null : Literal {
    public readonly DAST._IType _a0;
    public Literal_Null(DAST._IType _a0) : base() {
      this._a0 = _a0;
    }
    public override _ILiteral DowncastClone() {
      if (this is _ILiteral dt) { return dt; }
      return new Literal_Null(_a0);
    }
    public override bool Equals(object other) {
      var oth = other as DAST.Literal_Null;
      return oth != null && object.Equals(this._a0, oth._a0);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._a0));
      return (int)hash;
    }
    public override string ToString() {
      string s = "DAST.Literal.Null";
      s += "(";
      s += Dafny.Helpers.ToString(this._a0);
      s += ")";
      return s;
    }
  }
} // end of namespace DAST

namespace D2DPrettyPrinter {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> PrettyPrint(Dafny.ISequence<DAST._IModule> d) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Microsoft.Dafny.Compilers.WrapException.Throw();
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Not Implemented Yet");
      return s;
    }
  }
} // end of namespace D2DPrettyPrinter
namespace ResolvedDesugaredExecutableDafnyPlugin {


  public partial class COMP {
    public COMP() {
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISequence<Dafny.Rune> _out14;
      _out14 = D2DPrettyPrinter.__default.PrettyPrint(p);
      s = _out14;
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      return s;
    }
  }
} // end of namespace ResolvedDesugaredExecutableDafnyPlugin
namespace RAST {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> SeqToString<__T>(Dafny.ISequence<__T> s, Func<__T, Dafny.ISequence<Dafny.Rune>> f, Dafny.ISequence<Dafny.Rune> separator) {
      if ((new BigInteger((s).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Helpers.Id<Func<__T, Dafny.ISequence<Dafny.Rune>>>(f)((s).Select(BigInteger.Zero)), (((new BigInteger((s).Count)) > (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.Concat(separator, RAST.__default.SeqToString<__T>((s).Drop(BigInteger.One), f, separator))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> AddIndent(Dafny.ISequence<Dafny.Rune> raw, Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _801___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((raw).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, raw);
      } else if ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[({")).Contains((raw).Select(BigInteger.Zero))) {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in103 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in104 = Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND);
        raw = _in103;
        ind = _in104;
        goto TAIL_CALL_START;
      } else if (((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("})]")).Contains((raw).Select(BigInteger.Zero))) && ((new BigInteger((ind).Count)) > (new BigInteger(2)))) {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in105 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in106 = (ind).Take((new BigInteger((ind).Count)) - (new BigInteger(2)));
        raw = _in105;
        ind = _in106;
        goto TAIL_CALL_START;
      } else if (((raw).Select(BigInteger.Zero)) == (new Dafny.Rune('\n'))) {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)), ind));
        Dafny.ISequence<Dafny.Rune> _in107 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in108 = ind;
        raw = _in107;
        ind = _in108;
        goto TAIL_CALL_START;
      } else {
        _801___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_801___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((raw).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in109 = (raw).Drop(BigInteger.One);
        Dafny.ISequence<Dafny.Rune> _in110 = ind;
        raw = _in109;
        ind = _in110;
        goto TAIL_CALL_START;
      }
    }
    public static byte PUB {
      get {
        return (byte)(1);
      }
    }
    public static byte PRIV {
      get {
        return (byte)(0);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("  ");
      }
    }
  }

  public interface _IMod {
    bool is_Mod { get; }
    bool is_ExternMod { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IModDecl> dtor_body { get; }
    _IMod DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Mod : _IMod {
    public Mod() {
    }
    private static readonly RAST._IMod theDefault = create_Mod(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IModDecl>.Empty);
    public static RAST._IMod Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMod> _TYPE = new Dafny.TypeDescriptor<RAST._IMod>(RAST.Mod.Default());
    public static Dafny.TypeDescriptor<RAST._IMod> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMod create_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) {
      return new Mod_Mod(name, body);
    }
    public static _IMod create_ExternMod(Dafny.ISequence<Dafny.Rune> name) {
      return new Mod_ExternMod(name);
    }
    public bool is_Mod { get { return this is Mod_Mod; } }
    public bool is_ExternMod { get { return this is Mod_ExternMod; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        if (d is Mod_Mod) { return ((Mod_Mod)d)._name; }
        return ((Mod_ExternMod)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IModDecl> dtor_body {
      get {
        var d = this;
        return ((Mod_Mod)d)._body;
      }
    }
    public abstract _IMod DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      RAST._IMod _source25 = this;
      if (_source25.is_Mod) {
        Dafny.ISequence<Dafny.Rune> _802___mcc_h0 = _source25.dtor_name;
        Dafny.ISequence<RAST._IModDecl> _803___mcc_h1 = _source25.dtor_body;
        Dafny.ISequence<RAST._IModDecl> _804_body = _803___mcc_h1;
        Dafny.ISequence<Dafny.Rune> _805_name = _802___mcc_h0;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _805_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), RAST.__default.IND), RAST.__default.SeqToString<RAST._IModDecl>(_804_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>>>((_806_ind) => ((System.Func<RAST._IModDecl, Dafny.ISequence<Dafny.Rune>>)((_807_modDecl) => {
          return (_807_modDecl)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_806_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _808___mcc_h2 = _source25.dtor_name;
        Dafny.ISequence<Dafny.Rune> _809_name = _808___mcc_h2;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod "), _809_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
      }
    }
  }
  public class Mod_Mod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IModDecl> _body;
    public Mod_Mod(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IModDecl> body) : base() {
      this._name = name;
      this._body = body;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_Mod(_name, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_Mod;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.Mod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Mod_ExternMod : Mod {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public Mod_ExternMod(Dafny.ISequence<Dafny.Rune> name) : base() {
      this._name = name;
    }
    public override _IMod DowncastClone() {
      if (this is _IMod dt) { return dt; }
      return new Mod_ExternMod(_name);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Mod_ExternMod;
      return oth != null && object.Equals(this._name, oth._name);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Mod.ExternMod";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _IModDecl {
    bool is_RawDecl { get; }
    bool is_ModDecl { get; }
    bool is_StructDecl { get; }
    bool is_EnumDecl { get; }
    bool is_ImplDecl { get; }
    bool is_TraitDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_body { get; }
    RAST._IMod dtor_mod { get; }
    RAST._IStruct dtor_struct { get; }
    RAST._IEnum dtor_enum { get; }
    RAST._IImpl dtor_impl { get; }
    RAST._ITrait dtor_tr { get; }
    _IModDecl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ModDecl : _IModDecl {
    public ModDecl() {
    }
    private static readonly RAST._IModDecl theDefault = create_RawDecl(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IModDecl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IModDecl> _TYPE = new Dafny.TypeDescriptor<RAST._IModDecl>(RAST.ModDecl.Default());
    public static Dafny.TypeDescriptor<RAST._IModDecl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IModDecl create_RawDecl(Dafny.ISequence<Dafny.Rune> body) {
      return new ModDecl_RawDecl(body);
    }
    public static _IModDecl create_ModDecl(RAST._IMod mod) {
      return new ModDecl_ModDecl(mod);
    }
    public static _IModDecl create_StructDecl(RAST._IStruct @struct) {
      return new ModDecl_StructDecl(@struct);
    }
    public static _IModDecl create_EnumDecl(RAST._IEnum @enum) {
      return new ModDecl_EnumDecl(@enum);
    }
    public static _IModDecl create_ImplDecl(RAST._IImpl impl) {
      return new ModDecl_ImplDecl(impl);
    }
    public static _IModDecl create_TraitDecl(RAST._ITrait tr) {
      return new ModDecl_TraitDecl(tr);
    }
    public bool is_RawDecl { get { return this is ModDecl_RawDecl; } }
    public bool is_ModDecl { get { return this is ModDecl_ModDecl; } }
    public bool is_StructDecl { get { return this is ModDecl_StructDecl; } }
    public bool is_EnumDecl { get { return this is ModDecl_EnumDecl; } }
    public bool is_ImplDecl { get { return this is ModDecl_ImplDecl; } }
    public bool is_TraitDecl { get { return this is ModDecl_TraitDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_body {
      get {
        var d = this;
        return ((ModDecl_RawDecl)d)._body;
      }
    }
    public RAST._IMod dtor_mod {
      get {
        var d = this;
        return ((ModDecl_ModDecl)d)._mod;
      }
    }
    public RAST._IStruct dtor_struct {
      get {
        var d = this;
        return ((ModDecl_StructDecl)d)._struct;
      }
    }
    public RAST._IEnum dtor_enum {
      get {
        var d = this;
        return ((ModDecl_EnumDecl)d)._enum;
      }
    }
    public RAST._IImpl dtor_impl {
      get {
        var d = this;
        return ((ModDecl_ImplDecl)d)._impl;
      }
    }
    public RAST._ITrait dtor_tr {
      get {
        var d = this;
        return ((ModDecl_TraitDecl)d)._tr;
      }
    }
    public abstract _IModDecl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_ModDecl) {
        return ((this).dtor_mod)._ToString(ind);
      } else if ((this).is_StructDecl) {
        return ((this).dtor_struct)._ToString(ind);
      } else if ((this).is_ImplDecl) {
        return ((this).dtor_impl)._ToString(ind);
      } else if ((this).is_EnumDecl) {
        return ((this).dtor_enum)._ToString(ind);
      } else if ((this).is_TraitDecl) {
        return ((this).dtor_tr)._ToString(ind);
      } else {
        return (this).dtor_body;
      }
    }
  }
  public class ModDecl_RawDecl : ModDecl {
    public readonly Dafny.ISequence<Dafny.Rune> _body;
    public ModDecl_RawDecl(Dafny.ISequence<Dafny.Rune> body) : base() {
      this._body = body;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_RawDecl(_body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_RawDecl;
      return oth != null && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.RawDecl";
      s += "(";
      s += this._body.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ModDecl : ModDecl {
    public readonly RAST._IMod _mod;
    public ModDecl_ModDecl(RAST._IMod mod) : base() {
      this._mod = mod;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ModDecl(_mod);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ModDecl;
      return oth != null && object.Equals(this._mod, oth._mod);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._mod));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ModDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._mod);
      s += ")";
      return s;
    }
  }
  public class ModDecl_StructDecl : ModDecl {
    public readonly RAST._IStruct _struct;
    public ModDecl_StructDecl(RAST._IStruct @struct) : base() {
      this._struct = @struct;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_StructDecl(_struct);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_StructDecl;
      return oth != null && object.Equals(this._struct, oth._struct);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._struct));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.StructDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._struct);
      s += ")";
      return s;
    }
  }
  public class ModDecl_EnumDecl : ModDecl {
    public readonly RAST._IEnum _enum;
    public ModDecl_EnumDecl(RAST._IEnum @enum) : base() {
      this._enum = @enum;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_EnumDecl(_enum);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_EnumDecl;
      return oth != null && object.Equals(this._enum, oth._enum);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._enum));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.EnumDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._enum);
      s += ")";
      return s;
    }
  }
  public class ModDecl_ImplDecl : ModDecl {
    public readonly RAST._IImpl _impl;
    public ModDecl_ImplDecl(RAST._IImpl impl) : base() {
      this._impl = impl;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_ImplDecl(_impl);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_ImplDecl;
      return oth != null && object.Equals(this._impl, oth._impl);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._impl));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.ImplDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._impl);
      s += ")";
      return s;
    }
  }
  public class ModDecl_TraitDecl : ModDecl {
    public readonly RAST._ITrait _tr;
    public ModDecl_TraitDecl(RAST._ITrait tr) : base() {
      this._tr = tr;
    }
    public override _IModDecl DowncastClone() {
      if (this is _IModDecl dt) { return dt; }
      return new ModDecl_TraitDecl(_tr);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ModDecl_TraitDecl;
      return oth != null && object.Equals(this._tr, oth._tr);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 5;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tr));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ModDecl.TraitDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._tr);
      s += ")";
      return s;
    }
  }

  public interface _IAttribute {
    bool is_RawAttribute { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Attribute : _IAttribute {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Attribute(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Attribute;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Attribute.RawAttribute";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAttribute create(Dafny.ISequence<Dafny.Rune> content) {
      return new Attribute(content);
    }
    public static _IAttribute create_RawAttribute(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawAttribute { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> ind) {
      return RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(attributes, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_810_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_811_attribute) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((_811_attribute), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _810_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
    }
  }

  public interface _IStruct {
    bool is_Struct { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IFormals dtor_fields { get; }
    _IStruct DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Struct : _IStruct {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IFormals _fields;
    public Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._fields = fields;
    }
    public _IStruct DowncastClone() {
      if (this is _IStruct dt) { return dt; }
      return new Struct(_attributes, _name, _typeParams, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Struct;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Struct.Struct";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IStruct theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Formals.Default());
    public static RAST._IStruct Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IStruct> _TYPE = new Dafny.TypeDescriptor<RAST._IStruct>(RAST.Struct.Default());
    public static Dafny.TypeDescriptor<RAST._IStruct> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IStruct create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      return new Struct(attributes, name, typeParams, fields);
    }
    public static _IStruct create_Struct(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IFormals fields) {
      return create(attributes, name, typeParams, fields);
    }
    public bool is_Struct { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub struct ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_fields)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND), ((this).dtor_fields).is_NamedFormals)), ((((this).dtor_fields).is_NamelessFormals) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))));
    }
  }

  public interface _IFormals {
    bool is_NamedFormals { get; }
    bool is_NamelessFormals { get; }
    Dafny.ISequence<RAST._IFormal> dtor_fields { get; }
    Dafny.ISequence<RAST._IType> dtor_types { get; }
    _IFormals DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public abstract class Formals : _IFormals {
    public Formals() {
    }
    private static readonly RAST._IFormals theDefault = create_NamedFormals(Dafny.Sequence<RAST._IFormal>.Empty);
    public static RAST._IFormals Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormals> _TYPE = new Dafny.TypeDescriptor<RAST._IFormals>(RAST.Formals.Default());
    public static Dafny.TypeDescriptor<RAST._IFormals> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormals create_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) {
      return new Formals_NamedFormals(fields);
    }
    public static _IFormals create_NamelessFormals(Dafny.ISequence<RAST._IType> types) {
      return new Formals_NamelessFormals(types);
    }
    public bool is_NamedFormals { get { return this is Formals_NamedFormals; } }
    public bool is_NamelessFormals { get { return this is Formals_NamelessFormals; } }
    public Dafny.ISequence<RAST._IFormal> dtor_fields {
      get {
        var d = this;
        return ((Formals_NamedFormals)d)._fields;
      }
    }
    public Dafny.ISequence<RAST._IType> dtor_types {
      get {
        var d = this;
        return ((Formals_NamelessFormals)d)._types;
      }
    }
    public abstract _IFormals DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      if ((this).is_NamedFormals) {
        Dafny.ISequence<Dafny.Rune> _812_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        _System._ITuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>> _let_tmp_rhs40 = (((newLine) && ((new BigInteger(((this).dtor_fields).Count)).Sign == 1)) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind))) : ((((new BigInteger(((this).dtor_fields).Count)).Sign == 1) ? (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "))) : (_System.Tuple2<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))))));
        Dafny.ISequence<Dafny.Rune> _813_beginSpace = _let_tmp_rhs40.dtor__0;
        Dafny.ISequence<Dafny.Rune> _814_endSpace = _let_tmp_rhs40.dtor__1;
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"), _813_beginSpace), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_fields, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_815_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_816_field) => {
          return (_816_field)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_815_ind, RAST.__default.IND));
        })))(ind), _812_separator)), _814_endSpace), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        Dafny.ISequence<Dafny.Rune> _817_separator = ((newLine) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(",\n"), ind), RAST.__default.IND)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")));
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), RAST.__default.SeqToString<RAST._IType>((this).dtor_types, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>>>((_818_ind) => ((System.Func<RAST._IType, Dafny.ISequence<Dafny.Rune>>)((_819_t) => {
          return (_819_t)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_818_ind, RAST.__default.IND));
        })))(ind), _817_separator)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
    }
  }
  public class Formals_NamedFormals : Formals {
    public readonly Dafny.ISequence<RAST._IFormal> _fields;
    public Formals_NamedFormals(Dafny.ISequence<RAST._IFormal> fields) : base() {
      this._fields = fields;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamedFormals(_fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamedFormals;
      return oth != null && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamedFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
  }
  public class Formals_NamelessFormals : Formals {
    public readonly Dafny.ISequence<RAST._IType> _types;
    public Formals_NamelessFormals(Dafny.ISequence<RAST._IType> types) : base() {
      this._types = types;
    }
    public override _IFormals DowncastClone() {
      if (this is _IFormals dt) { return dt; }
      return new Formals_NamelessFormals(_types);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formals_NamelessFormals;
      return oth != null && object.Equals(this._types, oth._types);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._types));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formals.NamelessFormals";
      s += "(";
      s += Dafny.Helpers.ToString(this._types);
      s += ")";
      return s;
    }
  }

  public interface _IEnumCase {
    bool is_EnumCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IFormals dtor_fields { get; }
    _IEnumCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine);
  }
  public class EnumCase : _IEnumCase {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IFormals _fields;
    public EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      this._name = name;
      this._fields = fields;
    }
    public _IEnumCase DowncastClone() {
      if (this is _IEnumCase dt) { return dt; }
      return new EnumCase(_name, _fields);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.EnumCase;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._fields, oth._fields);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fields));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.EnumCase.EnumCase";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fields);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnumCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Formals.Default());
    public static RAST._IEnumCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnumCase> _TYPE = new Dafny.TypeDescriptor<RAST._IEnumCase>(RAST.EnumCase.Default());
    public static Dafny.TypeDescriptor<RAST._IEnumCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnumCase create(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return new EnumCase(name, fields);
    }
    public static _IEnumCase create_EnumCase(Dafny.ISequence<Dafny.Rune> name, RAST._IFormals fields) {
      return create(name, fields);
    }
    public bool is_EnumCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IFormals dtor_fields {
      get {
        return this._fields;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind, bool newLine) {
      return Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, ((this).dtor_fields)._ToString(ind, newLine));
    }
  }

  public interface _IEnum {
    bool is_Enum { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IEnumCase> dtor_variants { get; }
    _IEnum DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Enum : _IEnum {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _attributes;
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<RAST._IEnumCase> _variants;
    public Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      this._attributes = attributes;
      this._name = name;
      this._typeParams = typeParams;
      this._variants = variants;
    }
    public _IEnum DowncastClone() {
      if (this is _IEnum dt) { return dt; }
      return new Enum(_attributes, _name, _typeParams, _variants);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Enum;
      return oth != null && object.Equals(this._attributes, oth._attributes) && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._variants, oth._variants);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._attributes));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._variants));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Enum.Enum";
      s += "(";
      s += Dafny.Helpers.ToString(this._attributes);
      s += ", ";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._variants);
      s += ")";
      return s;
    }
    private static readonly RAST._IEnum theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<RAST._IEnumCase>.Empty);
    public static RAST._IEnum Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IEnum> _TYPE = new Dafny.TypeDescriptor<RAST._IEnum>(RAST.Enum.Default());
    public static Dafny.TypeDescriptor<RAST._IEnum> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IEnum create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return new Enum(attributes, name, typeParams, variants);
    }
    public static _IEnum create_Enum(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> attributes, Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IEnumCase> variants) {
      return create(attributes, name, typeParams, variants);
    }
    public bool is_Enum { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_attributes {
      get {
        return this._attributes;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IEnumCase> dtor_variants {
      get {
        return this._variants;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Attribute.ToStringMultiple((this).dtor_attributes, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub enum ")), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IEnumCase>((this).dtor_variants, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>>>((_820_ind) => ((System.Func<RAST._IEnumCase, Dafny.ISequence<Dafny.Rune>>)((_821_variant) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _820_ind), RAST.__default.IND), (_821_variant)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_820_ind, RAST.__default.IND), false));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _ITypeParam {
    bool is_RawTypeParam { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class TypeParam : _ITypeParam {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public TypeParam(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.TypeParam;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.TypeParam.RawTypeParam";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITypeParam create(Dafny.ISequence<Dafny.Rune> content) {
      return new TypeParam(content);
    }
    public static _ITypeParam create_RawTypeParam(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawTypeParam { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> ToStringMultiple(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<Dafny.Rune> ind) {
      if ((new BigInteger((typeParams).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), RAST.__default.SeqToString<Dafny.ISequence<Dafny.Rune>>(typeParams, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>>>((_822_ind) => ((System.Func<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>>)((_823_t) => {
          return RAST.TypeParam._ToString(_823_t, Dafny.Sequence<Dafny.Rune>.Concat(_822_ind, RAST.__default.IND));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IType {
    bool is_Self { get; }
    bool is_SelfOwned { get; }
    bool is_SelfMut { get; }
    bool is_RawType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    _IType DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Type : _IType {
    public Type() {
    }
    private static readonly RAST._IType theDefault = create_Self();
    public static RAST._IType Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IType> _TYPE = new Dafny.TypeDescriptor<RAST._IType>(RAST.Type.Default());
    public static Dafny.TypeDescriptor<RAST._IType> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IType create_Self() {
      return new Type_Self();
    }
    public static _IType create_SelfOwned() {
      return new Type_SelfOwned();
    }
    public static _IType create_SelfMut() {
      return new Type_SelfMut();
    }
    public static _IType create_RawType(Dafny.ISequence<Dafny.Rune> content) {
      return new Type_RawType(content);
    }
    public bool is_Self { get { return this is Type_Self; } }
    public bool is_SelfOwned { get { return this is Type_SelfOwned; } }
    public bool is_SelfMut { get { return this is Type_SelfMut; } }
    public bool is_RawType { get { return this is Type_RawType; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Type_RawType)d)._content;
      }
    }
    public abstract _IType DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_Self) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self");
      } else if ((this).is_SelfOwned) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
      } else if ((this).is_SelfMut) {
        return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut Self");
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class Type_Self : Type {
    public Type_Self() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_Self();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_Self;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.Self";
      return s;
    }
  }
  public class Type_SelfOwned : Type {
    public Type_SelfOwned() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfOwned();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfOwned;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfOwned";
      return s;
    }
  }
  public class Type_SelfMut : Type {
    public Type_SelfMut() : base() {
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_SelfMut();
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_SelfMut;
      return oth != null;
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.SelfMut";
      return s;
    }
  }
  public class Type_RawType : Type {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Type_RawType(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IType DowncastClone() {
      if (this is _IType dt) { return dt; }
      return new Type_RawType(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Type_RawType;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Type.RawType";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }

  public interface _ITrait {
    bool is_Trait { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _ITrait DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Trait : _ITrait {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public _ITrait DowncastClone() {
      if (this is _ITrait dt) { return dt; }
      return new Trait(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Trait;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Trait.Trait";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._ITrait theDefault = create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._ITrait Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._ITrait> _TYPE = new Dafny.TypeDescriptor<RAST._ITrait>(RAST.Trait.Default());
    public static Dafny.TypeDescriptor<RAST._ITrait> _TypeDescriptor() {
      return _TYPE;
    }
    public static _ITrait create(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Trait(typeParams, tpe, @where, body);
    }
    public static _ITrait create_Trait(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return create(typeParams, tpe, @where, body);
    }
    public bool is_Trait { get { return true; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_824_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_825_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _824_ind), RAST.__default.IND), (_825_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_824_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }

  public interface _IImpl {
    bool is_ImplFor { get; }
    bool is_Impl { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    RAST._IType dtor_tpe { get; }
    RAST._IType dtor_forType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Dafny.ISequence<RAST._IImplMember> dtor_body { get; }
    _IImpl DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class Impl : _IImpl {
    public Impl() {
    }
    private static readonly RAST._IImpl theDefault = create_ImplFor(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, RAST.Type.Default(), RAST.Type.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<RAST._IImplMember>.Empty);
    public static RAST._IImpl Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImpl> _TYPE = new Dafny.TypeDescriptor<RAST._IImpl>(RAST.Impl.Default());
    public static Dafny.TypeDescriptor<RAST._IImpl> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImpl create_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_ImplFor(typeParams, tpe, forType, @where, body);
    }
    public static _IImpl create_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) {
      return new Impl_Impl(typeParams, tpe, @where, body);
    }
    public bool is_ImplFor { get { return this is Impl_ImplFor; } }
    public bool is_Impl { get { return this is Impl_Impl; } }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._typeParams; }
        return ((Impl_Impl)d)._typeParams;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._tpe; }
        return ((Impl_Impl)d)._tpe;
      }
    }
    public RAST._IType dtor_forType {
      get {
        var d = this;
        return ((Impl_ImplFor)d)._forType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._where; }
        return ((Impl_Impl)d)._where;
      }
    }
    public Dafny.ISequence<RAST._IImplMember> dtor_body {
      get {
        var d = this;
        if (d is Impl_ImplFor) { return ((Impl_ImplFor)d)._body; }
        return ((Impl_Impl)d)._body;
      }
    }
    public abstract _IImpl DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), ((this).dtor_tpe)._ToString(ind)), (((this).is_ImplFor) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" for "), ((this).dtor_forType)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), ((!((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IImplMember>((this).dtor_body, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>>>((_826_ind) => ((System.Func<RAST._IImplMember, Dafny.ISequence<Dafny.Rune>>)((_827_member) => {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _826_ind), RAST.__default.IND), (_827_member)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_826_ind, RAST.__default.IND)));
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), (((new BigInteger(((this).dtor_body).Count)).Sign == 0) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
    }
  }
  public class Impl_ImplFor : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly RAST._IType _forType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_ImplFor(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, RAST._IType forType, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._forType = forType;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_ImplFor(_typeParams, _tpe, _forType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_ImplFor;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._forType, oth._forType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._forType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.ImplFor";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += Dafny.Helpers.ToString(this._forType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }
  public class Impl_Impl : Impl {
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly RAST._IType _tpe;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Dafny.ISequence<RAST._IImplMember> _body;
    public Impl_Impl(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, RAST._IType tpe, Dafny.ISequence<Dafny.Rune> @where, Dafny.ISequence<RAST._IImplMember> body) : base() {
      this._typeParams = typeParams;
      this._tpe = tpe;
      this._where = @where;
      this._body = body;
    }
    public override _IImpl DowncastClone() {
      if (this is _IImpl dt) { return dt; }
      return new Impl_Impl(_typeParams, _tpe, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Impl_Impl;
      return oth != null && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._tpe, oth._tpe) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Impl.Impl";
      s += "(";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
  }

  public interface _IImplMember {
    bool is_RawImplMember { get; }
    bool is_FnDecl { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    byte dtor_pub { get; }
    RAST._IFn dtor_fun { get; }
    _IImplMember DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public abstract class ImplMember : _IImplMember {
    public ImplMember() {
    }
    private static readonly RAST._IImplMember theDefault = create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IImplMember Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IImplMember> _TYPE = new Dafny.TypeDescriptor<RAST._IImplMember>(RAST.ImplMember.Default());
    public static Dafny.TypeDescriptor<RAST._IImplMember> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IImplMember create_RawImplMember(Dafny.ISequence<Dafny.Rune> content) {
      return new ImplMember_RawImplMember(content);
    }
    public static _IImplMember create_FnDecl(byte pub, RAST._IFn fun) {
      return new ImplMember_FnDecl(pub, fun);
    }
    public bool is_RawImplMember { get { return this is ImplMember_RawImplMember; } }
    public bool is_FnDecl { get { return this is ImplMember_FnDecl; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((ImplMember_RawImplMember)d)._content;
      }
    }
    public byte dtor_pub {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._pub;
      }
    }
    public RAST._IFn dtor_fun {
      get {
        var d = this;
        return ((ImplMember_FnDecl)d)._fun;
      }
    }
    public abstract _IImplMember DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_FnDecl) {
        return Dafny.Sequence<Dafny.Rune>.Concat(((((this).dtor_pub) == (RAST.__default.PUB)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub ")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), ((this).dtor_fun)._ToString(ind));
      } else {
        return (this).dtor_content;
      }
    }
  }
  public class ImplMember_RawImplMember : ImplMember {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public ImplMember_RawImplMember(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_RawImplMember(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_RawImplMember;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.RawImplMember";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class ImplMember_FnDecl : ImplMember {
    public readonly byte _pub;
    public readonly RAST._IFn _fun;
    public ImplMember_FnDecl(byte pub, RAST._IFn fun) : base() {
      this._pub = pub;
      this._fun = fun;
    }
    public override _IImplMember DowncastClone() {
      if (this is _IImplMember dt) { return dt; }
      return new ImplMember_FnDecl(_pub, _fun);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.ImplMember_FnDecl;
      return oth != null && this._pub == oth._pub && object.Equals(this._fun, oth._fun);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pub));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._fun));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.ImplMember.FnDecl";
      s += "(";
      s += Dafny.Helpers.ToString(this._pub);
      s += ", ";
      s += Dafny.Helpers.ToString(this._fun);
      s += ")";
      return s;
    }
  }

  public partial class VISIBILITY {
    public static System.Collections.Generic.IEnumerable<byte> IntegerRange(BigInteger lo, BigInteger hi) {
      for (var j = lo; j < hi; j++) { yield return (byte)j; }
    }
    private static readonly Dafny.TypeDescriptor<byte> _TYPE = new Dafny.TypeDescriptor<byte>(0);
    public static Dafny.TypeDescriptor<byte> _TypeDescriptor() {
      return _TYPE;
    }
  }

  public interface _IFormal {
    bool is_Formal { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    RAST._IType dtor_tpe { get; }
    _IFormal DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Formal : _IFormal {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly RAST._IType _tpe;
    public Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      this._name = name;
      this._tpe = tpe;
    }
    public _IFormal DowncastClone() {
      if (this is _IFormal dt) { return dt; }
      return new Formal(_name, _tpe);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Formal;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._tpe, oth._tpe);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._tpe));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Formal.Formal";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._tpe);
      s += ")";
      return s;
    }
    private static readonly RAST._IFormal theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Type.Default());
    public static RAST._IFormal Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFormal> _TYPE = new Dafny.TypeDescriptor<RAST._IFormal>(RAST.Formal.Default());
    public static Dafny.TypeDescriptor<RAST._IFormal> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFormal create(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return new Formal(name, tpe);
    }
    public static _IFormal create_Formal(Dafny.ISequence<Dafny.Rune> name, RAST._IType tpe) {
      return create(name, tpe);
    }
    public bool is_Formal { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public RAST._IType dtor_tpe {
      get {
        return this._tpe;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) && (((this).dtor_tpe).is_SelfOwned)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"))) && (((this).dtor_tpe).is_Self)) {
        return (this).dtor_name;
      } else if ((((this).dtor_name).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"))) && (((this).dtor_tpe).is_SelfMut)) {
        return (this).dtor_name;
      } else {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_tpe)._ToString(ind));
      }
    }
    public static RAST._IFormal self {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self"), RAST.Type.create_Self());
      }
    }
    public static RAST._IFormal selfOwned {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_SelfOwned());
      }
    }
    public static RAST._IFormal selfMut {
      get {
        return RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut self"), RAST.Type.create_SelfMut());
      }
    }
  }

  public interface _IPattern {
    bool is_RawPattern { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
  }
  public class Pattern : _IPattern {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Pattern(Dafny.ISequence<Dafny.Rune> content) {
      this._content = content;
    }
    public static Dafny.ISequence<Dafny.Rune> DowncastClone(Dafny.ISequence<Dafny.Rune> _this) {
      return _this;
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Pattern;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Pattern.RawPattern";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
    private static readonly Dafny.ISequence<Dafny.Rune> theDefault = Dafny.Sequence<Dafny.Rune>.Empty;
    public static Dafny.ISequence<Dafny.Rune> Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TYPE = new Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>>(Dafny.Sequence<Dafny.Rune>.Empty);
    public static Dafny.TypeDescriptor<Dafny.ISequence<Dafny.Rune>> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IPattern create(Dafny.ISequence<Dafny.Rune> content) {
      return new Pattern(content);
    }
    public static _IPattern create_RawPattern(Dafny.ISequence<Dafny.Rune> content) {
      return create(content);
    }
    public bool is_RawPattern { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        return this._content;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> _this, Dafny.ISequence<Dafny.Rune> ind) {
      return (_this);
    }
  }

  public interface _IMatchCase {
    bool is_MatchCase { get; }
    Dafny.ISequence<Dafny.Rune> dtor_pattern { get; }
    RAST._IExpr dtor_rhs { get; }
    _IMatchCase DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class MatchCase : _IMatchCase {
    public readonly Dafny.ISequence<Dafny.Rune> _pattern;
    public readonly RAST._IExpr _rhs;
    public MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      this._pattern = pattern;
      this._rhs = rhs;
    }
    public _IMatchCase DowncastClone() {
      if (this is _IMatchCase dt) { return dt; }
      return new MatchCase(_pattern, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.MatchCase;
      return oth != null && object.Equals(this._pattern, oth._pattern) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._pattern));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.MatchCase.MatchCase";
      s += "(";
      s += Dafny.Helpers.ToString(this._pattern);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IMatchCase theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IMatchCase Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IMatchCase> _TYPE = new Dafny.TypeDescriptor<RAST._IMatchCase>(RAST.MatchCase.Default());
    public static Dafny.TypeDescriptor<RAST._IMatchCase> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IMatchCase create(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return new MatchCase(pattern, rhs);
    }
    public static _IMatchCase create_MatchCase(Dafny.ISequence<Dafny.Rune> pattern, RAST._IExpr rhs) {
      return create(pattern, rhs);
    }
    public bool is_MatchCase { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_pattern {
      get {
        return this._pattern;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      Dafny.ISequence<Dafny.Rune> _828_newIndent = ((((this).dtor_rhs).is_Block) ? (ind) : (Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
      Dafny.ISequence<Dafny.Rune> _829_rhsString = ((this).dtor_rhs)._ToString(_828_newIndent);
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(RAST.Pattern._ToString((this).dtor_pattern, ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" =>")), ((((_829_rhsString).Contains(new Dafny.Rune('\n'))) && (((_829_rhsString).Select(BigInteger.Zero)) != (new Dafny.Rune('{')))) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), _829_rhsString)) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "), _829_rhsString))));
    }
  }

  public interface _IAssignIdentifier {
    bool is_AssignIdentifier { get; }
    Dafny.ISequence<Dafny.Rune> dtor_identifier { get; }
    RAST._IExpr dtor_rhs { get; }
    _IAssignIdentifier DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class AssignIdentifier : _IAssignIdentifier {
    public readonly Dafny.ISequence<Dafny.Rune> _identifier;
    public readonly RAST._IExpr _rhs;
    public AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      this._identifier = identifier;
      this._rhs = rhs;
    }
    public _IAssignIdentifier DowncastClone() {
      if (this is _IAssignIdentifier dt) { return dt; }
      return new AssignIdentifier(_identifier, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.AssignIdentifier;
      return oth != null && object.Equals(this._identifier, oth._identifier) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._identifier));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.AssignIdentifier.AssignIdentifier";
      s += "(";
      s += this._identifier.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
    private static readonly RAST._IAssignIdentifier theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, RAST.Expr.Default());
    public static RAST._IAssignIdentifier Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TYPE = new Dafny.TypeDescriptor<RAST._IAssignIdentifier>(RAST.AssignIdentifier.Default());
    public static Dafny.TypeDescriptor<RAST._IAssignIdentifier> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IAssignIdentifier create(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return new AssignIdentifier(identifier, rhs);
    }
    public static _IAssignIdentifier create_AssignIdentifier(Dafny.ISequence<Dafny.Rune> identifier, RAST._IExpr rhs) {
      return create(identifier, rhs);
    }
    public bool is_AssignIdentifier { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_identifier {
      get {
        return this._identifier;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        return this._rhs;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_identifier, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), ((this).dtor_rhs)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND)));
    }
  }

  public interface _IExpr {
    bool is_RawExpr { get; }
    bool is_Match { get; }
    bool is_StmtExpr { get; }
    bool is_Block { get; }
    bool is_StructBuild { get; }
    Dafny.ISequence<Dafny.Rune> dtor_content { get; }
    RAST._IExpr dtor_matchee { get; }
    Dafny.ISequence<RAST._IMatchCase> dtor_cases { get; }
    RAST._IExpr dtor_stmt { get; }
    RAST._IExpr dtor_rhs { get; }
    RAST._IExpr dtor_underlying { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments { get; }
    _IExpr DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
    RAST._IExpr Then(RAST._IExpr rhs2);
  }
  public abstract class Expr : _IExpr {
    public Expr() {
    }
    private static readonly RAST._IExpr theDefault = create_RawExpr(Dafny.Sequence<Dafny.Rune>.Empty);
    public static RAST._IExpr Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IExpr> _TYPE = new Dafny.TypeDescriptor<RAST._IExpr>(RAST.Expr.Default());
    public static Dafny.TypeDescriptor<RAST._IExpr> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IExpr create_RawExpr(Dafny.ISequence<Dafny.Rune> content) {
      return new Expr_RawExpr(content);
    }
    public static _IExpr create_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) {
      return new Expr_Match(matchee, cases);
    }
    public static _IExpr create_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) {
      return new Expr_StmtExpr(stmt, rhs);
    }
    public static _IExpr create_Block(RAST._IExpr underlying) {
      return new Expr_Block(underlying);
    }
    public static _IExpr create_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) {
      return new Expr_StructBuild(name, assignments);
    }
    public bool is_RawExpr { get { return this is Expr_RawExpr; } }
    public bool is_Match { get { return this is Expr_Match; } }
    public bool is_StmtExpr { get { return this is Expr_StmtExpr; } }
    public bool is_Block { get { return this is Expr_Block; } }
    public bool is_StructBuild { get { return this is Expr_StructBuild; } }
    public Dafny.ISequence<Dafny.Rune> dtor_content {
      get {
        var d = this;
        return ((Expr_RawExpr)d)._content;
      }
    }
    public RAST._IExpr dtor_matchee {
      get {
        var d = this;
        return ((Expr_Match)d)._matchee;
      }
    }
    public Dafny.ISequence<RAST._IMatchCase> dtor_cases {
      get {
        var d = this;
        return ((Expr_Match)d)._cases;
      }
    }
    public RAST._IExpr dtor_stmt {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._stmt;
      }
    }
    public RAST._IExpr dtor_rhs {
      get {
        var d = this;
        return ((Expr_StmtExpr)d)._rhs;
      }
    }
    public RAST._IExpr dtor_underlying {
      get {
        var d = this;
        return ((Expr_Block)d)._underlying;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._name;
      }
    }
    public Dafny.ISequence<RAST._IAssignIdentifier> dtor_assignments {
      get {
        var d = this;
        return ((Expr_StructBuild)d)._assignments;
      }
    }
    public abstract _IExpr DowncastClone();
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      if ((this).is_Match) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match "), ((this).dtor_matchee)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IMatchCase>((this).dtor_cases, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>>>((_830_ind) => ((System.Func<RAST._IMatchCase, Dafny.ISequence<Dafny.Rune>>)((_831_c) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _830_ind), RAST.__default.IND), (_831_c)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_830_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if ((this).is_StmtExpr) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((this).dtor_stmt)._ToString(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), ind), ((this).dtor_rhs)._ToString(ind));
      } else if ((this).is_Block) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n"), ind), RAST.__default.IND), ((this).dtor_underlying)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(ind, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else if ((this).is_StructBuild) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat((this).dtor_name, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {")), RAST.__default.SeqToString<RAST._IAssignIdentifier>((this).dtor_assignments, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>>>((_832_ind) => ((System.Func<RAST._IAssignIdentifier, Dafny.ISequence<Dafny.Rune>>)((_833_assignment) => {
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), _832_ind), RAST.__default.IND), (_833_assignment)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_832_ind, RAST.__default.IND)));
        })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","))), (((new BigInteger(((this).dtor_assignments).Count)).Sign == 1) ? (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind)) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
      } else {
        return RAST.__default.AddIndent((this).dtor_content, ind);
      }
    }
    public RAST._IExpr Then(RAST._IExpr rhs2) {
      return RAST.Expr.create_StmtExpr(this, rhs2);
    }
  }
  public class Expr_RawExpr : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _content;
    public Expr_RawExpr(Dafny.ISequence<Dafny.Rune> content) : base() {
      this._content = content;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_RawExpr(_content);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_RawExpr;
      return oth != null && object.Equals(this._content, oth._content);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._content));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.RawExpr";
      s += "(";
      s += this._content.ToVerbatimString(true);
      s += ")";
      return s;
    }
  }
  public class Expr_Match : Expr {
    public readonly RAST._IExpr _matchee;
    public readonly Dafny.ISequence<RAST._IMatchCase> _cases;
    public Expr_Match(RAST._IExpr matchee, Dafny.ISequence<RAST._IMatchCase> cases) : base() {
      this._matchee = matchee;
      this._cases = cases;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Match(_matchee, _cases);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Match;
      return oth != null && object.Equals(this._matchee, oth._matchee) && object.Equals(this._cases, oth._cases);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 1;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._matchee));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._cases));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Match";
      s += "(";
      s += Dafny.Helpers.ToString(this._matchee);
      s += ", ";
      s += Dafny.Helpers.ToString(this._cases);
      s += ")";
      return s;
    }
  }
  public class Expr_StmtExpr : Expr {
    public readonly RAST._IExpr _stmt;
    public readonly RAST._IExpr _rhs;
    public Expr_StmtExpr(RAST._IExpr stmt, RAST._IExpr rhs) : base() {
      this._stmt = stmt;
      this._rhs = rhs;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StmtExpr(_stmt, _rhs);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StmtExpr;
      return oth != null && object.Equals(this._stmt, oth._stmt) && object.Equals(this._rhs, oth._rhs);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 2;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._stmt));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._rhs));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StmtExpr";
      s += "(";
      s += Dafny.Helpers.ToString(this._stmt);
      s += ", ";
      s += Dafny.Helpers.ToString(this._rhs);
      s += ")";
      return s;
    }
  }
  public class Expr_Block : Expr {
    public readonly RAST._IExpr _underlying;
    public Expr_Block(RAST._IExpr underlying) : base() {
      this._underlying = underlying;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_Block(_underlying);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_Block;
      return oth != null && object.Equals(this._underlying, oth._underlying);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 3;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._underlying));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.Block";
      s += "(";
      s += Dafny.Helpers.ToString(this._underlying);
      s += ")";
      return s;
    }
  }
  public class Expr_StructBuild : Expr {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<RAST._IAssignIdentifier> _assignments;
    public Expr_StructBuild(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<RAST._IAssignIdentifier> assignments) : base() {
      this._name = name;
      this._assignments = assignments;
    }
    public override _IExpr DowncastClone() {
      if (this is _IExpr dt) { return dt; }
      return new Expr_StructBuild(_name, _assignments);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Expr_StructBuild;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._assignments, oth._assignments);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 4;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._assignments));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Expr.StructBuild";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._assignments);
      s += ")";
      return s;
    }
  }

  public interface _IFn {
    bool is_Fn { get; }
    Dafny.ISequence<Dafny.Rune> dtor_name { get; }
    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams { get; }
    Dafny.ISequence<RAST._IFormal> dtor_formals { get; }
    Std.Wrappers._IOption<RAST._IType> dtor_returnType { get; }
    Dafny.ISequence<Dafny.Rune> dtor_where { get; }
    Std.Wrappers._IOption<RAST._IExpr> dtor_body { get; }
    _IFn DowncastClone();
    Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind);
  }
  public class Fn : _IFn {
    public readonly Dafny.ISequence<Dafny.Rune> _name;
    public readonly Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _typeParams;
    public readonly Dafny.ISequence<RAST._IFormal> _formals;
    public readonly Std.Wrappers._IOption<RAST._IType> _returnType;
    public readonly Dafny.ISequence<Dafny.Rune> _where;
    public readonly Std.Wrappers._IOption<RAST._IExpr> _body;
    public Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      this._name = name;
      this._typeParams = typeParams;
      this._formals = formals;
      this._returnType = returnType;
      this._where = @where;
      this._body = body;
    }
    public _IFn DowncastClone() {
      if (this is _IFn dt) { return dt; }
      return new Fn(_name, _typeParams, _formals, _returnType, _where, _body);
    }
    public override bool Equals(object other) {
      var oth = other as RAST.Fn;
      return oth != null && object.Equals(this._name, oth._name) && object.Equals(this._typeParams, oth._typeParams) && object.Equals(this._formals, oth._formals) && object.Equals(this._returnType, oth._returnType) && object.Equals(this._where, oth._where) && object.Equals(this._body, oth._body);
    }
    public override int GetHashCode() {
      ulong hash = 5381;
      hash = ((hash << 5) + hash) + 0;
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._name));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._typeParams));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._formals));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._returnType));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._where));
      hash = ((hash << 5) + hash) + ((ulong)Dafny.Helpers.GetHashCode(this._body));
      return (int)hash;
    }
    public override string ToString() {
      string s = "RAST.Fn.Fn";
      s += "(";
      s += this._name.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._typeParams);
      s += ", ";
      s += Dafny.Helpers.ToString(this._formals);
      s += ", ";
      s += Dafny.Helpers.ToString(this._returnType);
      s += ", ";
      s += this._where.ToVerbatimString(true);
      s += ", ";
      s += Dafny.Helpers.ToString(this._body);
      s += ")";
      return s;
    }
    private static readonly RAST._IFn theDefault = create(Dafny.Sequence<Dafny.Rune>.Empty, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty, Dafny.Sequence<RAST._IFormal>.Empty, Std.Wrappers.Option<RAST._IType>.Default(), Dafny.Sequence<Dafny.Rune>.Empty, Std.Wrappers.Option<RAST._IExpr>.Default());
    public static RAST._IFn Default() {
      return theDefault;
    }
    private static readonly Dafny.TypeDescriptor<RAST._IFn> _TYPE = new Dafny.TypeDescriptor<RAST._IFn>(RAST.Fn.Default());
    public static Dafny.TypeDescriptor<RAST._IFn> _TypeDescriptor() {
      return _TYPE;
    }
    public static _IFn create(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return new Fn(name, typeParams, formals, returnType, @where, body);
    }
    public static _IFn create_Fn(Dafny.ISequence<Dafny.Rune> name, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, Dafny.ISequence<RAST._IFormal> formals, Std.Wrappers._IOption<RAST._IType> returnType, Dafny.ISequence<Dafny.Rune> @where, Std.Wrappers._IOption<RAST._IExpr> body) {
      return create(name, typeParams, formals, returnType, @where, body);
    }
    public bool is_Fn { get { return true; } }
    public Dafny.ISequence<Dafny.Rune> dtor_name {
      get {
        return this._name;
      }
    }
    public Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> dtor_typeParams {
      get {
        return this._typeParams;
      }
    }
    public Dafny.ISequence<RAST._IFormal> dtor_formals {
      get {
        return this._formals;
      }
    }
    public Std.Wrappers._IOption<RAST._IType> dtor_returnType {
      get {
        return this._returnType;
      }
    }
    public Dafny.ISequence<Dafny.Rune> dtor_where {
      get {
        return this._where;
      }
    }
    public Std.Wrappers._IOption<RAST._IExpr> dtor_body {
      get {
        return this._body;
      }
    }
    public Dafny.ISequence<Dafny.Rune> _ToString(Dafny.ISequence<Dafny.Rune> ind) {
      var _pat_let_tv4 = ind;
      var _pat_let_tv5 = ind;
      var _pat_let_tv6 = ind;
      var _pat_let_tv7 = ind;
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn "), (this).dtor_name), RAST.TypeParam.ToStringMultiple((this).dtor_typeParams, ind)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), RAST.__default.SeqToString<RAST._IFormal>((this).dtor_formals, Dafny.Helpers.Id<Func<Dafny.ISequence<Dafny.Rune>, Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>>>((_834_ind) => ((System.Func<RAST._IFormal, Dafny.ISequence<Dafny.Rune>>)((_835_formal) => {
        return (_835_formal)._ToString(_834_ind);
      })))(ind), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), ((System.Func<Std.Wrappers._IOption<RAST._IType>, Dafny.ISequence<Dafny.Rune>>)((_source26) => {
        if (_source26.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
        } else {
          RAST._IType _836___mcc_h0 = _source26.dtor_value;
          RAST._IType _837_t = _836___mcc_h0;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" -> "), (_837_t)._ToString(_pat_let_tv4));
        }
      }))((this).dtor_returnType)), ((((this).dtor_where).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"), ind), RAST.__default.IND), (this).dtor_where)))), ((System.Func<Std.Wrappers._IOption<RAST._IExpr>, Dafny.ISequence<Dafny.Rune>>)((_source27) => {
        if (_source27.is_None) {
          return Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";");
        } else {
          RAST._IExpr _838___mcc_h2 = _source27.dtor_value;
          RAST._IExpr _839_body = _838___mcc_h2;
          return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"), _pat_let_tv5), RAST.__default.IND), (_839_body)._ToString(Dafny.Sequence<Dafny.Rune>.Concat(_pat_let_tv6, RAST.__default.IND))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), _pat_let_tv7), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        }
      }))((this).dtor_body));
    }
  }
} // end of namespace RAST
namespace DCOMP {

  public partial class __default {
    public static Dafny.ISequence<Dafny.Rune> runtime(Dafny.ISequence<Dafny.Rune> suffix) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime"), suffix);
    }
    public static bool is__tuple__numeric(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(2))) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(BigInteger.One)))) && (((new BigInteger((i).Count)) == (new BigInteger(2))) || (((new BigInteger((i).Count)) == (new BigInteger(3))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(2))))));
    }
    public static bool has__special(Dafny.ISequence<Dafny.Rune> i) {
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return false;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('#'))) {
        return true;
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        if ((new BigInteger(2)) <= (new BigInteger((i).Count))) {
          if (((i).Select(BigInteger.One)) != (new Dafny.Rune('_'))) {
            return true;
          } else {
            Dafny.ISequence<Dafny.Rune> _in111 = (i).Drop(new BigInteger(2));
            i = _in111;
            goto TAIL_CALL_START;
          }
        } else {
          return true;
        }
      } else {
        Dafny.ISequence<Dafny.Rune> _in112 = (i).Drop(BigInteger.One);
        i = _in112;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _840___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_840___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_'))) {
        _840___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_840___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_"));
        Dafny.ISequence<Dafny.Rune> _in113 = (i).Drop(new BigInteger(2));
        i = _in113;
        goto TAIL_CALL_START;
      } else {
        _840___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_840___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in114 = (i).Drop(BigInteger.One);
        i = _in114;
        goto TAIL_CALL_START;
      }
    }
    public static Dafny.ISequence<Dafny.Rune> replaceDots(Dafny.ISequence<Dafny.Rune> i) {
      Dafny.ISequence<Dafny.Rune> _841___accumulator = Dafny.Sequence<Dafny.Rune>.FromElements();
    TAIL_CALL_START:;
      if ((new BigInteger((i).Count)).Sign == 0) {
        return Dafny.Sequence<Dafny.Rune>.Concat(_841___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
      } else if (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('.'))) {
        _841___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_841___accumulator, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_d"));
        Dafny.ISequence<Dafny.Rune> _in115 = (i).Drop(BigInteger.One);
        i = _in115;
        goto TAIL_CALL_START;
      } else {
        _841___accumulator = Dafny.Sequence<Dafny.Rune>.Concat(_841___accumulator, Dafny.Sequence<Dafny.Rune>.FromElements((i).Select(BigInteger.Zero)));
        Dafny.ISequence<Dafny.Rune> _in116 = (i).Drop(BigInteger.One);
        i = _in116;
        goto TAIL_CALL_START;
      }
    }
    public static bool is__tuple__builder(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)) >= (new BigInteger(9))) && (((i).Take(new BigInteger(8))).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("___hMake")))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(8))))) && (((new BigInteger((i).Count)) == (new BigInteger(9))) || (((new BigInteger((i).Count)) == (new BigInteger(10))) && ((Dafny.Sequence<Dafny.Rune>.UnicodeFromString("0123456789")).Contains((i).Select(new BigInteger(9))))));
    }
    public static Dafny.ISequence<Dafny.Rune> better__tuple__builder__name(Dafny.ISequence<Dafny.Rune> i) {
      return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_T"), (i).Drop(new BigInteger(8)));
    }
    public static bool is__dafny__generated__id(Dafny.ISequence<Dafny.Rune> i) {
      return ((((new BigInteger((i).Count)).Sign == 1) && (((i).Select(BigInteger.Zero)) == (new Dafny.Rune('_')))) && (!(DCOMP.__default.has__special((i).Drop(BigInteger.One))))) && (!((new BigInteger((i).Count)) >= (new BigInteger(2))) || (((i).Select(BigInteger.One)) != (new Dafny.Rune('T'))));
    }
    public static bool is__idiomatic__rust(Dafny.ISequence<Dafny.Rune> i) {
      return (((new BigInteger((i).Count)).Sign == 1) && (!(DCOMP.__default.has__special(i)))) && (!(DCOMP.__default.reserved__rust).Contains(i));
    }
    public static Dafny.ISequence<Dafny.Rune> escapeIdent(Dafny.ISequence<Dafny.Rune> i) {
      if (DCOMP.__default.is__tuple__numeric(i)) {
        return i;
      } else if (DCOMP.__default.is__tuple__builder(i)) {
        return DCOMP.__default.better__tuple__builder__name(i);
      } else if ((DCOMP.__default.reserved__rust).Contains(i)) {
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#"), i);
      } else if (DCOMP.__default.is__idiomatic__rust(i)) {
        return DCOMP.__default.idiomatic__rust(i);
      } else if (DCOMP.__default.is__dafny__generated__id(i)) {
        return i;
      } else {
        Dafny.ISequence<Dafny.Rune> _842_r = DCOMP.__default.replaceDots(i);
        return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("r#_"), _842_r);
      }
    }
    public static Dafny.ISequence<Dafny.Rune> DafnyErasable {
      get {
        return DCOMP.__default.runtime(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::DafnyErasable"));
      }
    }
    public static Dafny.ISet<Dafny.ISequence<Dafny.Rune>> reserved__rust {
      get {
        return Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("as"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("async"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("await"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("const"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("crate"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("else"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("enum"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fn"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("loop"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("match"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mod"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("mut"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("ref"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("static"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("struct"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("trait"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("union"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsafe"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("use"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("where"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Keywords"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("The"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("abstract"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("become"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("box"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("do"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("final"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("macro"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("override"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("priv"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("try"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("typeof"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unsized"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("virtual"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("yield"));
      }
    }
    public static Dafny.ISequence<Dafny.Rune> IND {
      get {
        return RAST.__default.IND;
      }
    }
  }

  public partial class COMP {
    public COMP() {
    }
    public static RAST._IMod GenModule(DAST._IModule mod, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      RAST._IMod s = RAST.Mod.Default();
      Dafny.ISequence<RAST._IModDecl> _843_body;
      Dafny.ISequence<RAST._IModDecl> _out15;
      _out15 = DCOMP.COMP.GenModuleBody((mod).dtor_body, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((mod).dtor_name)));
      _843_body = _out15;
      s = (((mod).dtor_isExtern) ? (RAST.Mod.create_ExternMod(DCOMP.__default.escapeIdent((mod).dtor_name))) : (RAST.Mod.create_Mod(DCOMP.__default.escapeIdent((mod).dtor_name), _843_body)));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenModuleBody(Dafny.ISequence<DAST._IModuleItem> body, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements();
      BigInteger _844_i;
      _844_i = BigInteger.Zero;
      while ((_844_i) < (new BigInteger((body).Count))) {
        Dafny.ISequence<RAST._IModDecl> _845_generated = Dafny.Sequence<RAST._IModDecl>.Empty;
        DAST._IModuleItem _source28 = (body).Select(_844_i);
        if (_source28.is_Module) {
          DAST._IModule _846___mcc_h0 = _source28.dtor_Module_a0;
          DAST._IModule _847_m = _846___mcc_h0;
          RAST._IMod _848_mm;
          RAST._IMod _out16;
          _out16 = DCOMP.COMP.GenModule(_847_m, containingPath);
          _848_mm = _out16;
          _845_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ModDecl(_848_mm));
        } else if (_source28.is_Class) {
          DAST._IClass _849___mcc_h1 = _source28.dtor_Class_a0;
          DAST._IClass _850_c = _849___mcc_h1;
          Dafny.ISequence<RAST._IModDecl> _out17;
          _out17 = DCOMP.COMP.GenClass(_850_c, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((_850_c).dtor_name)));
          _845_generated = _out17;
        } else if (_source28.is_Trait) {
          DAST._ITrait _851___mcc_h2 = _source28.dtor_Trait_a0;
          DAST._ITrait _852_t = _851___mcc_h2;
          Dafny.ISequence<Dafny.Rune> _853_tt;
          Dafny.ISequence<Dafny.Rune> _out18;
          _out18 = DCOMP.COMP.GenTrait(_852_t, containingPath);
          _853_tt = _out18;
          _845_generated = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_RawDecl(_853_tt));
        } else if (_source28.is_Newtype) {
          DAST._INewtype _854___mcc_h3 = _source28.dtor_Newtype_a0;
          DAST._INewtype _855_n = _854___mcc_h3;
          Dafny.ISequence<RAST._IModDecl> _out19;
          _out19 = DCOMP.COMP.GenNewtype(_855_n);
          _845_generated = _out19;
        } else {
          DAST._IDatatype _856___mcc_h4 = _source28.dtor_Datatype_a0;
          DAST._IDatatype _857_d = _856___mcc_h4;
          Dafny.ISequence<RAST._IModDecl> _out20;
          _out20 = DCOMP.COMP.GenDatatype(_857_d);
          _845_generated = _out20;
        }
        s = Dafny.Sequence<RAST._IModDecl>.Concat(s, _845_generated);
        _844_i = (_844_i) + (BigInteger.One);
      }
      return s;
    }
    public static void GenTypeParameters(Dafny.ISequence<DAST._IType> @params, out Dafny.ISet<DAST._IType> typeParamsSet, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> typeParams, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedTypeParams, out Dafny.ISequence<Dafny.Rune> whereConstraints, out Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> constrainedEraseParams, out Dafny.ISequence<Dafny.Rune> unerasedParams, out Dafny.ISequence<Dafny.Rune> erasedParams) {
      typeParamsSet = Dafny.Set<DAST._IType>.Empty;
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      whereConstraints = Dafny.Sequence<Dafny.Rune>.Empty;
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Empty;
      unerasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      erasedParams = Dafny.Sequence<Dafny.Rune>.Empty;
      typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _858_tpI;
      _858_tpI = BigInteger.Zero;
      if ((new BigInteger((@params).Count)).Sign == 1) {
        whereConstraints = Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where ");
        unerasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        erasedParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_858_tpI) < (new BigInteger((@params).Count))) {
          DAST._IType _859_tp;
          _859_tp = (@params).Select(_858_tpI);
          typeParamsSet = Dafny.Set<DAST._IType>.Union(typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_859_tp));
          Dafny.ISequence<Dafny.Rune> _860_genTp;
          Dafny.ISequence<Dafny.Rune> _out21;
          _out21 = DCOMP.COMP.GenType(_859_tp, false, false);
          _860_genTp = _out21;
          typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_860_genTp));
          Dafny.ISequence<Dafny.Rune> _861_baseConstraints;
          _861_baseConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<"), _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default"));
          constrainedTypeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedTypeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_860_genTp, _861_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static"))));
          whereConstraints = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(whereConstraints, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          constrainedEraseParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(constrainedEraseParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_860_genTp, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _860_genTp), _861_baseConstraints), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + ::dafny_runtime::DafnyUnerasable<")), _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased> + 'static"))));
          unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, _860_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::Erased")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _858_tpI = (_858_tpI) + (BigInteger.One);
        }
        unerasedParams = Dafny.Sequence<Dafny.Rune>.Concat(unerasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        erasedParams = Dafny.Sequence<Dafny.Rune>.Concat(erasedParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
    }
    public static Dafny.ISequence<RAST._IModDecl> GenClass(DAST._IClass c, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> path) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _862_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _863_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _864_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _865_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _866_constrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _867_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _868_erasedParams;
      Dafny.ISet<DAST._IType> _out22;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out23;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out24;
      Dafny.ISequence<Dafny.Rune> _out25;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out26;
      Dafny.ISequence<Dafny.Rune> _out27;
      Dafny.ISequence<Dafny.Rune> _out28;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out22, out _out23, out _out24, out _out25, out _out26, out _out27, out _out28);
      _862_typeParamsSet = _out22;
      _863_sTypeParams = _out23;
      _864_sConstrainedTypeParams = _out24;
      _865_whereConstraints = _out25;
      _866_constrainedEraseParams = _out26;
      _867_unerasedParams = _out27;
      _868_erasedParams = _out28;
      Dafny.ISequence<Dafny.Rune> _869_constrainedTypeParams;
      _869_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_864_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<RAST._IFormal> _870_fields;
      _870_fields = Dafny.Sequence<RAST._IFormal>.FromElements();
      Dafny.ISequence<RAST._IAssignIdentifier> _871_fieldInits;
      _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
      BigInteger _872_fieldI;
      _872_fieldI = BigInteger.Zero;
      while ((_872_fieldI) < (new BigInteger(((c).dtor_fields).Count))) {
        DAST._IField _873_field;
        _873_field = ((c).dtor_fields).Select(_872_fieldI);
        Dafny.ISequence<Dafny.Rune> _874_fieldType;
        Dafny.ISequence<Dafny.Rune> _out29;
        _out29 = DCOMP.COMP.GenType(((_873_field).dtor_formal).dtor_typ, false, false);
        _874_fieldType = _out29;
        _870_fields = Dafny.Sequence<RAST._IFormal>.Concat(_870_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), DCOMP.__default.escapeIdent(((_873_field).dtor_formal).dtor_name)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell<"), _874_fieldType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
        Std.Wrappers._IOption<DAST._IExpression> _source29 = (_873_field).dtor_defaultValue;
        if (_source29.is_None) {
          {
            _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_871_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_873_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new(::std::default::Default::default())")))));
          }
        } else {
          DAST._IExpression _875___mcc_h0 = _source29.dtor_value;
          DAST._IExpression _876_e = _875___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _877_eStr;
            bool _878___v1;
            bool _879___v2;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _880___v3;
            Dafny.ISequence<Dafny.Rune> _out30;
            bool _out31;
            bool _out32;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out33;
            DCOMP.COMP.GenExpr(_876_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out30, out _out31, out _out32, out _out33);
            _877_eStr = _out30;
            _878___v1 = _out31;
            _879___v2 = _out32;
            _880___v3 = _out33;
            _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_871_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent(((_873_field).dtor_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cell::RefCell::new("), _877_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"))))));
          }
        }
        _872_fieldI = (_872_fieldI) + (BigInteger.One);
      }
      BigInteger _881_typeParamI;
      _881_typeParamI = BigInteger.Zero;
      while ((_881_typeParamI) < (new BigInteger(((c).dtor_typeParams).Count))) {
        Dafny.ISequence<Dafny.Rune> _882_tpeGen;
        Dafny.ISequence<Dafny.Rune> _out34;
        _out34 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_881_typeParamI), false, false);
        _882_tpeGen = _out34;
        _870_fields = Dafny.Sequence<RAST._IFormal>.Concat(_870_fields, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_881_typeParamI)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData<"), _882_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
        _871_fieldInits = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_871_fieldInits, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_phantom_type_param_"), Std.Strings.__default.OfNat(_881_typeParamI)), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData")))));
        _881_typeParamI = (_881_typeParamI) + (BigInteger.One);
      }
      RAST._IStruct _883_struct;
      _883_struct = RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), DCOMP.__default.escapeIdent((c).dtor_name), _863_sTypeParams, RAST.Formals.create_NamedFormals(_870_fields));
      Dafny.ISequence<Dafny.Rune> _884_typeParams;
      _884_typeParams = RAST.TypeParam.ToStringMultiple(_863_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(_883_struct));
      Dafny.ISequence<RAST._IImplMember> _885_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _886_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out35;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out36;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(path)), _862_typeParamsSet, out _out35, out _out36);
      _885_implBodyRaw = _out35;
      _886_traitBodies = _out36;
      Dafny.ISequence<RAST._IImplMember> _887_implBody;
      _887_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("new"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(DCOMP.__default.escapeIdent((c).dtor_name), _871_fieldInits))))), _885_implBodyRaw);
      RAST._IImpl _888_i;
      _888_i = RAST.Impl.create_Impl(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), _865_whereConstraints, _887_implBody);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_888_i)));
      if ((new BigInteger(((c).dtor_superClasses).Count)).Sign == 1) {
        BigInteger _889_i;
        _889_i = BigInteger.Zero;
        while ((_889_i) < (new BigInteger(((c).dtor_superClasses).Count))) {
          DAST._IType _890_superClass;
          _890_superClass = ((c).dtor_superClasses).Select(_889_i);
          DAST._IType _source30 = _890_superClass;
          if (_source30.is_Path) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _891___mcc_h1 = _source30.dtor_Path_a0;
            Dafny.ISequence<DAST._IType> _892___mcc_h2 = _source30.dtor_typeArgs;
            DAST._IResolvedType _893___mcc_h3 = _source30.dtor_resolved;
            DAST._IResolvedType _source31 = _893___mcc_h3;
            if (_source31.is_Datatype) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _894___mcc_h7 = _source31.dtor_path;
            } else if (_source31.is_Trait) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _895___mcc_h9 = _source31.dtor_path;
              Dafny.ISequence<DAST._IType> _896_typeArgs = _892___mcc_h2;
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _897_traitPath = _891___mcc_h1;
              {
                Dafny.ISequence<Dafny.Rune> _898_pathStr;
                Dafny.ISequence<Dafny.Rune> _out37;
                _out37 = DCOMP.COMP.GenPath(_897_traitPath);
                _898_pathStr = _out37;
                Dafny.ISequence<Dafny.Rune> _899_typeArgs;
                Dafny.ISequence<Dafny.Rune> _out38;
                _out38 = DCOMP.COMP.GenTypeArgs(_896_typeArgs, false, false);
                _899_typeArgs = _out38;
                Dafny.ISequence<RAST._IImplMember> _900_body;
                _900_body = Dafny.Sequence<RAST._IImplMember>.FromElements();
                if ((_886_traitBodies).Contains(_897_traitPath)) {
                  _900_body = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(_886_traitBodies, _897_traitPath);
                }
                Dafny.ISequence<Dafny.Rune> _901_genSelfPath;
                Dafny.ISequence<Dafny.Rune> _out39;
                _out39 = DCOMP.COMP.GenPath(path);
                _901_genSelfPath = _out39;
                RAST._IModDecl _902_x;
                _902_x = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(_898_pathStr, _899_typeArgs)), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), _901_genSelfPath), _884_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), _865_whereConstraints, _900_body));
                s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(_902_x));
              }
            } else {
              DAST._IType _903___mcc_h11 = _source31.dtor_Newtype_a0;
            }
          } else if (_source30.is_Nullable) {
            DAST._IType _904___mcc_h13 = _source30.dtor_Nullable_a0;
          } else if (_source30.is_Tuple) {
            Dafny.ISequence<DAST._IType> _905___mcc_h15 = _source30.dtor_Tuple_a0;
          } else if (_source30.is_Array) {
            DAST._IType _906___mcc_h17 = _source30.dtor_element;
            BigInteger _907___mcc_h18 = _source30.dtor_dims;
          } else if (_source30.is_Seq) {
            DAST._IType _908___mcc_h21 = _source30.dtor_element;
          } else if (_source30.is_Set) {
            DAST._IType _909___mcc_h23 = _source30.dtor_element;
          } else if (_source30.is_Multiset) {
            DAST._IType _910___mcc_h25 = _source30.dtor_element;
          } else if (_source30.is_Map) {
            DAST._IType _911___mcc_h27 = _source30.dtor_key;
            DAST._IType _912___mcc_h28 = _source30.dtor_value;
          } else if (_source30.is_Arrow) {
            Dafny.ISequence<DAST._IType> _913___mcc_h31 = _source30.dtor_args;
            DAST._IType _914___mcc_h32 = _source30.dtor_result;
          } else if (_source30.is_Primitive) {
            DAST._IPrimitive _915___mcc_h35 = _source30.dtor_Primitive_a0;
          } else if (_source30.is_Passthrough) {
            Dafny.ISequence<Dafny.Rune> _916___mcc_h37 = _source30.dtor_Passthrough_a0;
          } else {
            Dafny.ISequence<Dafny.Rune> _917___mcc_h39 = _source30.dtor_TypeArg_a0;
          }
          _889_i = (_889_i) + (BigInteger.One);
        }
      }
      RAST._IImpl _918_d;
      _918_d = RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), _865_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new()"))))))));
      Dafny.ISequence<RAST._IModDecl> _919_defaultImpl;
      _919_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_918_d));
      RAST._IImpl _920_p;
      _920_p = RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), ((c).dtor_enclosingModule)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")"))))))));
      Dafny.ISequence<RAST._IModDecl> _921_printImpl;
      _921_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_920_p));
      RAST._IImpl _922_pp;
      _922_pp = RAST.Impl.create_ImplFor(_863_sTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::cmp::PartialEq")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("eq"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("other"), RAST.Type.create_Self())), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ptr::eq(self, other)")))))));
      Dafny.ISequence<RAST._IModDecl> _923_ptrPartialEqImpl;
      _923_ptrPartialEqImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(_922_pp));
      RAST._IModDecl _924_ii;
      _924_ii = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_864_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _868_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))))));
      RAST._IModDecl _925_u;
      _925_u = RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_866_constrainedEraseParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _867_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _884_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()));
      Dafny.ISequence<RAST._IModDecl> _926_identEraseImpls;
      _926_identEraseImpls = Dafny.Sequence<RAST._IModDecl>.FromElements(_924_ii, _925_u);
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(s, _919_defaultImpl), _921_printImpl), _923_ptrPartialEqImpl), _926_identEraseImpls);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTrait(DAST._ITrait t, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> containingPath) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      Dafny.ISet<DAST._IType> _927_typeParamsSet;
      _927_typeParamsSet = Dafny.Set<DAST._IType>.FromElements();
      Dafny.ISequence<Dafny.Rune> _928_typeParams;
      _928_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      BigInteger _929_tpI;
      _929_tpI = BigInteger.Zero;
      if ((new BigInteger(((t).dtor_typeParams).Count)).Sign == 1) {
        _928_typeParams = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<");
        while ((_929_tpI) < (new BigInteger(((t).dtor_typeParams).Count))) {
          DAST._IType _930_tp;
          _930_tp = ((t).dtor_typeParams).Select(_929_tpI);
          _927_typeParamsSet = Dafny.Set<DAST._IType>.Union(_927_typeParamsSet, Dafny.Set<DAST._IType>.FromElements(_930_tp));
          Dafny.ISequence<Dafny.Rune> _931_genTp;
          Dafny.ISequence<Dafny.Rune> _out40;
          _out40 = DCOMP.COMP.GenType(_930_tp, false, false);
          _931_genTp = _out40;
          _928_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_928_typeParams, _931_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          _929_tpI = (_929_tpI) + (BigInteger.One);
        }
        _928_typeParams = Dafny.Sequence<Dafny.Rune>.Concat(_928_typeParams, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _932_fullPath;
      _932_fullPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(containingPath, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((t).dtor_name));
      Dafny.ISequence<RAST._IImplMember> _933_implBody;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _934___v6;
      Dafny.ISequence<RAST._IImplMember> _out41;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out42;
      DCOMP.COMP.GenClassImplBody((t).dtor_body, true, DAST.Type.create_Path(_932_fullPath, Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Trait(_932_fullPath)), _927_typeParamsSet, out _out41, out _out42);
      _933_implBody = _out41;
      _934___v6 = _out42;
      s = (RAST.ModDecl.create_TraitDecl(RAST.Trait.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((t).dtor_name), _928_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), _933_implBody)))._ToString(DCOMP.__default.IND);
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenNewtype(DAST._INewtype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _935_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _936_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _937_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _938_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _939___v7;
      Dafny.ISequence<Dafny.Rune> _940___v8;
      Dafny.ISequence<Dafny.Rune> _941___v9;
      Dafny.ISet<DAST._IType> _out43;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out44;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out45;
      Dafny.ISequence<Dafny.Rune> _out46;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out47;
      Dafny.ISequence<Dafny.Rune> _out48;
      Dafny.ISequence<Dafny.Rune> _out49;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out43, out _out44, out _out45, out _out46, out _out47, out _out48, out _out49);
      _935_typeParamsSet = _out43;
      _936_sTypeParams = _out44;
      _937_sConstrainedTypeParams = _out45;
      _938_whereConstraints = _out46;
      _939___v7 = _out47;
      _940___v8 = _out48;
      _941___v9 = _out49;
      Dafny.ISequence<Dafny.Rune> _942_typeParams;
      _942_typeParams = RAST.TypeParam.ToStringMultiple(_936_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _943_constrainedTypeParams;
      _943_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_937_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(RAST.__default.IND, RAST.__default.IND));
      Dafny.ISequence<Dafny.Rune> _944_underlyingType;
      Dafny.ISequence<Dafny.Rune> _out50;
      _out50 = DCOMP.COMP.GenType((c).dtor_base, false, false);
      _944_underlyingType = _out50;
      s = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_StructDecl(RAST.Struct.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(Clone, PartialEq)]"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[repr(transparent)]")), DCOMP.__default.escapeIdent((c).dtor_name), _936_sTypeParams, RAST.Formals.create_NamelessFormals(Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("pub "), _944_underlyingType)))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), _944_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), _944_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _942_typeParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements()))));
      Dafny.ISequence<Dafny.Rune> _945_fnBody;
      _945_fnBody = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Std.Wrappers._IOption<DAST._IExpression> _source32 = (c).dtor_witnessExpr;
      if (_source32.is_None) {
        {
          _945_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_945_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(::std::default::Default::default())"));
        }
      } else {
        DAST._IExpression _946___mcc_h0 = _source32.dtor_value;
        DAST._IExpression _947_e = _946___mcc_h0;
        {
          Dafny.ISequence<Dafny.Rune> _948_eStr;
          bool _949___v10;
          bool _950___v11;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _951___v12;
          Dafny.ISequence<Dafny.Rune> _out51;
          bool _out52;
          bool _out53;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out54;
          DCOMP.COMP.GenExpr(_947_e, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None(), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out51, out _out52, out _out53, out _out54);
          _948_eStr = _out51;
          _949___v10 = _out52;
          _950___v11 = _out53;
          _951___v12 = _out54;
          _945_fnBody = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_945_fnBody, DCOMP.__default.escapeIdent((c).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _948_eStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
        }
      }
      RAST._IImplMember _952_body;
      _952_body = RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_945_fnBody))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), _938_whereConstraints, Dafny.Sequence<RAST._IImplMember>.FromElements(_952_body)))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print(&self.0, _formatter, in_seq)"))))))))));
      s = Dafny.Sequence<RAST._IModDecl>.Concat(s, Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_937_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _942_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Target = "), _944_underlyingType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"))), RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("deref"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&Self::Target"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&self.0"))))))))));
      return s;
    }
    public static Dafny.ISequence<RAST._IModDecl> GenDatatype(DAST._IDatatype c) {
      Dafny.ISequence<RAST._IModDecl> s = Dafny.Sequence<RAST._IModDecl>.Empty;
      Dafny.ISet<DAST._IType> _953_typeParamsSet;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _954_sTypeParams;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _955_sConstrainedTypeParams;
      Dafny.ISequence<Dafny.Rune> _956_whereConstraints;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _957_sConstrainedEraseParams;
      Dafny.ISequence<Dafny.Rune> _958_unerasedParams;
      Dafny.ISequence<Dafny.Rune> _959_erasedParams;
      Dafny.ISet<DAST._IType> _out55;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out56;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out57;
      Dafny.ISequence<Dafny.Rune> _out58;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _out59;
      Dafny.ISequence<Dafny.Rune> _out60;
      Dafny.ISequence<Dafny.Rune> _out61;
      DCOMP.COMP.GenTypeParameters((c).dtor_typeParams, out _out55, out _out56, out _out57, out _out58, out _out59, out _out60, out _out61);
      _953_typeParamsSet = _out55;
      _954_sTypeParams = _out56;
      _955_sConstrainedTypeParams = _out57;
      _956_whereConstraints = _out58;
      _957_sConstrainedEraseParams = _out59;
      _958_unerasedParams = _out60;
      _959_erasedParams = _out61;
      Dafny.ISequence<Dafny.Rune> _960_typeParams;
      _960_typeParams = RAST.TypeParam.ToStringMultiple(_954_sTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _961_constrainedTypeParams;
      _961_constrainedTypeParams = RAST.TypeParam.ToStringMultiple(_955_sConstrainedTypeParams, Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.IND, DCOMP.__default.IND));
      Dafny.ISequence<Dafny.Rune> _962_constrainedEraseParams;
      _962_constrainedEraseParams = RAST.TypeParam.ToStringMultiple(_957_sConstrainedEraseParams, DCOMP.__default.IND);
      Dafny.ISequence<RAST._IEnumCase> _963_ctors;
      _963_ctors = Dafny.Sequence<RAST._IEnumCase>.FromElements();
      BigInteger _964_i;
      _964_i = BigInteger.Zero;
      while ((_964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _965_ctor;
        _965_ctor = ((c).dtor_ctors).Select(_964_i);
        Dafny.ISequence<RAST._IFormal> _966_ctorArgs;
        _966_ctorArgs = Dafny.Sequence<RAST._IFormal>.FromElements();
        BigInteger _967_j;
        _967_j = BigInteger.Zero;
        while ((_967_j) < (new BigInteger(((_965_ctor).dtor_args).Count))) {
          DAST._IFormal _968_formal;
          _968_formal = ((_965_ctor).dtor_args).Select(_967_j);
          Dafny.ISequence<Dafny.Rune> _969_formalType;
          Dafny.ISequence<Dafny.Rune> _out62;
          _out62 = DCOMP.COMP.GenType((_968_formal).dtor_typ, false, false);
          _969_formalType = _out62;
          if ((c).dtor_isCo) {
            _966_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_966_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_968_formal).dtor_name), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::LazyFieldWrapper<"), _969_formalType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))))));
          } else {
            _966_ctorArgs = Dafny.Sequence<RAST._IFormal>.Concat(_966_ctorArgs, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_968_formal).dtor_name), RAST.Type.create_RawType(_969_formalType))));
          }
          _967_j = (_967_j) + (BigInteger.One);
        }
        _963_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_963_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(DCOMP.__default.escapeIdent((_965_ctor).dtor_name), RAST.Formals.create_NamedFormals(_966_ctorArgs))));
        _964_i = (_964_i) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _970_selfPath;
      _970_selfPath = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((c).dtor_name);
      Dafny.ISequence<RAST._IImplMember> _971_implBodyRaw;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _972_traitBodies;
      Dafny.ISequence<RAST._IImplMember> _out63;
      Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> _out64;
      DCOMP.COMP.GenClassImplBody((c).dtor_body, false, DAST.Type.create_Path(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<DAST._IType>.FromElements(), DAST.ResolvedType.create_Datatype(_970_selfPath)), _953_typeParamsSet, out _out63, out _out64);
      _971_implBodyRaw = _out63;
      _972_traitBodies = _out64;
      Dafny.ISequence<RAST._IImplMember> _973_implBody;
      _973_implBody = _971_implBodyRaw;
      _964_i = BigInteger.Zero;
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _974_emittedFields;
      _974_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      while ((_964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _975_ctor;
        _975_ctor = ((c).dtor_ctors).Select(_964_i);
        BigInteger _976_j;
        _976_j = BigInteger.Zero;
        while ((_976_j) < (new BigInteger(((_975_ctor).dtor_args).Count))) {
          DAST._IFormal _977_formal;
          _977_formal = ((_975_ctor).dtor_args).Select(_976_j);
          if (!((_974_emittedFields).Contains((_977_formal).dtor_name))) {
            _974_emittedFields = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_974_emittedFields, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_977_formal).dtor_name));
            Dafny.ISequence<Dafny.Rune> _978_formalType;
            Dafny.ISequence<Dafny.Rune> _out65;
            _out65 = DCOMP.COMP.GenType((_977_formal).dtor_typ, false, false);
            _978_formalType = _out65;
            Dafny.ISequence<RAST._IMatchCase> _979_cases;
            _979_cases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
            BigInteger _980_k;
            _980_k = BigInteger.Zero;
            while ((_980_k) < (new BigInteger(((c).dtor_ctors).Count))) {
              DAST._IDatatypeCtor _981_ctor2;
              _981_ctor2 = ((c).dtor_ctors).Select(_980_k);
              Dafny.ISequence<Dafny.Rune> _982_pattern;
              _982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_981_ctor2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
              Dafny.ISequence<Dafny.Rune> _983_rhs = Dafny.Sequence<Dafny.Rune>.Empty;
              BigInteger _984_l;
              _984_l = BigInteger.Zero;
              bool _985_hasMatchingField;
              _985_hasMatchingField = false;
              while ((_984_l) < (new BigInteger(((_981_ctor2).dtor_args).Count))) {
                DAST._IFormal _986_formal2;
                _986_formal2 = ((_981_ctor2).dtor_args).Select(_984_l);
                if (((_977_formal).dtor_name).Equals((_986_formal2).dtor_name)) {
                  _985_hasMatchingField = true;
                }
                _982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_982_pattern, DCOMP.__default.escapeIdent((_986_formal2).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                _984_l = (_984_l) + (BigInteger.One);
              }
              _982_pattern = Dafny.Sequence<Dafny.Rune>.Concat(_982_pattern, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
              if (_985_hasMatchingField) {
                if ((c).dtor_isCo) {
                  _983_rhs = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&"), DCOMP.__default.escapeIdent((_977_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0)"));
                } else {
                  _983_rhs = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_977_formal).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
                }
              } else {
                _983_rhs = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"field does not exist on this variant\")");
              }
              RAST._IMatchCase _987_ctorMatch;
              _987_ctorMatch = RAST.MatchCase.create(_982_pattern, RAST.Expr.create_RawExpr(_983_rhs));
              _979_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_979_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(_987_ctorMatch));
              _980_k = (_980_k) + (BigInteger.One);
            }
            if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
              _979_cases = Dafny.Sequence<RAST._IMatchCase>.Concat(_979_cases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!()")))));
            }
            RAST._IExpr _988_methodBody;
            _988_methodBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _979_cases);
            _973_implBody = Dafny.Sequence<RAST._IImplMember>.Concat(_973_implBody, Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PUB, RAST.Fn.create(DCOMP.__default.escapeIdent((_977_formal).dtor_name), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _978_formalType))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_988_methodBody)))));
          }
          _976_j = (_976_j) + (BigInteger.One);
        }
        _964_i = (_964_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        BigInteger _989_typeI;
        _989_typeI = BigInteger.Zero;
        Dafny.ISequence<RAST._IType> _990_types;
        _990_types = Dafny.Sequence<RAST._IType>.FromElements();
        while ((_989_typeI) < (new BigInteger(((c).dtor_typeParams).Count))) {
          Dafny.ISequence<Dafny.Rune> _991_genTp;
          Dafny.ISequence<Dafny.Rune> _out66;
          _out66 = DCOMP.COMP.GenType(((c).dtor_typeParams).Select(_989_typeI), false, false);
          _991_genTp = _out66;
          _990_types = Dafny.Sequence<RAST._IType>.Concat(_990_types, Dafny.Sequence<RAST._IType>.FromElements(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::marker::PhantomData::<"), _991_genTp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">")))));
          _989_typeI = (_989_typeI) + (BigInteger.One);
        }
        _963_ctors = Dafny.Sequence<RAST._IEnumCase>.Concat(_963_ctors, Dafny.Sequence<RAST._IEnumCase>.FromElements(RAST.EnumCase.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_PhantomVariant"), RAST.Formals.create_NamelessFormals(_990_types))));
      }
      Dafny.ISequence<RAST._IModDecl> _992_enumBody;
      _992_enumBody = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_EnumDecl(RAST.Enum.create(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#[derive(PartialEq)]")), DCOMP.__default.escapeIdent((c).dtor_name), _954_sTypeParams, _963_ctors)), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_Impl(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), _956_whereConstraints, _973_implBody)));
      Dafny.ISequence<RAST._IModDecl> _993_identEraseImpls;
      _993_identEraseImpls = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_RawImplMember(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("type Erased = "), DCOMP.__default.escapeIdent((c).dtor_name)), _959_erasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";")))))), RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_957_sConstrainedEraseParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable<"), DCOMP.__default.escapeIdent((c).dtor_name)), _958_unerasedParams), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"))), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements())));
      _964_i = BigInteger.Zero;
      Dafny.ISequence<RAST._IMatchCase> _994_printImplBodyCases;
      _994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.FromElements();
      while ((_964_i) < (new BigInteger(((c).dtor_ctors).Count))) {
        DAST._IDatatypeCtor _995_ctor;
        _995_ctor = ((c).dtor_ctors).Select(_964_i);
        Dafny.ISequence<Dafny.Rune> _996_ctorMatch;
        _996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((_995_ctor).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" { "));
        Dafny.ISequence<Dafny.Rune> _997_modulePrefix;
        _997_modulePrefix = (((((c).dtor_enclosingModule)).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_module"))) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")) : (Dafny.Sequence<Dafny.Rune>.Concat(((c).dtor_enclosingModule), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("."))));
        RAST._IExpr _998_printRhs;
        _998_printRhs = RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \""), _997_modulePrefix), (c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent((_995_ctor).dtor_name)), (((_995_ctor).dtor_hasAnyArgs) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(\")?")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\")?")))));
        BigInteger _999_j;
        _999_j = BigInteger.Zero;
        while ((_999_j) < (new BigInteger(((_995_ctor).dtor_args).Count))) {
          DAST._IFormal _1000_formal;
          _1000_formal = ((_995_ctor).dtor_args).Select(_999_j);
          _996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_996_ctorMatch, DCOMP.__default.escapeIdent((_1000_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          if ((_999_j).Sign == 1) {
            _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \", \")?")));
          }
          _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint::fmt_print("), DCOMP.__default.escapeIdent((_1000_formal).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", _formatter, false)?"))));
          _999_j = (_999_j) + (BigInteger.One);
        }
        _996_ctorMatch = Dafny.Sequence<Dafny.Rune>.Concat(_996_ctorMatch, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
        if ((_995_ctor).dtor_hasAnyArgs) {
          _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("write!(_formatter, \")\")?")));
        }
        _998_printRhs = (_998_printRhs).Then(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Ok(())")));
        _994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_994_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), _996_ctorMatch), RAST.Expr.create_Block(_998_printRhs))));
        _964_i = (_964_i) + (BigInteger.One);
      }
      if ((new BigInteger(((c).dtor_typeParams).Count)).Sign == 1) {
        _994_printImplBodyCases = Dafny.Sequence<RAST._IMatchCase>.Concat(_994_printImplBodyCases, Dafny.Sequence<RAST._IMatchCase>.FromElements(RAST.MatchCase.create(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::_PhantomVariant(..)")), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{panic!()}")))));
      }
      RAST._IExpr _1001_printImplBody;
      _1001_printImplBody = RAST.Expr.create_Match(RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")), _994_printImplBodyCases);
      Dafny.ISequence<RAST._IModDecl> _1002_printImpl;
      _1002_printImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyPrint")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("fmt_print"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self, RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_formatter"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&mut ::std::fmt::Formatter"))), RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_in_seq"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool")))), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("std::fmt::Result"))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(_1001_printImplBody)))))));
      Dafny.ISequence<RAST._IModDecl> _1003_defaultImpl;
      _1003_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements();
      if ((new BigInteger(((c).dtor_ctors).Count)).Sign == 1) {
        _964_i = BigInteger.Zero;
        Dafny.ISequence<Dafny.Rune> _1004_structName;
        _1004_structName = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_name));
        Dafny.ISequence<RAST._IAssignIdentifier> _1005_structAssignments;
        _1005_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.FromElements();
        while ((_964_i) < (new BigInteger(((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Count))) {
          DAST._IFormal _1006_formal;
          _1006_formal = ((((c).dtor_ctors).Select(BigInteger.Zero)).dtor_args).Select(_964_i);
          _1005_structAssignments = Dafny.Sequence<RAST._IAssignIdentifier>.Concat(_1005_structAssignments, Dafny.Sequence<RAST._IAssignIdentifier>.FromElements(RAST.AssignIdentifier.create(DCOMP.__default.escapeIdent((_1006_formal).dtor_name), RAST.Expr.create_RawExpr(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default::default()")))));
          _964_i = (_964_i) + (BigInteger.One);
        }
        _1003_defaultImpl = Dafny.Sequence<RAST._IModDecl>.FromElements(RAST.ModDecl.create_ImplDecl(RAST.Impl.create_ImplFor(_955_sConstrainedTypeParams, RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::default::Default")), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(DCOMP.__default.escapeIdent((c).dtor_name), _960_typeParams)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Dafny.Sequence<RAST._IImplMember>.FromElements(RAST.ImplMember.create_FnDecl(RAST.__default.PRIV, RAST.Fn.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("default"), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), Dafny.Sequence<RAST._IFormal>.FromElements(), Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_SelfOwned()), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_StructBuild(_1004_structName, _1005_structAssignments))))))));
      }
      s = Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(Dafny.Sequence<RAST._IModDecl>.Concat(_992_enumBody, _993_identEraseImpls), _1002_printImpl), _1003_defaultImpl);
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenPath(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      if ((new BigInteger((p).Count)).Sign == 0) {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Self");
        return s;
      } else {
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("super::");
        BigInteger _1007_i;
        _1007_i = BigInteger.Zero;
        while ((_1007_i) < (new BigInteger((p).Count))) {
          if ((_1007_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(((p).Select(_1007_i))));
          _1007_i = (_1007_i) + (BigInteger.One);
        }
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenTypeArgs(Dafny.ISequence<DAST._IType> args, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      if ((new BigInteger((args).Count)).Sign == 1) {
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
        BigInteger _1008_i;
        _1008_i = BigInteger.Zero;
        while ((_1008_i) < (new BigInteger((args).Count))) {
          if ((_1008_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1009_genTp;
          Dafny.ISequence<Dafny.Rune> _out67;
          _out67 = DCOMP.COMP.GenType((args).Select(_1008_i), inBinding, inFn);
          _1009_genTp = _out67;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1009_genTp);
          _1008_i = (_1008_i) + (BigInteger.One);
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> GenType(DAST._IType c, bool inBinding, bool inFn) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      DAST._IType _source33 = c;
      if (_source33.is_Path) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1010___mcc_h0 = _source33.dtor_Path_a0;
        Dafny.ISequence<DAST._IType> _1011___mcc_h1 = _source33.dtor_typeArgs;
        DAST._IResolvedType _1012___mcc_h2 = _source33.dtor_resolved;
        DAST._IResolvedType _1013_resolved = _1012___mcc_h2;
        Dafny.ISequence<DAST._IType> _1014_args = _1011___mcc_h1;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1015_p = _1010___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _out68;
        _out68 = DCOMP.COMP.GenPath(_1015_p);
        s = _out68;
        Dafny.ISequence<Dafny.Rune> _1016_typeArgs;
        Dafny.ISequence<Dafny.Rune> _out69;
        _out69 = DCOMP.COMP.GenTypeArgs(_1014_args, inBinding, inFn);
        _1016_typeArgs = _out69;
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1016_typeArgs);
        DAST._IResolvedType _source34 = _1013_resolved;
        if (_source34.is_Datatype) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1017___mcc_h18 = _source34.dtor_path;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
        } else if (_source34.is_Trait) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1018___mcc_h20 = _source34.dtor_path;
          if ((_1015_p).Equals(Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_System"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("object")))) {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<dyn ::std::any::Any>");
          } else {
            if (inBinding) {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_");
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("impl "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
            }
          }
        } else {
          DAST._IType _1019___mcc_h22 = _source34.dtor_Newtype_a0;
        }
      } else if (_source33.is_Nullable) {
        DAST._IType _1020___mcc_h3 = _source33.dtor_Nullable_a0;
        DAST._IType _1021_inner = _1020___mcc_h3;
        Dafny.ISequence<Dafny.Rune> _1022_innerStr;
        Dafny.ISequence<Dafny.Rune> _out70;
        _out70 = DCOMP.COMP.GenType(_1021_inner, inBinding, inFn);
        _1022_innerStr = _out70;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::option::Option<"), _1022_innerStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source33.is_Tuple) {
        Dafny.ISequence<DAST._IType> _1023___mcc_h4 = _source33.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IType> _1024_types = _1023___mcc_h4;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
        BigInteger _hi4 = new BigInteger((_1024_types).Count);
        for (BigInteger _1025_i = BigInteger.Zero; _1025_i < _hi4; _1025_i++) {
          if ((_1025_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
          }
          Dafny.ISequence<Dafny.Rune> _1026_generated;
          Dafny.ISequence<Dafny.Rune> _out71;
          _out71 = DCOMP.COMP.GenType((_1024_types).Select(_1025_i), inBinding, inFn);
          _1026_generated = _out71;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1026_generated), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      } else if (_source33.is_Array) {
        DAST._IType _1027___mcc_h5 = _source33.dtor_element;
        BigInteger _1028___mcc_h6 = _source33.dtor_dims;
        BigInteger _1029_dims = _1028___mcc_h6;
        DAST._IType _1030_element = _1027___mcc_h5;
        Dafny.ISequence<Dafny.Rune> _1031_elemStr;
        Dafny.ISequence<Dafny.Rune> _out72;
        _out72 = DCOMP.COMP.GenType(_1030_element, inBinding, inFn);
        _1031_elemStr = _out72;
        s = _1031_elemStr;
        BigInteger _hi5 = _1029_dims;
        for (BigInteger _1032_i = BigInteger.Zero; _1032_i < _hi5; _1032_i++) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc<::std::cell::RefCell<::std::vec::Vec<"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>>"));
        }
      } else if (_source33.is_Seq) {
        DAST._IType _1033___mcc_h7 = _source33.dtor_element;
        DAST._IType _1034_element = _1033___mcc_h7;
        Dafny.ISequence<Dafny.Rune> _1035_elemStr;
        Dafny.ISequence<Dafny.Rune> _out73;
        _out73 = DCOMP.COMP.GenType(_1034_element, inBinding, inFn);
        _1035_elemStr = _out73;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::vec::Vec<"), _1035_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source33.is_Set) {
        DAST._IType _1036___mcc_h8 = _source33.dtor_element;
        DAST._IType _1037_element = _1036___mcc_h8;
        Dafny.ISequence<Dafny.Rune> _1038_elemStr;
        Dafny.ISequence<Dafny.Rune> _out74;
        _out74 = DCOMP.COMP.GenType(_1037_element, inBinding, inFn);
        _1038_elemStr = _out74;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashSet<"), _1038_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source33.is_Multiset) {
        DAST._IType _1039___mcc_h9 = _source33.dtor_element;
        DAST._IType _1040_element = _1039___mcc_h9;
        Dafny.ISequence<Dafny.Rune> _1041_elemStr;
        Dafny.ISequence<Dafny.Rune> _out75;
        _out75 = DCOMP.COMP.GenType(_1040_element, inBinding, inFn);
        _1041_elemStr = _out75;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1041_elemStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", u64>"));
      } else if (_source33.is_Map) {
        DAST._IType _1042___mcc_h10 = _source33.dtor_key;
        DAST._IType _1043___mcc_h11 = _source33.dtor_value;
        DAST._IType _1044_value = _1043___mcc_h11;
        DAST._IType _1045_key = _1042___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1046_keyStr;
        Dafny.ISequence<Dafny.Rune> _out76;
        _out76 = DCOMP.COMP.GenType(_1045_key, inBinding, inFn);
        _1046_keyStr = _out76;
        Dafny.ISequence<Dafny.Rune> _1047_valueStr;
        Dafny.ISequence<Dafny.Rune> _out77;
        _out77 = DCOMP.COMP.GenType(_1044_value, inBinding, inFn);
        _1047_valueStr = _out77;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::collections::HashMap<"), _1046_keyStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _1047_valueStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
      } else if (_source33.is_Arrow) {
        Dafny.ISequence<DAST._IType> _1048___mcc_h12 = _source33.dtor_args;
        DAST._IType _1049___mcc_h13 = _source33.dtor_result;
        DAST._IType _1050_result = _1049___mcc_h13;
        Dafny.ISequence<DAST._IType> _1051_args = _1048___mcc_h12;
        s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper<::std::rc::Rc<dyn ::std::ops::Fn(");
        BigInteger _hi6 = new BigInteger((_1051_args).Count);
        for (BigInteger _1052_i = BigInteger.Zero; _1052_i < _hi6; _1052_i++) {
          if ((_1052_i).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1053_generated;
          Dafny.ISequence<Dafny.Rune> _out78;
          _out78 = DCOMP.COMP.GenType((_1051_args).Select(_1052_i), inBinding, true);
          _1053_generated = _out78;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _1053_generated);
        }
        Dafny.ISequence<Dafny.Rune> _1054_resultType;
        Dafny.ISequence<Dafny.Rune> _out79;
        _out79 = DCOMP.COMP.GenType(_1050_result, inBinding, (inFn) || (inBinding));
        _1054_resultType = _out79;
        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _1054_resultType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" + 'static>>"));
      } else if (_source33.is_Primitive) {
        DAST._IPrimitive _1055___mcc_h14 = _source33.dtor_Primitive_a0;
        DAST._IPrimitive _1056_p = _1055___mcc_h14;
        DAST._IPrimitive _source35 = _1056_p;
        if (_source35.is_Int) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt");
        } else if (_source35.is_Real) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational");
        } else if (_source35.is_String) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Vec<char>");
        } else if (_source35.is_Bool) {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("bool");
        } else {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char");
        }
      } else if (_source33.is_Passthrough) {
        Dafny.ISequence<Dafny.Rune> _1057___mcc_h15 = _source33.dtor_Passthrough_a0;
        Dafny.ISequence<Dafny.Rune> _1058_v = _1057___mcc_h15;
        s = _1058_v;
      } else {
        Dafny.ISequence<Dafny.Rune> _1059___mcc_h16 = _source33.dtor_TypeArg_a0;
        Dafny.ISequence<Dafny.Rune> _source36 = _1059___mcc_h16;
        Dafny.ISequence<Dafny.Rune> _1060___mcc_h17 = _source36;
        Dafny.ISequence<Dafny.Rune> _1061_name = _1060___mcc_h17;
        s = DCOMP.__default.escapeIdent(_1061_name);
      }
      return s;
    }
    public static void GenClassImplBody(Dafny.ISequence<DAST._IMethod> body, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams, out Dafny.ISequence<RAST._IImplMember> s, out Dafny.IMap<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>> traitBodies) {
      s = Dafny.Sequence<RAST._IImplMember>.Empty;
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Empty;
      s = Dafny.Sequence<RAST._IImplMember>.FromElements();
      traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements();
      BigInteger _1062_i;
      _1062_i = BigInteger.Zero;
      while ((_1062_i) < (new BigInteger((body).Count))) {
        DAST._IMethod _source37 = (body).Select(_1062_i);
        DAST._IMethod _1063___mcc_h0 = _source37;
        DAST._IMethod _1064_m = _1063___mcc_h0;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source38 = (_1064_m).dtor_overridingPath;
          if (_source38.is_None) {
            {
              RAST._IImplMember _1065_generated;
              RAST._IImplMember _out80;
              _out80 = DCOMP.COMP.GenMethod(_1064_m, forTrait, enclosingType, enclosingTypeParams);
              _1065_generated = _out80;
              s = Dafny.Sequence<RAST._IImplMember>.Concat(s, Dafny.Sequence<RAST._IImplMember>.FromElements(_1065_generated));
            }
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1066___mcc_h1 = _source38.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1067_p = _1066___mcc_h1;
            {
              Dafny.ISequence<RAST._IImplMember> _1068_existing;
              _1068_existing = Dafny.Sequence<RAST._IImplMember>.FromElements();
              if ((traitBodies).Contains(_1067_p)) {
                _1068_existing = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Select(traitBodies, _1067_p);
              }
              RAST._IImplMember _1069_genMethod;
              RAST._IImplMember _out81;
              _out81 = DCOMP.COMP.GenMethod(_1064_m, true, enclosingType, enclosingTypeParams);
              _1069_genMethod = _out81;
              _1068_existing = Dafny.Sequence<RAST._IImplMember>.Concat(_1068_existing, Dafny.Sequence<RAST._IImplMember>.FromElements(_1069_genMethod));
              traitBodies = Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.Merge(traitBodies, Dafny.Map<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>.FromElements(new Dafny.Pair<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<RAST._IImplMember>>(_1067_p, _1068_existing)));
            }
          }
        }
        _1062_i = (_1062_i) + (BigInteger.One);
      }
    }
    public static Dafny.ISequence<RAST._IFormal> GenParams(Dafny.ISequence<DAST._IFormal> @params) {
      Dafny.ISequence<RAST._IFormal> s = Dafny.Sequence<RAST._IFormal>.Empty;
      s = Dafny.Sequence<RAST._IFormal>.FromElements();
      BigInteger _1070_i;
      _1070_i = BigInteger.Zero;
      while ((_1070_i) < (new BigInteger((@params).Count))) {
        DAST._IFormal _1071_param;
        _1071_param = (@params).Select(_1070_i);
        Dafny.ISequence<Dafny.Rune> _1072_paramType;
        Dafny.ISequence<Dafny.Rune> _out82;
        _out82 = DCOMP.COMP.GenType((_1071_param).dtor_typ, false, false);
        _1072_paramType = _out82;
        s = Dafny.Sequence<RAST._IFormal>.Concat(s, Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(DCOMP.__default.escapeIdent((_1071_param).dtor_name), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" &"), _1072_paramType)))));
        _1070_i = (_1070_i) + (BigInteger.One);
      }
      return s;
    }
    public static RAST._IImplMember GenMethod(DAST._IMethod m, bool forTrait, DAST._IType enclosingType, Dafny.ISet<DAST._IType> enclosingTypeParams) {
      RAST._IImplMember s = RAST.ImplMember.Default();
      Dafny.ISequence<RAST._IFormal> _1073_params;
      Dafny.ISequence<RAST._IFormal> _out83;
      _out83 = DCOMP.COMP.GenParams((m).dtor_params);
      _1073_params = _out83;
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1074_paramNames;
      _1074_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1075_paramI;
      _1075_paramI = BigInteger.Zero;
      while ((_1075_paramI) < (new BigInteger(((m).dtor_params).Count))) {
        _1074_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1074_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((m).dtor_params).Select(_1075_paramI)).dtor_name));
        _1075_paramI = (_1075_paramI) + (BigInteger.One);
      }
      if (!((m).dtor_isStatic)) {
        if (forTrait) {
          _1073_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.self), _1073_params);
        } else {
          Dafny.ISequence<Dafny.Rune> _1076_enclosingTypeString;
          Dafny.ISequence<Dafny.Rune> _out84;
          _out84 = DCOMP.COMP.GenType(enclosingType, false, false);
          _1076_enclosingTypeString = _out84;
          _1073_params = Dafny.Sequence<RAST._IFormal>.Concat(Dafny.Sequence<RAST._IFormal>.FromElements(RAST.Formal.create(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"), RAST.Type.create_RawType(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1076_enclosingTypeString)))), _1073_params);
        }
      }
      Dafny.ISequence<Dafny.Rune> _1077_retType;
      _1077_retType = (((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")));
      BigInteger _1078_typeI;
      _1078_typeI = BigInteger.Zero;
      while ((_1078_typeI) < (new BigInteger(((m).dtor_outTypes).Count))) {
        if ((_1078_typeI).Sign == 1) {
          _1077_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1077_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
        }
        Dafny.ISequence<Dafny.Rune> _1079_typeString;
        Dafny.ISequence<Dafny.Rune> _out85;
        _out85 = DCOMP.COMP.GenType(((m).dtor_outTypes).Select(_1078_typeI), false, false);
        _1079_typeString = _out85;
        _1077_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1077_retType, _1079_typeString);
        _1078_typeI = (_1078_typeI) + (BigInteger.One);
      }
      if ((new BigInteger(((m).dtor_outTypes).Count)) != (BigInteger.One)) {
        _1077_retType = Dafny.Sequence<Dafny.Rune>.Concat(_1077_retType, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
      }
      byte _1080_visibility;
      _1080_visibility = RAST.__default.PUB;
      Dafny.ISequence<Dafny.Rune> _1081_fnName;
      _1081_fnName = DCOMP.__default.escapeIdent((m).dtor_name);
      Dafny.ISequence<DAST._IType> _1082_typeParamsFiltered;
      _1082_typeParamsFiltered = Dafny.Sequence<DAST._IType>.FromElements();
      BigInteger _1083_typeParamI;
      _1083_typeParamI = BigInteger.Zero;
      while ((_1083_typeParamI) < (new BigInteger(((m).dtor_typeParams).Count))) {
        DAST._IType _1084_typeParam;
        _1084_typeParam = ((m).dtor_typeParams).Select(_1083_typeParamI);
        if (!((enclosingTypeParams).Contains(_1084_typeParam))) {
          _1082_typeParamsFiltered = Dafny.Sequence<DAST._IType>.Concat(_1082_typeParamsFiltered, Dafny.Sequence<DAST._IType>.FromElements(_1084_typeParam));
        }
        _1083_typeParamI = (_1083_typeParamI) + (BigInteger.One);
      }
      Dafny.ISequence<Dafny.Rune> _1085_whereClauses;
      _1085_whereClauses = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1086_typeParams;
      _1086_typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
      if ((new BigInteger((_1082_typeParamsFiltered).Count)).Sign == 1) {
        _1085_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1085_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" where "));
        BigInteger _1087_i;
        _1087_i = BigInteger.Zero;
        while ((_1087_i) < (new BigInteger((_1082_typeParamsFiltered).Count))) {
          if ((_1087_i).Sign == 1) {
            _1085_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(_1085_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
          }
          Dafny.ISequence<Dafny.Rune> _1088_typeString;
          Dafny.ISequence<Dafny.Rune> _out86;
          _out86 = DCOMP.COMP.GenType((_1082_typeParamsFiltered).Select(_1087_i), false, false);
          _1088_typeString = _out86;
          _1086_typeParams = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_1086_typeParams, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1088_typeString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::DafnyErasable + ::dafny_runtime::DafnyUnerasable<")), _1088_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("> + Clone + ::dafny_runtime::DafnyPrint + ::std::default::Default + 'static"))));
          _1085_whereClauses = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1085_whereClauses, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<")), _1088_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyErasable>::Erased: ::std::cmp::PartialEq"));
          _1087_i = (_1087_i) + (BigInteger.One);
        }
      }
      Std.Wrappers._IOption<RAST._IExpr> _1089_fBody = Std.Wrappers.Option<RAST._IExpr>.Default();
      if ((m).dtor_hasBody) {
        Dafny.ISequence<Dafny.Rune> _1090_earlyReturn;
        _1090_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return;");
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source39 = (m).dtor_outVars;
        if (_source39.is_None) {
        } else {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1091___mcc_h0 = _source39.dtor_value;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1092_outVars = _1091___mcc_h0;
          {
            _1090_earlyReturn = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return (");
            BigInteger _1093_outI;
            _1093_outI = BigInteger.Zero;
            while ((_1093_outI) < (new BigInteger((_1092_outVars).Count))) {
              if ((_1093_outI).Sign == 1) {
                _1090_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1090_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1094_outVar;
              _1094_outVar = (_1092_outVars).Select(_1093_outI);
              _1090_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1090_earlyReturn, DCOMP.__default.escapeIdent((_1094_outVar)));
              _1093_outI = (_1093_outI) + (BigInteger.One);
            }
            _1090_earlyReturn = Dafny.Sequence<Dafny.Rune>.Concat(_1090_earlyReturn, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
          }
        }
        Dafny.ISequence<Dafny.Rune> _1095_body;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1096___v15;
        Dafny.ISequence<Dafny.Rune> _out87;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out88;
        DCOMP.COMP.GenStmts((m).dtor_body, (((m).dtor_isStatic) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None()) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self")))), _1074_paramNames, true, _1090_earlyReturn, out _out87, out _out88);
        _1095_body = _out87;
        _1096___v15 = _out88;
        _1089_fBody = Std.Wrappers.Option<RAST._IExpr>.create_Some(RAST.Expr.create_RawExpr(_1095_body));
      } else {
        _1089_fBody = Std.Wrappers.Option<RAST._IExpr>.create_None();
      }
      s = RAST.ImplMember.create_FnDecl(_1080_visibility, RAST.Fn.create(_1081_fnName, _1086_typeParams, _1073_params, Std.Wrappers.Option<RAST._IType>.create_Some(RAST.Type.create_RawType(_1077_retType)), _1085_whereClauses, _1089_fBody));
      return s;
    }
    public static void GenStmts(Dafny.ISequence<DAST._IStatement> stmts, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1097_declarations;
      _1097_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
      BigInteger _1098_i;
      _1098_i = BigInteger.Zero;
      while ((_1098_i) < (new BigInteger((stmts).Count))) {
        DAST._IStatement _1099_stmt;
        _1099_stmt = (stmts).Select(_1098_i);
        Dafny.ISequence<Dafny.Rune> _1100_stmtString;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1101_recIdents;
        Dafny.ISequence<Dafny.Rune> _out89;
        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out90;
        DCOMP.COMP.GenStmt(_1099_stmt, selfIdent, @params, (isLast) && ((_1098_i) == ((new BigInteger((stmts).Count)) - (BigInteger.One))), earlyReturn, out _out89, out _out90);
        _1100_stmtString = _out89;
        _1101_recIdents = _out90;
        readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1101_recIdents, _1097_declarations));
        DAST._IStatement _source40 = _1099_stmt;
        if (_source40.is_DeclareVar) {
          Dafny.ISequence<Dafny.Rune> _1102___mcc_h0 = _source40.dtor_name;
          DAST._IType _1103___mcc_h1 = _source40.dtor_typ;
          Std.Wrappers._IOption<DAST._IExpression> _1104___mcc_h2 = _source40.dtor_maybeValue;
          Dafny.ISequence<Dafny.Rune> _1105_name = _1102___mcc_h0;
          {
            _1097_declarations = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1097_declarations, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1105_name));
          }
        } else if (_source40.is_Assign) {
          DAST._IAssignLhs _1106___mcc_h6 = _source40.dtor_lhs;
          DAST._IExpression _1107___mcc_h7 = _source40.dtor_value;
        } else if (_source40.is_If) {
          DAST._IExpression _1108___mcc_h10 = _source40.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1109___mcc_h11 = _source40.dtor_thn;
          Dafny.ISequence<DAST._IStatement> _1110___mcc_h12 = _source40.dtor_els;
        } else if (_source40.is_Labeled) {
          Dafny.ISequence<Dafny.Rune> _1111___mcc_h16 = _source40.dtor_lbl;
          Dafny.ISequence<DAST._IStatement> _1112___mcc_h17 = _source40.dtor_body;
        } else if (_source40.is_While) {
          DAST._IExpression _1113___mcc_h20 = _source40.dtor_cond;
          Dafny.ISequence<DAST._IStatement> _1114___mcc_h21 = _source40.dtor_body;
        } else if (_source40.is_Foreach) {
          Dafny.ISequence<Dafny.Rune> _1115___mcc_h24 = _source40.dtor_boundName;
          DAST._IType _1116___mcc_h25 = _source40.dtor_boundType;
          DAST._IExpression _1117___mcc_h26 = _source40.dtor_over;
          Dafny.ISequence<DAST._IStatement> _1118___mcc_h27 = _source40.dtor_body;
        } else if (_source40.is_Call) {
          DAST._IExpression _1119___mcc_h32 = _source40.dtor_on;
          Dafny.ISequence<Dafny.Rune> _1120___mcc_h33 = _source40.dtor_name;
          Dafny.ISequence<DAST._IType> _1121___mcc_h34 = _source40.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _1122___mcc_h35 = _source40.dtor_args;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1123___mcc_h36 = _source40.dtor_outs;
        } else if (_source40.is_Return) {
          DAST._IExpression _1124___mcc_h42 = _source40.dtor_expr;
        } else if (_source40.is_EarlyReturn) {
        } else if (_source40.is_Break) {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1125___mcc_h44 = _source40.dtor_toLabel;
        } else if (_source40.is_TailRecursive) {
          Dafny.ISequence<DAST._IStatement> _1126___mcc_h46 = _source40.dtor_body;
        } else if (_source40.is_JumpTailCallStart) {
        } else if (_source40.is_Halt) {
        } else {
          DAST._IExpression _1127___mcc_h48 = _source40.dtor_Print_a0;
        }
        if ((_1098_i).Sign == 1) {
          generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, _1100_stmtString);
        _1098_i = (_1098_i) + (BigInteger.One);
      }
    }
    public static void GenAssignLhs(DAST._IAssignLhs lhs, Dafny.ISequence<Dafny.Rune> rhs, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, out Dafny.ISequence<Dafny.Rune> generated, out bool needsIIFE, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      needsIIFE = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IAssignLhs _source41 = lhs;
      if (_source41.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1128___mcc_h0 = _source41.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _source42 = _1128___mcc_h0;
        Dafny.ISequence<Dafny.Rune> _1129___mcc_h1 = _source42;
        Dafny.ISequence<Dafny.Rune> _1130_id = _1129___mcc_h1;
        {
          if ((@params).Contains(_1130_id)) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*"), DCOMP.__default.escapeIdent(_1130_id));
          } else {
            generated = DCOMP.__default.escapeIdent(_1130_id);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1130_id);
          needsIIFE = false;
        }
      } else if (_source41.is_Select) {
        DAST._IExpression _1131___mcc_h2 = _source41.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _1132___mcc_h3 = _source41.dtor_field;
        Dafny.ISequence<Dafny.Rune> _1133_field = _1132___mcc_h3;
        DAST._IExpression _1134_on = _1131___mcc_h2;
        {
          Dafny.ISequence<Dafny.Rune> _1135_onExpr;
          bool _1136_onOwned;
          bool _1137_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1138_recIdents;
          Dafny.ISequence<Dafny.Rune> _out91;
          bool _out92;
          bool _out93;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out94;
          DCOMP.COMP.GenExpr(_1134_on, selfIdent, @params, false, out _out91, out _out92, out _out93, out _out94);
          _1135_onExpr = _out91;
          _1136_onOwned = _out92;
          _1137_onErased = _out93;
          _1138_recIdents = _out94;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("*("), _1135_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), _1133_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()) = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          readIdents = _1138_recIdents;
          needsIIFE = true;
        }
      } else {
        DAST._IExpression _1139___mcc_h4 = _source41.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _1140___mcc_h5 = _source41.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _1141_indices = _1140___mcc_h5;
        DAST._IExpression _1142_on = _1139___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1143_onExpr;
          bool _1144_onOwned;
          bool _1145_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1146_recIdents;
          Dafny.ISequence<Dafny.Rune> _out95;
          bool _out96;
          bool _out97;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out98;
          DCOMP.COMP.GenExpr(_1142_on, selfIdent, @params, false, out _out95, out _out96, out _out97, out _out98);
          _1143_onExpr = _out95;
          _1144_onOwned = _out96;
          _1145_onErased = _out97;
          _1146_recIdents = _out98;
          readIdents = _1146_recIdents;
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          BigInteger _1147_i;
          _1147_i = BigInteger.Zero;
          while ((_1147_i) < (new BigInteger((_1141_indices).Count))) {
            Dafny.ISequence<Dafny.Rune> _1148_idx;
            bool _1149___v19;
            bool _1150_idxErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1151_recIdentsIdx;
            Dafny.ISequence<Dafny.Rune> _out99;
            bool _out100;
            bool _out101;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out102;
            DCOMP.COMP.GenExpr((_1141_indices).Select(_1147_i), selfIdent, @params, true, out _out99, out _out100, out _out101, out _out102);
            _1148_idx = _out99;
            _1149___v19 = _out100;
            _1150_idxErased = _out101;
            _1151_recIdentsIdx = _out102;
            if (!(_1150_idxErased)) {
              _1148_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1148_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let __idx")), Std.Strings.__default.OfNat(_1147_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = <usize as ::dafny_runtime::NumCast>::from(")), _1148_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap();\n"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1151_recIdentsIdx);
            _1147_i = (_1147_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, _1143_onExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow_mut()"));
          _1147_i = BigInteger.Zero;
          while ((_1147_i) < (new BigInteger((_1141_indices).Count))) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[__idx")), Std.Strings.__default.OfNat(_1147_i)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
            _1147_i = (_1147_i) + (BigInteger.One);
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), rhs), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n}"));
          needsIIFE = true;
        }
      }
    }
    public static void GenStmt(DAST._IStatement stmt, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool isLast, Dafny.ISequence<Dafny.Rune> earlyReturn, out Dafny.ISequence<Dafny.Rune> generated, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      generated = Dafny.Sequence<Dafny.Rune>.Empty;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IStatement _source43 = stmt;
      if (_source43.is_DeclareVar) {
        Dafny.ISequence<Dafny.Rune> _1152___mcc_h0 = _source43.dtor_name;
        DAST._IType _1153___mcc_h1 = _source43.dtor_typ;
        Std.Wrappers._IOption<DAST._IExpression> _1154___mcc_h2 = _source43.dtor_maybeValue;
        Std.Wrappers._IOption<DAST._IExpression> _source44 = _1154___mcc_h2;
        if (_source44.is_None) {
          DAST._IType _1155_typ = _1153___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1156_name = _1152___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1157_typeString;
            Dafny.ISequence<Dafny.Rune> _out103;
            _out103 = DCOMP.COMP.GenType(_1155_typ, true, false);
            _1157_typeString = _out103;
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1156_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1157_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IExpression _1158___mcc_h3 = _source44.dtor_value;
          DAST._IExpression _1159_expression = _1158___mcc_h3;
          DAST._IType _1160_typ = _1153___mcc_h1;
          Dafny.ISequence<Dafny.Rune> _1161_name = _1152___mcc_h0;
          {
            Dafny.ISequence<Dafny.Rune> _1162_typeString;
            Dafny.ISequence<Dafny.Rune> _out104;
            _out104 = DCOMP.COMP.GenType(_1160_typ, true, false);
            _1162_typeString = _out104;
            Dafny.ISequence<Dafny.Rune> _1163_expr;
            bool _1164___v20;
            bool _1165_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1166_recIdents;
            Dafny.ISequence<Dafny.Rune> _out105;
            bool _out106;
            bool _out107;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out108;
            DCOMP.COMP.GenExpr(_1159_expression, selfIdent, @params, true, out _out105, out _out106, out _out107, out _out108);
            _1163_expr = _out105;
            _1164___v20 = _out106;
            _1165_recErased = _out107;
            _1166_recIdents = _out108;
            if (!(_1165_recErased)) {
              _1163_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1163_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _1163_expr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1162_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1163_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut "), DCOMP.__default.escapeIdent(_1161_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _1162_typeString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1163_expr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            readIdents = _1166_recIdents;
          }
        }
      } else if (_source43.is_Assign) {
        DAST._IAssignLhs _1167___mcc_h4 = _source43.dtor_lhs;
        DAST._IExpression _1168___mcc_h5 = _source43.dtor_value;
        DAST._IExpression _1169_expression = _1168___mcc_h5;
        DAST._IAssignLhs _1170_lhs = _1167___mcc_h4;
        {
          Dafny.ISequence<Dafny.Rune> _1171_lhsGen;
          bool _1172_needsIIFE;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1173_recIdents;
          Dafny.ISequence<Dafny.Rune> _out109;
          bool _out110;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out111;
          DCOMP.COMP.GenAssignLhs(_1170_lhs, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("__rhs"), selfIdent, @params, out _out109, out _out110, out _out111);
          _1171_lhsGen = _out109;
          _1172_needsIIFE = _out110;
          _1173_recIdents = _out111;
          Dafny.ISequence<Dafny.Rune> _1174_exprGen;
          bool _1175___v21;
          bool _1176_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1177_exprIdents;
          Dafny.ISequence<Dafny.Rune> _out112;
          bool _out113;
          bool _out114;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out115;
          DCOMP.COMP.GenExpr(_1169_expression, selfIdent, @params, true, out _out112, out _out113, out _out114, out _out115);
          _1174_exprGen = _out112;
          _1175___v21 = _out113;
          _1176_exprErased = _out114;
          _1177_exprIdents = _out115;
          if (!(_1176_exprErased)) {
            _1174_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1174_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          _1174_exprGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1174_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          if (_1172_needsIIFE) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet __rhs = "), _1174_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1171_lhsGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1171_lhsGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1174_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_1173_recIdents, _1177_exprIdents);
        }
      } else if (_source43.is_If) {
        DAST._IExpression _1178___mcc_h6 = _source43.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1179___mcc_h7 = _source43.dtor_thn;
        Dafny.ISequence<DAST._IStatement> _1180___mcc_h8 = _source43.dtor_els;
        Dafny.ISequence<DAST._IStatement> _1181_els = _1180___mcc_h8;
        Dafny.ISequence<DAST._IStatement> _1182_thn = _1179___mcc_h7;
        DAST._IExpression _1183_cond = _1178___mcc_h6;
        {
          Dafny.ISequence<Dafny.Rune> _1184_condString;
          bool _1185___v22;
          bool _1186_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1187_recIdents;
          Dafny.ISequence<Dafny.Rune> _out116;
          bool _out117;
          bool _out118;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out119;
          DCOMP.COMP.GenExpr(_1183_cond, selfIdent, @params, true, out _out116, out _out117, out _out118, out _out119);
          _1184_condString = _out116;
          _1185___v22 = _out117;
          _1186_condErased = _out118;
          _1187_recIdents = _out119;
          if (!(_1186_condErased)) {
            _1184_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1184_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1187_recIdents;
          Dafny.ISequence<Dafny.Rune> _1188_thnString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1189_thnIdents;
          Dafny.ISequence<Dafny.Rune> _out120;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out121;
          DCOMP.COMP.GenStmts(_1182_thn, selfIdent, @params, isLast, earlyReturn, out _out120, out _out121);
          _1188_thnString = _out120;
          _1189_thnIdents = _out121;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1189_thnIdents);
          Dafny.ISequence<Dafny.Rune> _1190_elsString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1191_elsIdents;
          Dafny.ISequence<Dafny.Rune> _out122;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out123;
          DCOMP.COMP.GenStmts(_1181_els, selfIdent, @params, isLast, earlyReturn, out _out122, out _out123);
          _1190_elsString = _out122;
          _1191_elsIdents = _out123;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1191_elsIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("if "), _1184_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1188_thnString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _1190_elsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_Labeled) {
        Dafny.ISequence<Dafny.Rune> _1192___mcc_h9 = _source43.dtor_lbl;
        Dafny.ISequence<DAST._IStatement> _1193___mcc_h10 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1194_body = _1193___mcc_h10;
        Dafny.ISequence<Dafny.Rune> _1195_lbl = _1192___mcc_h9;
        {
          Dafny.ISequence<Dafny.Rune> _1196_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1197_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out124;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out125;
          DCOMP.COMP.GenStmts(_1194_body, selfIdent, @params, isLast, earlyReturn, out _out124, out _out125);
          _1196_bodyString = _out124;
          _1197_bodyIdents = _out125;
          readIdents = _1197_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'label_"), _1195_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": loop {\n")), _1196_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_While) {
        DAST._IExpression _1198___mcc_h11 = _source43.dtor_cond;
        Dafny.ISequence<DAST._IStatement> _1199___mcc_h12 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1200_body = _1199___mcc_h12;
        DAST._IExpression _1201_cond = _1198___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _1202_condString;
          bool _1203___v23;
          bool _1204_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1205_recIdents;
          Dafny.ISequence<Dafny.Rune> _out126;
          bool _out127;
          bool _out128;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out129;
          DCOMP.COMP.GenExpr(_1201_cond, selfIdent, @params, true, out _out126, out _out127, out _out128, out _out129);
          _1202_condString = _out126;
          _1203___v23 = _out127;
          _1204_condErased = _out128;
          _1205_recIdents = _out129;
          if (!(_1204_condErased)) {
            _1202_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1202_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _1205_recIdents;
          Dafny.ISequence<Dafny.Rune> _1206_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1207_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out130;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out131;
          DCOMP.COMP.GenStmts(_1200_body, selfIdent, @params, false, earlyReturn, out _out130, out _out131);
          _1206_bodyString = _out130;
          _1207_bodyIdents = _out131;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1207_bodyIdents);
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("while "), _1202_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _1206_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_Foreach) {
        Dafny.ISequence<Dafny.Rune> _1208___mcc_h13 = _source43.dtor_boundName;
        DAST._IType _1209___mcc_h14 = _source43.dtor_boundType;
        DAST._IExpression _1210___mcc_h15 = _source43.dtor_over;
        Dafny.ISequence<DAST._IStatement> _1211___mcc_h16 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1212_body = _1211___mcc_h16;
        DAST._IExpression _1213_over = _1210___mcc_h15;
        DAST._IType _1214_boundType = _1209___mcc_h14;
        Dafny.ISequence<Dafny.Rune> _1215_boundName = _1208___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1216_overString;
          bool _1217___v24;
          bool _1218_overErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1219_recIdents;
          Dafny.ISequence<Dafny.Rune> _out132;
          bool _out133;
          bool _out134;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out135;
          DCOMP.COMP.GenExpr(_1213_over, selfIdent, @params, true, out _out132, out _out133, out _out134, out _out135);
          _1216_overString = _out132;
          _1217___v24 = _out133;
          _1218_overErased = _out134;
          _1219_recIdents = _out135;
          Dafny.ISequence<Dafny.Rune> _1220_boundTypeStr;
          Dafny.ISequence<Dafny.Rune> _out136;
          _out136 = DCOMP.COMP.GenType(_1214_boundType, false, false);
          _1220_boundTypeStr = _out136;
          readIdents = _1219_recIdents;
          Dafny.ISequence<Dafny.Rune> _1221_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1222_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out137;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out138;
          DCOMP.COMP.GenStmts(_1212_body, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(@params, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(_1215_boundName)), false, earlyReturn, out _out137, out _out138);
          _1221_bodyString = _out137;
          _1222_bodyIdents = _out138;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1222_bodyIdents), Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1215_boundName));
          Dafny.ISequence<Dafny.Rune> _1223_unerasedIter;
          _1223_unerasedIter = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_iter_erased");
          if (_1218_overErased) {
            _1223_unerasedIter = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1220_boundTypeStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::unerase_owned(")), _1223_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("for _iter_erased in "), _1216_overString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n"));
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1215_boundName)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _1223_unerasedIter), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _1221_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_Call) {
        DAST._IExpression _1224___mcc_h17 = _source43.dtor_on;
        Dafny.ISequence<Dafny.Rune> _1225___mcc_h18 = _source43.dtor_name;
        Dafny.ISequence<DAST._IType> _1226___mcc_h19 = _source43.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1227___mcc_h20 = _source43.dtor_args;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1228___mcc_h21 = _source43.dtor_outs;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _1229_maybeOutVars = _1228___mcc_h21;
        Dafny.ISequence<DAST._IExpression> _1230_args = _1227___mcc_h20;
        Dafny.ISequence<DAST._IType> _1231_typeArgs = _1226___mcc_h19;
        Dafny.ISequence<Dafny.Rune> _1232_name = _1225___mcc_h18;
        DAST._IExpression _1233_on = _1224___mcc_h17;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _1234_typeArgString;
          _1234_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_1231_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _1235_typeI;
            _1235_typeI = BigInteger.Zero;
            _1234_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_1235_typeI) < (new BigInteger((_1231_typeArgs).Count))) {
              if ((_1235_typeI).Sign == 1) {
                _1234_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1234_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1236_typeString;
              Dafny.ISequence<Dafny.Rune> _out139;
              _out139 = DCOMP.COMP.GenType((_1231_typeArgs).Select(_1235_typeI), false, false);
              _1236_typeString = _out139;
              _1234_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1234_typeArgString, _1236_typeString);
              _1235_typeI = (_1235_typeI) + (BigInteger.One);
            }
            _1234_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_1234_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _1237_argString;
          _1237_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _1238_i;
          _1238_i = BigInteger.Zero;
          while ((_1238_i) < (new BigInteger((_1230_args).Count))) {
            if ((_1238_i).Sign == 1) {
              _1237_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1237_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1239_argExpr;
            bool _1240_isOwned;
            bool _1241_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1242_argIdents;
            Dafny.ISequence<Dafny.Rune> _out140;
            bool _out141;
            bool _out142;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out143;
            DCOMP.COMP.GenExpr((_1230_args).Select(_1238_i), selfIdent, @params, false, out _out140, out _out141, out _out142, out _out143);
            _1239_argExpr = _out140;
            _1240_isOwned = _out141;
            _1241_argErased = _out142;
            _1242_argIdents = _out143;
            if (_1240_isOwned) {
              _1239_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _1239_argExpr);
            }
            _1237_argString = Dafny.Sequence<Dafny.Rune>.Concat(_1237_argString, _1239_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1242_argIdents);
            _1238_i = (_1238_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1243_enclosingString;
          bool _1244___v25;
          bool _1245___v26;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1246_enclosingIdents;
          Dafny.ISequence<Dafny.Rune> _out144;
          bool _out145;
          bool _out146;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out147;
          DCOMP.COMP.GenExpr(_1233_on, selfIdent, @params, false, out _out144, out _out145, out _out146, out _out147);
          _1243_enclosingString = _out144;
          _1244___v25 = _out145;
          _1245___v26 = _out146;
          _1246_enclosingIdents = _out147;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1246_enclosingIdents);
          DAST._IExpression _source45 = _1233_on;
          if (_source45.is_Literal) {
            DAST._ILiteral _1247___mcc_h26 = _source45.dtor_Literal_a0;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _1248___mcc_h28 = _source45.dtor_Ident_a0;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1249___mcc_h30 = _source45.dtor_Companion_a0;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(_1243_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
            }
          } else if (_source45.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _1250___mcc_h32 = _source45.dtor_Tuple_a0;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1251___mcc_h34 = _source45.dtor_path;
            Dafny.ISequence<DAST._IType> _1252___mcc_h35 = _source45.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1253___mcc_h36 = _source45.dtor_args;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _1254___mcc_h40 = _source45.dtor_dims;
            DAST._IType _1255___mcc_h41 = _source45.dtor_typ;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1256___mcc_h44 = _source45.dtor_path;
            Dafny.ISequence<DAST._IType> _1257___mcc_h45 = _source45.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _1258___mcc_h46 = _source45.dtor_variant;
            bool _1259___mcc_h47 = _source45.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1260___mcc_h48 = _source45.dtor_contents;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Convert) {
            DAST._IExpression _1261___mcc_h54 = _source45.dtor_value;
            DAST._IType _1262___mcc_h55 = _source45.dtor_from;
            DAST._IType _1263___mcc_h56 = _source45.dtor_typ;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SeqConstruct) {
            DAST._IExpression _1264___mcc_h60 = _source45.dtor_length;
            DAST._IExpression _1265___mcc_h61 = _source45.dtor_elem;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _1266___mcc_h64 = _source45.dtor_elements;
            DAST._IType _1267___mcc_h65 = _source45.dtor_typ;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _1268___mcc_h68 = _source45.dtor_elements;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _1269___mcc_h70 = _source45.dtor_mapElems;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_This) {
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Ite) {
            DAST._IExpression _1270___mcc_h72 = _source45.dtor_cond;
            DAST._IExpression _1271___mcc_h73 = _source45.dtor_thn;
            DAST._IExpression _1272___mcc_h74 = _source45.dtor_els;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_UnOp) {
            DAST._IUnaryOp _1273___mcc_h78 = _source45.dtor_unOp;
            DAST._IExpression _1274___mcc_h79 = _source45.dtor_expr;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_BinOp) {
            DAST._IBinOp _1275___mcc_h82 = _source45.dtor_op;
            DAST._IExpression _1276___mcc_h83 = _source45.dtor_left;
            DAST._IExpression _1277___mcc_h84 = _source45.dtor_right;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_ArrayLen) {
            DAST._IExpression _1278___mcc_h88 = _source45.dtor_expr;
            BigInteger _1279___mcc_h89 = _source45.dtor_dim;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Select) {
            DAST._IExpression _1280___mcc_h92 = _source45.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1281___mcc_h93 = _source45.dtor_field;
            bool _1282___mcc_h94 = _source45.dtor_isConstant;
            bool _1283___mcc_h95 = _source45.dtor_onDatatype;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SelectFn) {
            DAST._IExpression _1284___mcc_h100 = _source45.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _1285___mcc_h101 = _source45.dtor_field;
            bool _1286___mcc_h102 = _source45.dtor_onDatatype;
            bool _1287___mcc_h103 = _source45.dtor_isStatic;
            BigInteger _1288___mcc_h104 = _source45.dtor_arity;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Index) {
            DAST._IExpression _1289___mcc_h110 = _source45.dtor_expr;
            DAST._ICollKind _1290___mcc_h111 = _source45.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _1291___mcc_h112 = _source45.dtor_indices;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_IndexRange) {
            DAST._IExpression _1292___mcc_h116 = _source45.dtor_expr;
            bool _1293___mcc_h117 = _source45.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _1294___mcc_h118 = _source45.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _1295___mcc_h119 = _source45.dtor_high;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_TupleSelect) {
            DAST._IExpression _1296___mcc_h124 = _source45.dtor_expr;
            BigInteger _1297___mcc_h125 = _source45.dtor_index;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Call) {
            DAST._IExpression _1298___mcc_h128 = _source45.dtor_on;
            Dafny.ISequence<Dafny.Rune> _1299___mcc_h129 = _source45.dtor_name;
            Dafny.ISequence<DAST._IType> _1300___mcc_h130 = _source45.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _1301___mcc_h131 = _source45.dtor_args;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _1302___mcc_h136 = _source45.dtor_params;
            DAST._IType _1303___mcc_h137 = _source45.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _1304___mcc_h138 = _source45.dtor_body;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _1305___mcc_h142 = _source45.dtor_values;
            DAST._IType _1306___mcc_h143 = _source45.dtor_retType;
            DAST._IExpression _1307___mcc_h144 = _source45.dtor_expr;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _1308___mcc_h148 = _source45.dtor_name;
            DAST._IType _1309___mcc_h149 = _source45.dtor_typ;
            DAST._IExpression _1310___mcc_h150 = _source45.dtor_value;
            DAST._IExpression _1311___mcc_h151 = _source45.dtor_iifeBody;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_Apply) {
            DAST._IExpression _1312___mcc_h156 = _source45.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _1313___mcc_h157 = _source45.dtor_args;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_TypeTest) {
            DAST._IExpression _1314___mcc_h160 = _source45.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1315___mcc_h161 = _source45.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _1316___mcc_h162 = _source45.dtor_variant;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_InitializationValue) {
            DAST._IType _1317___mcc_h166 = _source45.dtor_typ;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_BoolBoundedPool) {
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SetBoundedPool) {
            DAST._IExpression _1318___mcc_h168 = _source45.dtor_of;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else if (_source45.is_SeqBoundedPool) {
            DAST._IExpression _1319___mcc_h170 = _source45.dtor_of;
            bool _1320___mcc_h171 = _source45.dtor_includeDuplicates;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          } else {
            DAST._IExpression _1321___mcc_h174 = _source45.dtor_lo;
            DAST._IExpression _1322___mcc_h175 = _source45.dtor_hi;
            {
              _1243_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1243_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")."));
            }
          }
          Dafny.ISequence<Dafny.Rune> _1323_receiver;
          _1323_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.ISequence<Dafny.Rune>>> _source46 = _1229_maybeOutVars;
          if (_source46.is_None) {
          } else {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1324___mcc_h178 = _source46.dtor_value;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1325_outVars = _1324___mcc_h178;
            {
              if ((new BigInteger((_1325_outVars).Count)) > (BigInteger.One)) {
                _1323_receiver = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
              }
              BigInteger _1326_outI;
              _1326_outI = BigInteger.Zero;
              while ((_1326_outI) < (new BigInteger((_1325_outVars).Count))) {
                if ((_1326_outI).Sign == 1) {
                  _1323_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1323_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
                }
                Dafny.ISequence<Dafny.Rune> _1327_outVar;
                _1327_outVar = (_1325_outVars).Select(_1326_outI);
                _1323_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1323_receiver, (_1327_outVar));
                _1326_outI = (_1326_outI) + (BigInteger.One);
              }
              if ((new BigInteger((_1325_outVars).Count)) > (BigInteger.One)) {
                _1323_receiver = Dafny.Sequence<Dafny.Rune>.Concat(_1323_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(((!(_1323_receiver).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))) ? (Dafny.Sequence<Dafny.Rune>.Concat(_1323_receiver, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "))) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""))), _1243_enclosingString), DCOMP.__default.escapeIdent(_1232_name)), _1234_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1237_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(");"));
        }
      } else if (_source43.is_Return) {
        DAST._IExpression _1328___mcc_h22 = _source43.dtor_expr;
        DAST._IExpression _1329_expr = _1328___mcc_h22;
        {
          Dafny.ISequence<Dafny.Rune> _1330_exprString;
          bool _1331___v29;
          bool _1332_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1333_recIdents;
          Dafny.ISequence<Dafny.Rune> _out148;
          bool _out149;
          bool _out150;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out151;
          DCOMP.COMP.GenExpr(_1329_expr, selfIdent, @params, true, out _out148, out _out149, out _out150, out _out151);
          _1330_exprString = _out148;
          _1331___v29 = _out149;
          _1332_recErased = _out150;
          _1333_recIdents = _out151;
          _1330_exprString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned(::dafny_runtime::DafnyErasable::erase_owned("), _1330_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          readIdents = _1333_recIdents;
          if (isLast) {
            generated = _1330_exprString;
          } else {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("return "), _1330_exprString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
          }
        }
      } else if (_source43.is_EarlyReturn) {
        {
          generated = earlyReturn;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source43.is_Break) {
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1334___mcc_h23 = _source43.dtor_toLabel;
        Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _1335_toLabel = _1334___mcc_h23;
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source47 = _1335_toLabel;
          if (_source47.is_None) {
            {
              generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break;");
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _1336___mcc_h179 = _source47.dtor_value;
            Dafny.ISequence<Dafny.Rune> _1337_lbl = _1336___mcc_h179;
            {
              generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("break 'label_"), _1337_lbl), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";"));
            }
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source43.is_TailRecursive) {
        Dafny.ISequence<DAST._IStatement> _1338___mcc_h24 = _source43.dtor_body;
        Dafny.ISequence<DAST._IStatement> _1339_body = _1338___mcc_h24;
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
            generated = Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut _this = self.clone();\n"));
          }
          BigInteger _1340_paramI;
          _1340_paramI = BigInteger.Zero;
          while ((_1340_paramI) < (new BigInteger((@params).Count))) {
            Dafny.ISequence<Dafny.Rune> _1341_param;
            _1341_param = (@params).Select(_1340_paramI);
            generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let mut ")), DCOMP.__default.escapeIdent(_1341_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1341_param)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
            _1340_paramI = (_1340_paramI) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _1342_bodyString;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1343_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out152;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out153;
          DCOMP.COMP.GenStmts(_1339_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), false, earlyReturn, out _out152, out _out153);
          _1342_bodyString = _out152;
          _1343_bodyIdents = _out153;
          readIdents = _1343_bodyIdents;
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(generated, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("'TAIL_CALL_START: loop {\n")), _1342_bodyString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
        }
      } else if (_source43.is_JumpTailCallStart) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("continue 'TAIL_CALL_START;");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source43.is_Halt) {
        {
          generated = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"Halt\");");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else {
        DAST._IExpression _1344___mcc_h25 = _source43.dtor_Print_a0;
        DAST._IExpression _1345_e = _1344___mcc_h25;
        {
          Dafny.ISequence<Dafny.Rune> _1346_printedExpr;
          bool _1347_isOwned;
          bool _1348___v30;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1349_recIdents;
          Dafny.ISequence<Dafny.Rune> _out154;
          bool _out155;
          bool _out156;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out157;
          DCOMP.COMP.GenExpr(_1345_e, selfIdent, @params, false, out _out154, out _out155, out _out156, out _out157);
          _1346_printedExpr = _out154;
          _1347_isOwned = _out155;
          _1348___v30 = _out156;
          _1349_recIdents = _out157;
          if (_1347_isOwned) {
            _1346_printedExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _1346_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          generated = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("print!(\"{}\", ::dafny_runtime::DafnyPrintWrapper("), _1346_printedExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("));"));
          readIdents = _1349_recIdents;
        }
      }
    }
    public static void GenExpr(DAST._IExpression e, Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> selfIdent, Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> @params, bool mustOwn, out Dafny.ISequence<Dafny.Rune> s, out bool isOwned, out bool isErased, out Dafny.ISet<Dafny.ISequence<Dafny.Rune>> readIdents) {
      s = Dafny.Sequence<Dafny.Rune>.Empty;
      isOwned = false;
      isErased = false;
      readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Empty;
      DAST._IExpression _source48 = e;
      if (_source48.is_Literal) {
        DAST._ILiteral _1350___mcc_h0 = _source48.dtor_Literal_a0;
        DAST._ILiteral _source49 = _1350___mcc_h0;
        if (_source49.is_BoolLiteral) {
          bool _1351___mcc_h1 = _source49.dtor_BoolLiteral_a0;
          if ((_1351___mcc_h1) == (false)) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("false");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          } else {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("true");
              isOwned = true;
              isErased = false;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
            }
          }
        } else if (_source49.is_IntLiteral) {
          Dafny.ISequence<Dafny.Rune> _1352___mcc_h2 = _source49.dtor_IntLiteral_a0;
          DAST._IType _1353___mcc_h3 = _source49.dtor_IntLiteral_a1;
          DAST._IType _1354_t = _1353___mcc_h3;
          Dafny.ISequence<Dafny.Rune> _1355_i = _1352___mcc_h2;
          {
            DAST._IType _source50 = _1354_t;
            if (_source50.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1356___mcc_h237 = _source50.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1357___mcc_h238 = _source50.dtor_typeArgs;
              DAST._IResolvedType _1358___mcc_h239 = _source50.dtor_resolved;
              DAST._IType _1359_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1360_genType;
                Dafny.ISequence<Dafny.Rune> _out158;
                _out158 = DCOMP.COMP.GenType(_1359_o, false, false);
                _1360_genType = _out158;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1360_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Nullable) {
              DAST._IType _1361___mcc_h243 = _source50.dtor_Nullable_a0;
              DAST._IType _1362_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1363_genType;
                Dafny.ISequence<Dafny.Rune> _out159;
                _out159 = DCOMP.COMP.GenType(_1362_o, false, false);
                _1363_genType = _out159;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1363_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1364___mcc_h245 = _source50.dtor_Tuple_a0;
              DAST._IType _1365_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1366_genType;
                Dafny.ISequence<Dafny.Rune> _out160;
                _out160 = DCOMP.COMP.GenType(_1365_o, false, false);
                _1366_genType = _out160;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1366_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Array) {
              DAST._IType _1367___mcc_h247 = _source50.dtor_element;
              BigInteger _1368___mcc_h248 = _source50.dtor_dims;
              DAST._IType _1369_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1370_genType;
                Dafny.ISequence<Dafny.Rune> _out161;
                _out161 = DCOMP.COMP.GenType(_1369_o, false, false);
                _1370_genType = _out161;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1370_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Seq) {
              DAST._IType _1371___mcc_h251 = _source50.dtor_element;
              DAST._IType _1372_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1373_genType;
                Dafny.ISequence<Dafny.Rune> _out162;
                _out162 = DCOMP.COMP.GenType(_1372_o, false, false);
                _1373_genType = _out162;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1373_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Set) {
              DAST._IType _1374___mcc_h253 = _source50.dtor_element;
              DAST._IType _1375_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1376_genType;
                Dafny.ISequence<Dafny.Rune> _out163;
                _out163 = DCOMP.COMP.GenType(_1375_o, false, false);
                _1376_genType = _out163;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1376_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Multiset) {
              DAST._IType _1377___mcc_h255 = _source50.dtor_element;
              DAST._IType _1378_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1379_genType;
                Dafny.ISequence<Dafny.Rune> _out164;
                _out164 = DCOMP.COMP.GenType(_1378_o, false, false);
                _1379_genType = _out164;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1379_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Map) {
              DAST._IType _1380___mcc_h257 = _source50.dtor_key;
              DAST._IType _1381___mcc_h258 = _source50.dtor_value;
              DAST._IType _1382_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1383_genType;
                Dafny.ISequence<Dafny.Rune> _out165;
                _out165 = DCOMP.COMP.GenType(_1382_o, false, false);
                _1383_genType = _out165;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1383_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1384___mcc_h261 = _source50.dtor_args;
              DAST._IType _1385___mcc_h262 = _source50.dtor_result;
              DAST._IType _1386_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1387_genType;
                Dafny.ISequence<Dafny.Rune> _out166;
                _out166 = DCOMP.COMP.GenType(_1386_o, false, false);
                _1387_genType = _out166;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1387_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source50.is_Primitive) {
              DAST._IPrimitive _1388___mcc_h265 = _source50.dtor_Primitive_a0;
              DAST._IPrimitive _source51 = _1388___mcc_h265;
              if (_source51.is_Int) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::parse_bytes(b\""), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap()"));
                }
              } else if (_source51.is_Real) {
                DAST._IType _1389_o = _1354_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1390_genType;
                  Dafny.ISequence<Dafny.Rune> _out167;
                  _out167 = DCOMP.COMP.GenType(_1389_o, false, false);
                  _1390_genType = _out167;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1390_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source51.is_String) {
                DAST._IType _1391_o = _1354_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1392_genType;
                  Dafny.ISequence<Dafny.Rune> _out168;
                  _out168 = DCOMP.COMP.GenType(_1391_o, false, false);
                  _1392_genType = _out168;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1392_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source51.is_Bool) {
                DAST._IType _1393_o = _1354_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1394_genType;
                  Dafny.ISequence<Dafny.Rune> _out169;
                  _out169 = DCOMP.COMP.GenType(_1393_o, false, false);
                  _1394_genType = _out169;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1394_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1395_o = _1354_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1396_genType;
                  Dafny.ISequence<Dafny.Rune> _out170;
                  _out170 = DCOMP.COMP.GenType(_1395_o, false, false);
                  _1396_genType = _out170;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1396_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source50.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1397___mcc_h267 = _source50.dtor_Passthrough_a0;
              DAST._IType _1398_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1399_genType;
                Dafny.ISequence<Dafny.Rune> _out171;
                _out171 = DCOMP.COMP.GenType(_1398_o, false, false);
                _1399_genType = _out171;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1399_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1400___mcc_h269 = _source50.dtor_TypeArg_a0;
              DAST._IType _1401_o = _1354_t;
              {
                Dafny.ISequence<Dafny.Rune> _1402_genType;
                Dafny.ISequence<Dafny.Rune> _out172;
                _out172 = DCOMP.COMP.GenType(_1401_o, false, false);
                _1402_genType = _out172;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1355_i), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ")), _1402_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source49.is_DecLiteral) {
          Dafny.ISequence<Dafny.Rune> _1403___mcc_h4 = _source49.dtor_DecLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1404___mcc_h5 = _source49.dtor_DecLiteral_a1;
          DAST._IType _1405___mcc_h6 = _source49.dtor_DecLiteral_a2;
          DAST._IType _1406_t = _1405___mcc_h6;
          Dafny.ISequence<Dafny.Rune> _1407_d = _1404___mcc_h5;
          Dafny.ISequence<Dafny.Rune> _1408_n = _1403___mcc_h4;
          {
            DAST._IType _source52 = _1406_t;
            if (_source52.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1409___mcc_h271 = _source52.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1410___mcc_h272 = _source52.dtor_typeArgs;
              DAST._IResolvedType _1411___mcc_h273 = _source52.dtor_resolved;
              DAST._IType _1412_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1413_genType;
                Dafny.ISequence<Dafny.Rune> _out173;
                _out173 = DCOMP.COMP.GenType(_1412_o, false, false);
                _1413_genType = _out173;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1413_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Nullable) {
              DAST._IType _1414___mcc_h277 = _source52.dtor_Nullable_a0;
              DAST._IType _1415_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1416_genType;
                Dafny.ISequence<Dafny.Rune> _out174;
                _out174 = DCOMP.COMP.GenType(_1415_o, false, false);
                _1416_genType = _out174;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1416_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1417___mcc_h279 = _source52.dtor_Tuple_a0;
              DAST._IType _1418_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1419_genType;
                Dafny.ISequence<Dafny.Rune> _out175;
                _out175 = DCOMP.COMP.GenType(_1418_o, false, false);
                _1419_genType = _out175;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1419_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Array) {
              DAST._IType _1420___mcc_h281 = _source52.dtor_element;
              BigInteger _1421___mcc_h282 = _source52.dtor_dims;
              DAST._IType _1422_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1423_genType;
                Dafny.ISequence<Dafny.Rune> _out176;
                _out176 = DCOMP.COMP.GenType(_1422_o, false, false);
                _1423_genType = _out176;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1423_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Seq) {
              DAST._IType _1424___mcc_h285 = _source52.dtor_element;
              DAST._IType _1425_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1426_genType;
                Dafny.ISequence<Dafny.Rune> _out177;
                _out177 = DCOMP.COMP.GenType(_1425_o, false, false);
                _1426_genType = _out177;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1426_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Set) {
              DAST._IType _1427___mcc_h287 = _source52.dtor_element;
              DAST._IType _1428_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1429_genType;
                Dafny.ISequence<Dafny.Rune> _out178;
                _out178 = DCOMP.COMP.GenType(_1428_o, false, false);
                _1429_genType = _out178;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1429_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Multiset) {
              DAST._IType _1430___mcc_h289 = _source52.dtor_element;
              DAST._IType _1431_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1432_genType;
                Dafny.ISequence<Dafny.Rune> _out179;
                _out179 = DCOMP.COMP.GenType(_1431_o, false, false);
                _1432_genType = _out179;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1432_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Map) {
              DAST._IType _1433___mcc_h291 = _source52.dtor_key;
              DAST._IType _1434___mcc_h292 = _source52.dtor_value;
              DAST._IType _1435_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1436_genType;
                Dafny.ISequence<Dafny.Rune> _out180;
                _out180 = DCOMP.COMP.GenType(_1435_o, false, false);
                _1436_genType = _out180;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1436_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Arrow) {
              Dafny.ISequence<DAST._IType> _1437___mcc_h295 = _source52.dtor_args;
              DAST._IType _1438___mcc_h296 = _source52.dtor_result;
              DAST._IType _1439_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1440_genType;
                Dafny.ISequence<Dafny.Rune> _out181;
                _out181 = DCOMP.COMP.GenType(_1439_o, false, false);
                _1440_genType = _out181;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1440_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else if (_source52.is_Primitive) {
              DAST._IPrimitive _1441___mcc_h299 = _source52.dtor_Primitive_a0;
              DAST._IPrimitive _source53 = _1441___mcc_h299;
              if (_source53.is_Int) {
                DAST._IType _1442_o = _1406_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1443_genType;
                  Dafny.ISequence<Dafny.Rune> _out182;
                  _out182 = DCOMP.COMP.GenType(_1442_o, false, false);
                  _1443_genType = _out182;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1443_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source53.is_Real) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::new(::dafny_runtime::BigInt::parse_bytes(b\""), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap(), ::dafny_runtime::BigInt::parse_bytes(b\"")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\", 10).unwrap())"));
                }
              } else if (_source53.is_String) {
                DAST._IType _1444_o = _1406_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1445_genType;
                  Dafny.ISequence<Dafny.Rune> _out183;
                  _out183 = DCOMP.COMP.GenType(_1444_o, false, false);
                  _1445_genType = _out183;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1445_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source53.is_Bool) {
                DAST._IType _1446_o = _1406_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1447_genType;
                  Dafny.ISequence<Dafny.Rune> _out184;
                  _out184 = DCOMP.COMP.GenType(_1446_o, false, false);
                  _1447_genType = _out184;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1447_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                DAST._IType _1448_o = _1406_t;
                {
                  Dafny.ISequence<Dafny.Rune> _1449_genType;
                  Dafny.ISequence<Dafny.Rune> _out185;
                  _out185 = DCOMP.COMP.GenType(_1448_o, false, false);
                  _1449_genType = _out185;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1449_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            } else if (_source52.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _1450___mcc_h301 = _source52.dtor_Passthrough_a0;
              DAST._IType _1451_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1452_genType;
                Dafny.ISequence<Dafny.Rune> _out186;
                _out186 = DCOMP.COMP.GenType(_1451_o, false, false);
                _1452_genType = _out186;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1452_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _1453___mcc_h303 = _source52.dtor_TypeArg_a0;
              DAST._IType _1454_o = _1406_t;
              {
                Dafny.ISequence<Dafny.Rune> _1455_genType;
                Dafny.ISequence<Dafny.Rune> _out187;
                _out187 = DCOMP.COMP.GenType(_1454_o, false, false);
                _1455_genType = _out187;
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _1408_n), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0 / ")), _1407_d), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _1455_genType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
            }
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source49.is_StringLiteral) {
          Dafny.ISequence<Dafny.Rune> _1456___mcc_h7 = _source49.dtor_StringLiteral_a0;
          Dafny.ISequence<Dafny.Rune> _1457_l = _1456___mcc_h7;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\""), _1457_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\".chars().collect::<Vec<char>>()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else if (_source49.is_CharLiteral) {
          Dafny.Rune _1458___mcc_h8 = _source49.dtor_CharLiteral_a0;
          Dafny.Rune _1459_c = _1458___mcc_h8;
          {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::primitive::char::from_u32("), Std.Strings.__default.OfNat(new BigInteger((_1459_c).Value))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        } else {
          DAST._IType _1460___mcc_h9 = _source49.dtor_Null_a0;
          DAST._IType _1461_tpe = _1460___mcc_h9;
          {
            Dafny.ISequence<Dafny.Rune> _1462_tpeGen;
            Dafny.ISequence<Dafny.Rune> _out188;
            _out188 = DCOMP.COMP.GenType(_1461_tpe, false, false);
            _1462_tpeGen = _out188;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(None as "), _1462_tpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            isErased = false;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          }
        }
      } else if (_source48.is_Ident) {
        Dafny.ISequence<Dafny.Rune> _1463___mcc_h10 = _source48.dtor_Ident_a0;
        Dafny.ISequence<Dafny.Rune> _1464_name = _1463___mcc_h10;
        {
          s = DCOMP.__default.escapeIdent(_1464_name);
          if (!((@params).Contains(_1464_name))) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            isOwned = false;
          }
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1464_name);
        }
      } else if (_source48.is_Companion) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1465___mcc_h11 = _source48.dtor_Companion_a0;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1466_path = _1465___mcc_h11;
        {
          Dafny.ISequence<Dafny.Rune> _out189;
          _out189 = DCOMP.COMP.GenPath(_1466_path);
          s = _out189;
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source48.is_Tuple) {
        Dafny.ISequence<DAST._IExpression> _1467___mcc_h12 = _source48.dtor_Tuple_a0;
        Dafny.ISequence<DAST._IExpression> _1468_values = _1467___mcc_h12;
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(");
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1469_i;
          _1469_i = BigInteger.Zero;
          while ((_1469_i) < (new BigInteger((_1468_values).Count))) {
            if ((_1469_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" "));
            }
            Dafny.ISequence<Dafny.Rune> _1470_recursiveGen;
            bool _1471___v31;
            bool _1472_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1473_recIdents;
            Dafny.ISequence<Dafny.Rune> _out190;
            bool _out191;
            bool _out192;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out193;
            DCOMP.COMP.GenExpr((_1468_values).Select(_1469_i), selfIdent, @params, true, out _out190, out _out191, out _out192, out _out193);
            _1470_recursiveGen = _out190;
            _1471___v31 = _out191;
            _1472_isErased = _out192;
            _1473_recIdents = _out193;
            if (_1472_isErased) {
              _1470_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1470_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _1470_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(","));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1473_recIdents);
            _1469_i = (_1469_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_New) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1474___mcc_h13 = _source48.dtor_path;
        Dafny.ISequence<DAST._IType> _1475___mcc_h14 = _source48.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _1476___mcc_h15 = _source48.dtor_args;
        Dafny.ISequence<DAST._IExpression> _1477_args = _1476___mcc_h15;
        Dafny.ISequence<DAST._IType> _1478_typeArgs = _1475___mcc_h14;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1479_path = _1474___mcc_h13;
        {
          Dafny.ISequence<Dafny.Rune> _1480_path;
          Dafny.ISequence<Dafny.Rune> _out194;
          _out194 = DCOMP.COMP.GenPath(_1479_path);
          _1480_path = _out194;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1480_path);
          if ((new BigInteger((_1478_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<"));
            BigInteger _1481_i;
            _1481_i = BigInteger.Zero;
            while ((_1481_i) < (new BigInteger((_1478_typeArgs).Count))) {
              if ((_1481_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
              }
              Dafny.ISequence<Dafny.Rune> _1482_typeString;
              Dafny.ISequence<Dafny.Rune> _out195;
              _out195 = DCOMP.COMP.GenType((_1478_typeArgs).Select(_1481_i), false, false);
              _1482_typeString = _out195;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1482_typeString);
              _1481_i = (_1481_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::new("));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1483_i;
          _1483_i = BigInteger.Zero;
          while ((_1483_i) < (new BigInteger((_1477_args).Count))) {
            if ((_1483_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _1484_recursiveGen;
            bool _1485___v32;
            bool _1486_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1487_recIdents;
            Dafny.ISequence<Dafny.Rune> _out196;
            bool _out197;
            bool _out198;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out199;
            DCOMP.COMP.GenExpr((_1477_args).Select(_1483_i), selfIdent, @params, true, out _out196, out _out197, out _out198, out _out199);
            _1484_recursiveGen = _out196;
            _1485___v32 = _out197;
            _1486_isErased = _out198;
            _1487_recIdents = _out199;
            if (_1486_isErased) {
              _1484_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1484_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1484_recursiveGen);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1487_recIdents);
            _1483_i = (_1483_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = true;
        }
      } else if (_source48.is_NewArray) {
        Dafny.ISequence<DAST._IExpression> _1488___mcc_h16 = _source48.dtor_dims;
        DAST._IType _1489___mcc_h17 = _source48.dtor_typ;
        DAST._IType _1490_typ = _1489___mcc_h17;
        Dafny.ISequence<DAST._IExpression> _1491_dims = _1488___mcc_h16;
        {
          BigInteger _1492_i;
          _1492_i = (new BigInteger((_1491_dims).Count)) - (BigInteger.One);
          Dafny.ISequence<Dafny.Rune> _1493_genTyp;
          Dafny.ISequence<Dafny.Rune> _out200;
          _out200 = DCOMP.COMP.GenType(_1490_typ, false, false);
          _1493_genTyp = _out200;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1493_genTyp), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::std::default::Default>::default()"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          while ((_1492_i).Sign != -1) {
            Dafny.ISequence<Dafny.Rune> _1494_recursiveGen;
            bool _1495___v33;
            bool _1496_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1497_recIdents;
            Dafny.ISequence<Dafny.Rune> _out201;
            bool _out202;
            bool _out203;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out204;
            DCOMP.COMP.GenExpr((_1491_dims).Select(_1492_i), selfIdent, @params, true, out _out201, out _out202, out _out203, out _out204);
            _1494_recursiveGen = _out201;
            _1495___v33 = _out202;
            _1496_isErased = _out203;
            _1497_recIdents = _out204;
            if (!(_1496_isErased)) {
              _1494_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(::std::cell::RefCell::new(vec!["), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("; <usize as ::dafny_runtime::NumCast>::from(")), _1494_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]))"));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1497_recIdents);
            _1492_i = (_1492_i) - (BigInteger.One);
          }
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_DatatypeValue) {
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1498___mcc_h18 = _source48.dtor_path;
        Dafny.ISequence<DAST._IType> _1499___mcc_h19 = _source48.dtor_typeArgs;
        Dafny.ISequence<Dafny.Rune> _1500___mcc_h20 = _source48.dtor_variant;
        bool _1501___mcc_h21 = _source48.dtor_isCo;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1502___mcc_h22 = _source48.dtor_contents;
        Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _1503_values = _1502___mcc_h22;
        bool _1504_isCo = _1501___mcc_h21;
        Dafny.ISequence<Dafny.Rune> _1505_variant = _1500___mcc_h20;
        Dafny.ISequence<DAST._IType> _1506_typeArgs = _1499___mcc_h19;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1507_path = _1498___mcc_h18;
        {
          Dafny.ISequence<Dafny.Rune> _1508_path;
          Dafny.ISequence<Dafny.Rune> _out205;
          _out205 = DCOMP.COMP.GenPath(_1507_path);
          _1508_path = _out205;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new("), _1508_path), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
          if ((new BigInteger((_1506_typeArgs).Count)).Sign == 1) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"));
            BigInteger _1509_i;
            _1509_i = BigInteger.Zero;
            while ((_1509_i) < (new BigInteger((_1506_typeArgs).Count))) {
              if ((_1509_i).Sign == 1) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _1510_typeString;
              Dafny.ISequence<Dafny.Rune> _out206;
              _out206 = DCOMP.COMP.GenType((_1506_typeArgs).Select(_1509_i), false, false);
              _1510_typeString = _out206;
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, _1510_typeString);
              _1509_i = (_1509_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">::"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1505_variant));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _1511_i;
          _1511_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {"));
          while ((_1511_i) < (new BigInteger((_1503_values).Count))) {
            _System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression> _let_tmp_rhs41 = (_1503_values).Select(_1511_i);
            Dafny.ISequence<Dafny.Rune> _1512_name = _let_tmp_rhs41.dtor__0;
            DAST._IExpression _1513_value = _let_tmp_rhs41.dtor__1;
            if ((_1511_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            if (_1504_isCo) {
              Dafny.ISequence<Dafny.Rune> _1514_recursiveGen;
              bool _1515___v34;
              bool _1516_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1517_recIdents;
              Dafny.ISequence<Dafny.Rune> _out207;
              bool _out208;
              bool _out209;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out210;
              DCOMP.COMP.GenExpr(_1513_value, selfIdent, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(), true, out _out207, out _out208, out _out209, out _out210);
              _1514_recursiveGen = _out207;
              _1515___v34 = _out208;
              _1516_isErased = _out209;
              _1517_recIdents = _out210;
              if (!(_1516_isErased)) {
                _1514_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1514_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1517_recIdents);
              Dafny.ISequence<Dafny.Rune> _1518_allReadCloned;
              _1518_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
              while (!(_1517_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
                Dafny.ISequence<Dafny.Rune> _1519_next;
                foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_2 in (_1517_recIdents).Elements) {
                  _1519_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_2;
                  if ((_1517_recIdents).Contains(_1519_next)) {
                    goto after__ASSIGN_SUCH_THAT_2;
                  }
                }
                throw new System.Exception("assign-such-that search produced no value (line 1836)");
              after__ASSIGN_SUCH_THAT_2:;
                _1518_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_1518_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_1519_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_1519_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
                _1517_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_1517_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_1519_next));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1512_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ::dafny_runtime::LazyFieldWrapper(::dafny_runtime::Lazy::new(::std::boxed::Box::new({\n")), _1518_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move || (")), _1514_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")})))"));
            } else {
              Dafny.ISequence<Dafny.Rune> _1520_recursiveGen;
              bool _1521___v35;
              bool _1522_isErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1523_recIdents;
              Dafny.ISequence<Dafny.Rune> _out211;
              bool _out212;
              bool _out213;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out214;
              DCOMP.COMP.GenExpr(_1513_value, selfIdent, @params, true, out _out211, out _out212, out _out213, out _out214);
              _1520_recursiveGen = _out211;
              _1521___v35 = _out212;
              _1522_isErased = _out213;
              _1523_recIdents = _out214;
              if (!(_1522_isErased)) {
                _1520_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _1520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _1520_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _1520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent(_1512_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1520_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _1523_recIdents);
            }
            _1511_i = (_1511_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" })"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_Convert) {
        DAST._IExpression _1524___mcc_h23 = _source48.dtor_value;
        DAST._IType _1525___mcc_h24 = _source48.dtor_from;
        DAST._IType _1526___mcc_h25 = _source48.dtor_typ;
        DAST._IType _1527_toTpe = _1526___mcc_h25;
        DAST._IType _1528_fromTpe = _1525___mcc_h24;
        DAST._IExpression _1529_expr = _1524___mcc_h23;
        {
          if (object.Equals(_1528_fromTpe, _1527_toTpe)) {
            Dafny.ISequence<Dafny.Rune> _1530_recursiveGen;
            bool _1531_recOwned;
            bool _1532_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1533_recIdents;
            Dafny.ISequence<Dafny.Rune> _out215;
            bool _out216;
            bool _out217;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out218;
            DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out215, out _out216, out _out217, out _out218);
            _1530_recursiveGen = _out215;
            _1531_recOwned = _out216;
            _1532_recErased = _out217;
            _1533_recIdents = _out218;
            s = _1530_recursiveGen;
            isOwned = _1531_recOwned;
            isErased = _1532_recErased;
            readIdents = _1533_recIdents;
          } else {
            _System._ITuple2<DAST._IType, DAST._IType> _source54 = _System.Tuple2<DAST._IType, DAST._IType>.create(_1528_fromTpe, _1527_toTpe);
            DAST._IType _1534___mcc_h305 = _source54.dtor__0;
            DAST._IType _1535___mcc_h306 = _source54.dtor__1;
            DAST._IType _source55 = _1534___mcc_h305;
            if (_source55.is_Path) {
              Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1536___mcc_h309 = _source55.dtor_Path_a0;
              Dafny.ISequence<DAST._IType> _1537___mcc_h310 = _source55.dtor_typeArgs;
              DAST._IResolvedType _1538___mcc_h311 = _source55.dtor_resolved;
              DAST._IResolvedType _source56 = _1538___mcc_h311;
              if (_source56.is_Datatype) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1539___mcc_h321 = _source56.dtor_path;
                DAST._IType _source57 = _1535___mcc_h306;
                if (_source57.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1540___mcc_h325 = _source57.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1541___mcc_h326 = _source57.dtor_typeArgs;
                  DAST._IResolvedType _1542___mcc_h327 = _source57.dtor_resolved;
                  DAST._IResolvedType _source58 = _1542___mcc_h327;
                  if (_source58.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1543___mcc_h331 = _source58.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1544_recursiveGen;
                      bool _1545_recOwned;
                      bool _1546_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1547_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out219;
                      bool _out220;
                      bool _out221;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out222;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out219, out _out220, out _out221, out _out222);
                      _1544_recursiveGen = _out219;
                      _1545_recOwned = _out220;
                      _1546_recErased = _out221;
                      _1547_recIdents = _out222;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1544_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1545_recOwned;
                      isErased = _1546_recErased;
                      readIdents = _1547_recIdents;
                    }
                  } else if (_source58.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1548___mcc_h333 = _source58.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1549_recursiveGen;
                      bool _1550_recOwned;
                      bool _1551_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1552_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out223;
                      bool _out224;
                      bool _out225;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out226;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out223, out _out224, out _out225, out _out226);
                      _1549_recursiveGen = _out223;
                      _1550_recOwned = _out224;
                      _1551_recErased = _out225;
                      _1552_recIdents = _out226;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1549_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1550_recOwned;
                      isErased = _1551_recErased;
                      readIdents = _1552_recIdents;
                    }
                  } else {
                    DAST._IType _1553___mcc_h335 = _source58.dtor_Newtype_a0;
                    DAST._IType _1554_b = _1553___mcc_h335;
                    {
                      if (object.Equals(_1528_fromTpe, _1554_b)) {
                        Dafny.ISequence<Dafny.Rune> _1555_recursiveGen;
                        bool _1556_recOwned;
                        bool _1557_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1558_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out227;
                        bool _out228;
                        bool _out229;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out230;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out227, out _out228, out _out229, out _out230);
                        _1555_recursiveGen = _out227;
                        _1556_recOwned = _out228;
                        _1557_recErased = _out229;
                        _1558_recIdents = _out230;
                        Dafny.ISequence<Dafny.Rune> _1559_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out231;
                        _out231 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _1559_rhsType = _out231;
                        Dafny.ISequence<Dafny.Rune> _1560_uneraseFn;
                        _1560_uneraseFn = ((_1556_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1559_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1560_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1555_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1556_recOwned;
                        isErased = false;
                        readIdents = _1558_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out232;
                        bool _out233;
                        bool _out234;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out235;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1554_b), _1554_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out232, out _out233, out _out234, out _out235);
                        s = _out232;
                        isOwned = _out233;
                        isErased = _out234;
                        readIdents = _out235;
                      }
                    }
                  }
                } else if (_source57.is_Nullable) {
                  DAST._IType _1561___mcc_h337 = _source57.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1562_recursiveGen;
                    bool _1563_recOwned;
                    bool _1564_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1565_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out236;
                    bool _out237;
                    bool _out238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out239;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out236, out _out237, out _out238, out _out239);
                    _1562_recursiveGen = _out236;
                    _1563_recOwned = _out237;
                    _1564_recErased = _out238;
                    _1565_recIdents = _out239;
                    if (!(_1563_recOwned)) {
                      _1562_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1562_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1562_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1564_recErased;
                    readIdents = _1565_recIdents;
                  }
                } else if (_source57.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1566___mcc_h339 = _source57.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1567_recursiveGen;
                    bool _1568_recOwned;
                    bool _1569_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1570_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out240;
                    bool _out241;
                    bool _out242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out243;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out240, out _out241, out _out242, out _out243);
                    _1567_recursiveGen = _out240;
                    _1568_recOwned = _out241;
                    _1569_recErased = _out242;
                    _1570_recIdents = _out243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1567_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1568_recOwned;
                    isErased = _1569_recErased;
                    readIdents = _1570_recIdents;
                  }
                } else if (_source57.is_Array) {
                  DAST._IType _1571___mcc_h341 = _source57.dtor_element;
                  BigInteger _1572___mcc_h342 = _source57.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1573_recursiveGen;
                    bool _1574_recOwned;
                    bool _1575_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1576_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out244;
                    bool _out245;
                    bool _out246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out247;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out244, out _out245, out _out246, out _out247);
                    _1573_recursiveGen = _out244;
                    _1574_recOwned = _out245;
                    _1575_recErased = _out246;
                    _1576_recIdents = _out247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1573_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1574_recOwned;
                    isErased = _1575_recErased;
                    readIdents = _1576_recIdents;
                  }
                } else if (_source57.is_Seq) {
                  DAST._IType _1577___mcc_h345 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1578_recursiveGen;
                    bool _1579_recOwned;
                    bool _1580_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1581_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out248;
                    bool _out249;
                    bool _out250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out251;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out248, out _out249, out _out250, out _out251);
                    _1578_recursiveGen = _out248;
                    _1579_recOwned = _out249;
                    _1580_recErased = _out250;
                    _1581_recIdents = _out251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1578_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1579_recOwned;
                    isErased = _1580_recErased;
                    readIdents = _1581_recIdents;
                  }
                } else if (_source57.is_Set) {
                  DAST._IType _1582___mcc_h347 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1583_recursiveGen;
                    bool _1584_recOwned;
                    bool _1585_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1586_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out252;
                    bool _out253;
                    bool _out254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out255;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out252, out _out253, out _out254, out _out255);
                    _1583_recursiveGen = _out252;
                    _1584_recOwned = _out253;
                    _1585_recErased = _out254;
                    _1586_recIdents = _out255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1583_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1584_recOwned;
                    isErased = _1585_recErased;
                    readIdents = _1586_recIdents;
                  }
                } else if (_source57.is_Multiset) {
                  DAST._IType _1587___mcc_h349 = _source57.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1588_recursiveGen;
                    bool _1589_recOwned;
                    bool _1590_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1591_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out256;
                    bool _out257;
                    bool _out258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out259;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out256, out _out257, out _out258, out _out259);
                    _1588_recursiveGen = _out256;
                    _1589_recOwned = _out257;
                    _1590_recErased = _out258;
                    _1591_recIdents = _out259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1588_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1589_recOwned;
                    isErased = _1590_recErased;
                    readIdents = _1591_recIdents;
                  }
                } else if (_source57.is_Map) {
                  DAST._IType _1592___mcc_h351 = _source57.dtor_key;
                  DAST._IType _1593___mcc_h352 = _source57.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1594_recursiveGen;
                    bool _1595_recOwned;
                    bool _1596_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1597_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out260;
                    bool _out261;
                    bool _out262;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out263;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out260, out _out261, out _out262, out _out263);
                    _1594_recursiveGen = _out260;
                    _1595_recOwned = _out261;
                    _1596_recErased = _out262;
                    _1597_recIdents = _out263;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1594_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1595_recOwned;
                    isErased = _1596_recErased;
                    readIdents = _1597_recIdents;
                  }
                } else if (_source57.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1598___mcc_h355 = _source57.dtor_args;
                  DAST._IType _1599___mcc_h356 = _source57.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1600_recursiveGen;
                    bool _1601_recOwned;
                    bool _1602_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1603_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out264;
                    bool _out265;
                    bool _out266;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out267;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out264, out _out265, out _out266, out _out267);
                    _1600_recursiveGen = _out264;
                    _1601_recOwned = _out265;
                    _1602_recErased = _out266;
                    _1603_recIdents = _out267;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1600_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1601_recOwned;
                    isErased = _1602_recErased;
                    readIdents = _1603_recIdents;
                  }
                } else if (_source57.is_Primitive) {
                  DAST._IPrimitive _1604___mcc_h359 = _source57.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1605_recursiveGen;
                    bool _1606_recOwned;
                    bool _1607_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1608_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out268;
                    bool _out269;
                    bool _out270;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out271;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out268, out _out269, out _out270, out _out271);
                    _1605_recursiveGen = _out268;
                    _1606_recOwned = _out269;
                    _1607_recErased = _out270;
                    _1608_recIdents = _out271;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1605_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1606_recOwned;
                    isErased = _1607_recErased;
                    readIdents = _1608_recIdents;
                  }
                } else if (_source57.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1609___mcc_h361 = _source57.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1610_recursiveGen;
                    bool _1611_recOwned;
                    bool _1612_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1613_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out272;
                    bool _out273;
                    bool _out274;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out275;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out272, out _out273, out _out274, out _out275);
                    _1610_recursiveGen = _out272;
                    _1611_recOwned = _out273;
                    _1612_recErased = _out274;
                    _1613_recIdents = _out275;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1611_recOwned;
                    isErased = _1612_recErased;
                    readIdents = _1613_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1614___mcc_h363 = _source57.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1615_recursiveGen;
                    bool _1616_recOwned;
                    bool _1617_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1618_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out276;
                    bool _out277;
                    bool _out278;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out279;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out276, out _out277, out _out278, out _out279);
                    _1615_recursiveGen = _out276;
                    _1616_recOwned = _out277;
                    _1617_recErased = _out278;
                    _1618_recIdents = _out279;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1615_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1616_recOwned;
                    isErased = _1617_recErased;
                    readIdents = _1618_recIdents;
                  }
                }
              } else if (_source56.is_Trait) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1619___mcc_h365 = _source56.dtor_path;
                DAST._IType _source59 = _1535___mcc_h306;
                if (_source59.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1620___mcc_h369 = _source59.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1621___mcc_h370 = _source59.dtor_typeArgs;
                  DAST._IResolvedType _1622___mcc_h371 = _source59.dtor_resolved;
                  DAST._IResolvedType _source60 = _1622___mcc_h371;
                  if (_source60.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1623___mcc_h375 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1624_recursiveGen;
                      bool _1625_recOwned;
                      bool _1626_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1627_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out280;
                      bool _out281;
                      bool _out282;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out283;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out280, out _out281, out _out282, out _out283);
                      _1624_recursiveGen = _out280;
                      _1625_recOwned = _out281;
                      _1626_recErased = _out282;
                      _1627_recIdents = _out283;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1624_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1625_recOwned;
                      isErased = _1626_recErased;
                      readIdents = _1627_recIdents;
                    }
                  } else if (_source60.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1628___mcc_h377 = _source60.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _1629_recursiveGen;
                      bool _1630_recOwned;
                      bool _1631_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1632_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out284;
                      bool _out285;
                      bool _out286;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out287;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out284, out _out285, out _out286, out _out287);
                      _1629_recursiveGen = _out284;
                      _1630_recOwned = _out285;
                      _1631_recErased = _out286;
                      _1632_recIdents = _out287;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1629_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _1630_recOwned;
                      isErased = _1631_recErased;
                      readIdents = _1632_recIdents;
                    }
                  } else {
                    DAST._IType _1633___mcc_h379 = _source60.dtor_Newtype_a0;
                    DAST._IType _1634_b = _1633___mcc_h379;
                    {
                      if (object.Equals(_1528_fromTpe, _1634_b)) {
                        Dafny.ISequence<Dafny.Rune> _1635_recursiveGen;
                        bool _1636_recOwned;
                        bool _1637_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1638_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out288;
                        bool _out289;
                        bool _out290;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out291;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out288, out _out289, out _out290, out _out291);
                        _1635_recursiveGen = _out288;
                        _1636_recOwned = _out289;
                        _1637_recErased = _out290;
                        _1638_recIdents = _out291;
                        Dafny.ISequence<Dafny.Rune> _1639_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out292;
                        _out292 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _1639_rhsType = _out292;
                        Dafny.ISequence<Dafny.Rune> _1640_uneraseFn;
                        _1640_uneraseFn = ((_1636_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1639_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1640_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1635_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1636_recOwned;
                        isErased = false;
                        readIdents = _1638_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out293;
                        bool _out294;
                        bool _out295;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out296;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1634_b), _1634_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out293, out _out294, out _out295, out _out296);
                        s = _out293;
                        isOwned = _out294;
                        isErased = _out295;
                        readIdents = _out296;
                      }
                    }
                  }
                } else if (_source59.is_Nullable) {
                  DAST._IType _1641___mcc_h381 = _source59.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1642_recursiveGen;
                    bool _1643_recOwned;
                    bool _1644_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1645_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out297;
                    bool _out298;
                    bool _out299;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out300;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out297, out _out298, out _out299, out _out300);
                    _1642_recursiveGen = _out297;
                    _1643_recOwned = _out298;
                    _1644_recErased = _out299;
                    _1645_recIdents = _out300;
                    if (!(_1643_recOwned)) {
                      _1642_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1642_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1642_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1644_recErased;
                    readIdents = _1645_recIdents;
                  }
                } else if (_source59.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1646___mcc_h383 = _source59.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1647_recursiveGen;
                    bool _1648_recOwned;
                    bool _1649_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1650_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out301;
                    bool _out302;
                    bool _out303;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out304;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out301, out _out302, out _out303, out _out304);
                    _1647_recursiveGen = _out301;
                    _1648_recOwned = _out302;
                    _1649_recErased = _out303;
                    _1650_recIdents = _out304;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1647_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1648_recOwned;
                    isErased = _1649_recErased;
                    readIdents = _1650_recIdents;
                  }
                } else if (_source59.is_Array) {
                  DAST._IType _1651___mcc_h385 = _source59.dtor_element;
                  BigInteger _1652___mcc_h386 = _source59.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _1653_recursiveGen;
                    bool _1654_recOwned;
                    bool _1655_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1656_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out305;
                    bool _out306;
                    bool _out307;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out308;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out305, out _out306, out _out307, out _out308);
                    _1653_recursiveGen = _out305;
                    _1654_recOwned = _out306;
                    _1655_recErased = _out307;
                    _1656_recIdents = _out308;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1653_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1654_recOwned;
                    isErased = _1655_recErased;
                    readIdents = _1656_recIdents;
                  }
                } else if (_source59.is_Seq) {
                  DAST._IType _1657___mcc_h389 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1658_recursiveGen;
                    bool _1659_recOwned;
                    bool _1660_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1661_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out309;
                    bool _out310;
                    bool _out311;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out312;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out309, out _out310, out _out311, out _out312);
                    _1658_recursiveGen = _out309;
                    _1659_recOwned = _out310;
                    _1660_recErased = _out311;
                    _1661_recIdents = _out312;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1659_recOwned;
                    isErased = _1660_recErased;
                    readIdents = _1661_recIdents;
                  }
                } else if (_source59.is_Set) {
                  DAST._IType _1662___mcc_h391 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1663_recursiveGen;
                    bool _1664_recOwned;
                    bool _1665_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1666_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out313;
                    bool _out314;
                    bool _out315;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out316;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out313, out _out314, out _out315, out _out316);
                    _1663_recursiveGen = _out313;
                    _1664_recOwned = _out314;
                    _1665_recErased = _out315;
                    _1666_recIdents = _out316;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1663_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1664_recOwned;
                    isErased = _1665_recErased;
                    readIdents = _1666_recIdents;
                  }
                } else if (_source59.is_Multiset) {
                  DAST._IType _1667___mcc_h393 = _source59.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _1668_recursiveGen;
                    bool _1669_recOwned;
                    bool _1670_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1671_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out317;
                    bool _out318;
                    bool _out319;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out320;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out317, out _out318, out _out319, out _out320);
                    _1668_recursiveGen = _out317;
                    _1669_recOwned = _out318;
                    _1670_recErased = _out319;
                    _1671_recIdents = _out320;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1668_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1669_recOwned;
                    isErased = _1670_recErased;
                    readIdents = _1671_recIdents;
                  }
                } else if (_source59.is_Map) {
                  DAST._IType _1672___mcc_h395 = _source59.dtor_key;
                  DAST._IType _1673___mcc_h396 = _source59.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _1674_recursiveGen;
                    bool _1675_recOwned;
                    bool _1676_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1677_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out321;
                    bool _out322;
                    bool _out323;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out324;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out321, out _out322, out _out323, out _out324);
                    _1674_recursiveGen = _out321;
                    _1675_recOwned = _out322;
                    _1676_recErased = _out323;
                    _1677_recIdents = _out324;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1675_recOwned;
                    isErased = _1676_recErased;
                    readIdents = _1677_recIdents;
                  }
                } else if (_source59.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1678___mcc_h399 = _source59.dtor_args;
                  DAST._IType _1679___mcc_h400 = _source59.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _1680_recursiveGen;
                    bool _1681_recOwned;
                    bool _1682_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1683_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out325;
                    bool _out326;
                    bool _out327;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out328;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out325, out _out326, out _out327, out _out328);
                    _1680_recursiveGen = _out325;
                    _1681_recOwned = _out326;
                    _1682_recErased = _out327;
                    _1683_recIdents = _out328;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1680_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1681_recOwned;
                    isErased = _1682_recErased;
                    readIdents = _1683_recIdents;
                  }
                } else if (_source59.is_Primitive) {
                  DAST._IPrimitive _1684___mcc_h403 = _source59.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1685_recursiveGen;
                    bool _1686_recOwned;
                    bool _1687_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1688_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out329;
                    bool _out330;
                    bool _out331;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out332;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out329, out _out330, out _out331, out _out332);
                    _1685_recursiveGen = _out329;
                    _1686_recOwned = _out330;
                    _1687_recErased = _out331;
                    _1688_recIdents = _out332;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1685_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1686_recOwned;
                    isErased = _1687_recErased;
                    readIdents = _1688_recIdents;
                  }
                } else if (_source59.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1689___mcc_h405 = _source59.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1690_recursiveGen;
                    bool _1691_recOwned;
                    bool _1692_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1693_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out333;
                    bool _out334;
                    bool _out335;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out336;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out333, out _out334, out _out335, out _out336);
                    _1690_recursiveGen = _out333;
                    _1691_recOwned = _out334;
                    _1692_recErased = _out335;
                    _1693_recIdents = _out336;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1690_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1691_recOwned;
                    isErased = _1692_recErased;
                    readIdents = _1693_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1694___mcc_h407 = _source59.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1695_recursiveGen;
                    bool _1696_recOwned;
                    bool _1697_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1698_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out337;
                    bool _out338;
                    bool _out339;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out340;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out337, out _out338, out _out339, out _out340);
                    _1695_recursiveGen = _out337;
                    _1696_recOwned = _out338;
                    _1697_recErased = _out339;
                    _1698_recIdents = _out340;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1695_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1696_recOwned;
                    isErased = _1697_recErased;
                    readIdents = _1698_recIdents;
                  }
                }
              } else {
                DAST._IType _1699___mcc_h409 = _source56.dtor_Newtype_a0;
                DAST._IType _source61 = _1535___mcc_h306;
                if (_source61.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1700___mcc_h413 = _source61.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _1701___mcc_h414 = _source61.dtor_typeArgs;
                  DAST._IResolvedType _1702___mcc_h415 = _source61.dtor_resolved;
                  DAST._IResolvedType _source62 = _1702___mcc_h415;
                  if (_source62.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1703___mcc_h422 = _source62.dtor_path;
                    DAST._IType _1704_b = _1699___mcc_h409;
                    {
                      if (object.Equals(_1704_b, _1527_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1705_recursiveGen;
                        bool _1706_recOwned;
                        bool _1707_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1708_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out341;
                        bool _out342;
                        bool _out343;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out344;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out341, out _out342, out _out343, out _out344);
                        _1705_recursiveGen = _out341;
                        _1706_recOwned = _out342;
                        _1707_recErased = _out343;
                        _1708_recIdents = _out344;
                        Dafny.ISequence<Dafny.Rune> _1709_uneraseFn;
                        _1709_uneraseFn = ((_1706_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1709_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1705_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1706_recOwned;
                        isErased = true;
                        readIdents = _1708_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out345;
                        bool _out346;
                        bool _out347;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out348;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1704_b), _1704_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out345, out _out346, out _out347, out _out348);
                        s = _out345;
                        isOwned = _out346;
                        isErased = _out347;
                        readIdents = _out348;
                      }
                    }
                  } else if (_source62.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1710___mcc_h425 = _source62.dtor_path;
                    DAST._IType _1711_b = _1699___mcc_h409;
                    {
                      if (object.Equals(_1711_b, _1527_toTpe)) {
                        Dafny.ISequence<Dafny.Rune> _1712_recursiveGen;
                        bool _1713_recOwned;
                        bool _1714_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1715_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out349;
                        bool _out350;
                        bool _out351;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out352;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out349, out _out350, out _out351, out _out352);
                        _1712_recursiveGen = _out349;
                        _1713_recOwned = _out350;
                        _1714_recErased = _out351;
                        _1715_recIdents = _out352;
                        Dafny.ISequence<Dafny.Rune> _1716_uneraseFn;
                        _1716_uneraseFn = ((_1713_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1716_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1712_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1713_recOwned;
                        isErased = true;
                        readIdents = _1715_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out353;
                        bool _out354;
                        bool _out355;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out356;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1711_b), _1711_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out353, out _out354, out _out355, out _out356);
                        s = _out353;
                        isOwned = _out354;
                        isErased = _out355;
                        readIdents = _out356;
                      }
                    }
                  } else {
                    DAST._IType _1717___mcc_h428 = _source62.dtor_Newtype_a0;
                    DAST._IType _1718_b = _1717___mcc_h428;
                    {
                      if (object.Equals(_1528_fromTpe, _1718_b)) {
                        Dafny.ISequence<Dafny.Rune> _1719_recursiveGen;
                        bool _1720_recOwned;
                        bool _1721_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1722_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out357;
                        bool _out358;
                        bool _out359;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out360;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out357, out _out358, out _out359, out _out360);
                        _1719_recursiveGen = _out357;
                        _1720_recOwned = _out358;
                        _1721_recErased = _out359;
                        _1722_recIdents = _out360;
                        Dafny.ISequence<Dafny.Rune> _1723_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out361;
                        _out361 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _1723_rhsType = _out361;
                        Dafny.ISequence<Dafny.Rune> _1724_uneraseFn;
                        _1724_uneraseFn = ((_1720_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1723_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1724_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1719_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _1720_recOwned;
                        isErased = false;
                        readIdents = _1722_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out362;
                        bool _out363;
                        bool _out364;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out365;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1718_b), _1718_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out362, out _out363, out _out364, out _out365);
                        s = _out362;
                        isOwned = _out363;
                        isErased = _out364;
                        readIdents = _out365;
                      }
                    }
                  }
                } else if (_source61.is_Nullable) {
                  DAST._IType _1725___mcc_h431 = _source61.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1726_recursiveGen;
                    bool _1727_recOwned;
                    bool _1728_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1729_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out366;
                    bool _out367;
                    bool _out368;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out369;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out366, out _out367, out _out368, out _out369);
                    _1726_recursiveGen = _out366;
                    _1727_recOwned = _out367;
                    _1728_recErased = _out368;
                    _1729_recIdents = _out369;
                    if (!(_1727_recOwned)) {
                      _1726_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1726_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1726_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _1728_recErased;
                    readIdents = _1729_recIdents;
                  }
                } else if (_source61.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _1730___mcc_h434 = _source61.dtor_Tuple_a0;
                  DAST._IType _1731_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1731_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1732_recursiveGen;
                      bool _1733_recOwned;
                      bool _1734_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1735_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out370;
                      bool _out371;
                      bool _out372;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out373;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out370, out _out371, out _out372, out _out373);
                      _1732_recursiveGen = _out370;
                      _1733_recOwned = _out371;
                      _1734_recErased = _out372;
                      _1735_recIdents = _out373;
                      Dafny.ISequence<Dafny.Rune> _1736_uneraseFn;
                      _1736_uneraseFn = ((_1733_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1736_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1732_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1733_recOwned;
                      isErased = true;
                      readIdents = _1735_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out374;
                      bool _out375;
                      bool _out376;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out377;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1731_b), _1731_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out374, out _out375, out _out376, out _out377);
                      s = _out374;
                      isOwned = _out375;
                      isErased = _out376;
                      readIdents = _out377;
                    }
                  }
                } else if (_source61.is_Array) {
                  DAST._IType _1737___mcc_h437 = _source61.dtor_element;
                  BigInteger _1738___mcc_h438 = _source61.dtor_dims;
                  DAST._IType _1739_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1739_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1740_recursiveGen;
                      bool _1741_recOwned;
                      bool _1742_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1743_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out378;
                      bool _out379;
                      bool _out380;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out381;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out378, out _out379, out _out380, out _out381);
                      _1740_recursiveGen = _out378;
                      _1741_recOwned = _out379;
                      _1742_recErased = _out380;
                      _1743_recIdents = _out381;
                      Dafny.ISequence<Dafny.Rune> _1744_uneraseFn;
                      _1744_uneraseFn = ((_1741_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1744_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1740_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1741_recOwned;
                      isErased = true;
                      readIdents = _1743_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out382;
                      bool _out383;
                      bool _out384;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out385;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1739_b), _1739_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out382, out _out383, out _out384, out _out385);
                      s = _out382;
                      isOwned = _out383;
                      isErased = _out384;
                      readIdents = _out385;
                    }
                  }
                } else if (_source61.is_Seq) {
                  DAST._IType _1745___mcc_h443 = _source61.dtor_element;
                  DAST._IType _1746_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1746_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1747_recursiveGen;
                      bool _1748_recOwned;
                      bool _1749_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1750_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out386;
                      bool _out387;
                      bool _out388;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out389;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out386, out _out387, out _out388, out _out389);
                      _1747_recursiveGen = _out386;
                      _1748_recOwned = _out387;
                      _1749_recErased = _out388;
                      _1750_recIdents = _out389;
                      Dafny.ISequence<Dafny.Rune> _1751_uneraseFn;
                      _1751_uneraseFn = ((_1748_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1751_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1747_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1748_recOwned;
                      isErased = true;
                      readIdents = _1750_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out390;
                      bool _out391;
                      bool _out392;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out393;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1746_b), _1746_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out390, out _out391, out _out392, out _out393);
                      s = _out390;
                      isOwned = _out391;
                      isErased = _out392;
                      readIdents = _out393;
                    }
                  }
                } else if (_source61.is_Set) {
                  DAST._IType _1752___mcc_h446 = _source61.dtor_element;
                  DAST._IType _1753_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1753_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1754_recursiveGen;
                      bool _1755_recOwned;
                      bool _1756_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1757_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out394;
                      bool _out395;
                      bool _out396;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out397;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out394, out _out395, out _out396, out _out397);
                      _1754_recursiveGen = _out394;
                      _1755_recOwned = _out395;
                      _1756_recErased = _out396;
                      _1757_recIdents = _out397;
                      Dafny.ISequence<Dafny.Rune> _1758_uneraseFn;
                      _1758_uneraseFn = ((_1755_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1758_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1754_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1755_recOwned;
                      isErased = true;
                      readIdents = _1757_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out398;
                      bool _out399;
                      bool _out400;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out401;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1753_b), _1753_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out398, out _out399, out _out400, out _out401);
                      s = _out398;
                      isOwned = _out399;
                      isErased = _out400;
                      readIdents = _out401;
                    }
                  }
                } else if (_source61.is_Multiset) {
                  DAST._IType _1759___mcc_h449 = _source61.dtor_element;
                  DAST._IType _1760_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1760_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1761_recursiveGen;
                      bool _1762_recOwned;
                      bool _1763_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1764_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out402;
                      bool _out403;
                      bool _out404;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out405;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out402, out _out403, out _out404, out _out405);
                      _1761_recursiveGen = _out402;
                      _1762_recOwned = _out403;
                      _1763_recErased = _out404;
                      _1764_recIdents = _out405;
                      Dafny.ISequence<Dafny.Rune> _1765_uneraseFn;
                      _1765_uneraseFn = ((_1762_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1765_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1761_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1762_recOwned;
                      isErased = true;
                      readIdents = _1764_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out406;
                      bool _out407;
                      bool _out408;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out409;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1760_b), _1760_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out406, out _out407, out _out408, out _out409);
                      s = _out406;
                      isOwned = _out407;
                      isErased = _out408;
                      readIdents = _out409;
                    }
                  }
                } else if (_source61.is_Map) {
                  DAST._IType _1766___mcc_h452 = _source61.dtor_key;
                  DAST._IType _1767___mcc_h453 = _source61.dtor_value;
                  DAST._IType _1768_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1768_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1769_recursiveGen;
                      bool _1770_recOwned;
                      bool _1771_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1772_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out410;
                      bool _out411;
                      bool _out412;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out413;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out410, out _out411, out _out412, out _out413);
                      _1769_recursiveGen = _out410;
                      _1770_recOwned = _out411;
                      _1771_recErased = _out412;
                      _1772_recIdents = _out413;
                      Dafny.ISequence<Dafny.Rune> _1773_uneraseFn;
                      _1773_uneraseFn = ((_1770_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1773_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1770_recOwned;
                      isErased = true;
                      readIdents = _1772_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out414;
                      bool _out415;
                      bool _out416;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out417;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1768_b), _1768_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out414, out _out415, out _out416, out _out417);
                      s = _out414;
                      isOwned = _out415;
                      isErased = _out416;
                      readIdents = _out417;
                    }
                  }
                } else if (_source61.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _1774___mcc_h458 = _source61.dtor_args;
                  DAST._IType _1775___mcc_h459 = _source61.dtor_result;
                  DAST._IType _1776_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1776_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1777_recursiveGen;
                      bool _1778_recOwned;
                      bool _1779_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1780_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out418;
                      bool _out419;
                      bool _out420;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out421;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out418, out _out419, out _out420, out _out421);
                      _1777_recursiveGen = _out418;
                      _1778_recOwned = _out419;
                      _1779_recErased = _out420;
                      _1780_recIdents = _out421;
                      Dafny.ISequence<Dafny.Rune> _1781_uneraseFn;
                      _1781_uneraseFn = ((_1778_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1781_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1777_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1778_recOwned;
                      isErased = true;
                      readIdents = _1780_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out422;
                      bool _out423;
                      bool _out424;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out425;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1776_b), _1776_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out422, out _out423, out _out424, out _out425);
                      s = _out422;
                      isOwned = _out423;
                      isErased = _out424;
                      readIdents = _out425;
                    }
                  }
                } else if (_source61.is_Primitive) {
                  DAST._IPrimitive _1782___mcc_h464 = _source61.dtor_Primitive_a0;
                  DAST._IType _1783_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1783_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1784_recursiveGen;
                      bool _1785_recOwned;
                      bool _1786_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1787_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out426;
                      bool _out427;
                      bool _out428;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out429;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out426, out _out427, out _out428, out _out429);
                      _1784_recursiveGen = _out426;
                      _1785_recOwned = _out427;
                      _1786_recErased = _out428;
                      _1787_recIdents = _out429;
                      Dafny.ISequence<Dafny.Rune> _1788_uneraseFn;
                      _1788_uneraseFn = ((_1785_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1788_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1784_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1785_recOwned;
                      isErased = true;
                      readIdents = _1787_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out430;
                      bool _out431;
                      bool _out432;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out433;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1783_b), _1783_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out430, out _out431, out _out432, out _out433);
                      s = _out430;
                      isOwned = _out431;
                      isErased = _out432;
                      readIdents = _out433;
                    }
                  }
                } else if (_source61.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _1789___mcc_h467 = _source61.dtor_Passthrough_a0;
                  DAST._IType _1790_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1790_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1791_recursiveGen;
                      bool _1792_recOwned;
                      bool _1793_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1794_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out434;
                      bool _out435;
                      bool _out436;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out437;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out434, out _out435, out _out436, out _out437);
                      _1791_recursiveGen = _out434;
                      _1792_recOwned = _out435;
                      _1793_recErased = _out436;
                      _1794_recIdents = _out437;
                      Dafny.ISequence<Dafny.Rune> _1795_uneraseFn;
                      _1795_uneraseFn = ((_1792_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1795_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1791_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1792_recOwned;
                      isErased = true;
                      readIdents = _1794_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out438;
                      bool _out439;
                      bool _out440;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out441;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1790_b), _1790_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out438, out _out439, out _out440, out _out441);
                      s = _out438;
                      isOwned = _out439;
                      isErased = _out440;
                      readIdents = _out441;
                    }
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _1796___mcc_h470 = _source61.dtor_TypeArg_a0;
                  DAST._IType _1797_b = _1699___mcc_h409;
                  {
                    if (object.Equals(_1797_b, _1527_toTpe)) {
                      Dafny.ISequence<Dafny.Rune> _1798_recursiveGen;
                      bool _1799_recOwned;
                      bool _1800_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1801_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out442;
                      bool _out443;
                      bool _out444;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out445;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out442, out _out443, out _out444, out _out445);
                      _1798_recursiveGen = _out442;
                      _1799_recOwned = _out443;
                      _1800_recErased = _out444;
                      _1801_recIdents = _out445;
                      Dafny.ISequence<Dafny.Rune> _1802_uneraseFn;
                      _1802_uneraseFn = ((_1799_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _1802_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1798_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1799_recOwned;
                      isErased = true;
                      readIdents = _1801_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out446;
                      bool _out447;
                      bool _out448;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out449;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1797_b), _1797_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out446, out _out447, out _out448, out _out449);
                      s = _out446;
                      isOwned = _out447;
                      isErased = _out448;
                      readIdents = _out449;
                    }
                  }
                }
              }
            } else if (_source55.is_Nullable) {
              DAST._IType _1803___mcc_h473 = _source55.dtor_Nullable_a0;
              DAST._IType _source63 = _1535___mcc_h306;
              if (_source63.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1804___mcc_h477 = _source63.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1805___mcc_h478 = _source63.dtor_typeArgs;
                DAST._IResolvedType _1806___mcc_h479 = _source63.dtor_resolved;
                DAST._IResolvedType _source64 = _1806___mcc_h479;
                if (_source64.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1807___mcc_h486 = _source64.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1808_recursiveGen;
                    bool _1809_recOwned;
                    bool _1810_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1811_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out450;
                    bool _out451;
                    bool _out452;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out453;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out450, out _out451, out _out452, out _out453);
                    _1808_recursiveGen = _out450;
                    _1809_recOwned = _out451;
                    _1810_recErased = _out452;
                    _1811_recIdents = _out453;
                    if (!(_1809_recOwned)) {
                      _1808_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1808_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1808_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1809_recOwned;
                    isErased = _1810_recErased;
                    readIdents = _1811_recIdents;
                  }
                } else if (_source64.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1812___mcc_h489 = _source64.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1813_recursiveGen;
                    bool _1814_recOwned;
                    bool _1815_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1816_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out454;
                    bool _out455;
                    bool _out456;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out457;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out454, out _out455, out _out456, out _out457);
                    _1813_recursiveGen = _out454;
                    _1814_recOwned = _out455;
                    _1815_recErased = _out456;
                    _1816_recIdents = _out457;
                    if (!(_1814_recOwned)) {
                      _1813_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1813_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1813_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1814_recOwned;
                    isErased = _1815_recErased;
                    readIdents = _1816_recIdents;
                  }
                } else {
                  DAST._IType _1817___mcc_h492 = _source64.dtor_Newtype_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _1818_recursiveGen;
                    bool _1819_recOwned;
                    bool _1820_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1821_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out458;
                    bool _out459;
                    bool _out460;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out461;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out458, out _out459, out _out460, out _out461);
                    _1818_recursiveGen = _out458;
                    _1819_recOwned = _out459;
                    _1820_recErased = _out460;
                    _1821_recIdents = _out461;
                    if (!(_1819_recOwned)) {
                      _1818_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1818_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(_1818_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                    isOwned = _1819_recOwned;
                    isErased = _1820_recErased;
                    readIdents = _1821_recIdents;
                  }
                }
              } else if (_source63.is_Nullable) {
                DAST._IType _1822___mcc_h495 = _source63.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1823_recursiveGen;
                  bool _1824_recOwned;
                  bool _1825_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1826_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out462;
                  bool _out463;
                  bool _out464;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out465;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out462, out _out463, out _out464, out _out465);
                  _1823_recursiveGen = _out462;
                  _1824_recOwned = _out463;
                  _1825_recErased = _out464;
                  _1826_recIdents = _out465;
                  if (!(_1824_recOwned)) {
                    _1823_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1823_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1823_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1824_recOwned;
                  isErased = _1825_recErased;
                  readIdents = _1826_recIdents;
                }
              } else if (_source63.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1827___mcc_h498 = _source63.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1828_recursiveGen;
                  bool _1829_recOwned;
                  bool _1830_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1831_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out466;
                  bool _out467;
                  bool _out468;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out469;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out466, out _out467, out _out468, out _out469);
                  _1828_recursiveGen = _out466;
                  _1829_recOwned = _out467;
                  _1830_recErased = _out468;
                  _1831_recIdents = _out469;
                  if (!(_1829_recOwned)) {
                    _1828_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1828_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1828_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1829_recOwned;
                  isErased = _1830_recErased;
                  readIdents = _1831_recIdents;
                }
              } else if (_source63.is_Array) {
                DAST._IType _1832___mcc_h501 = _source63.dtor_element;
                BigInteger _1833___mcc_h502 = _source63.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1834_recursiveGen;
                  bool _1835_recOwned;
                  bool _1836_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1837_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out470;
                  bool _out471;
                  bool _out472;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out473;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out470, out _out471, out _out472, out _out473);
                  _1834_recursiveGen = _out470;
                  _1835_recOwned = _out471;
                  _1836_recErased = _out472;
                  _1837_recIdents = _out473;
                  if (!(_1835_recOwned)) {
                    _1834_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1834_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1834_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1835_recOwned;
                  isErased = _1836_recErased;
                  readIdents = _1837_recIdents;
                }
              } else if (_source63.is_Seq) {
                DAST._IType _1838___mcc_h507 = _source63.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1839_recursiveGen;
                  bool _1840_recOwned;
                  bool _1841_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1842_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out474;
                  bool _out475;
                  bool _out476;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out477;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out474, out _out475, out _out476, out _out477);
                  _1839_recursiveGen = _out474;
                  _1840_recOwned = _out475;
                  _1841_recErased = _out476;
                  _1842_recIdents = _out477;
                  if (!(_1840_recOwned)) {
                    _1839_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1839_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1839_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1840_recOwned;
                  isErased = _1841_recErased;
                  readIdents = _1842_recIdents;
                }
              } else if (_source63.is_Set) {
                DAST._IType _1843___mcc_h510 = _source63.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1844_recursiveGen;
                  bool _1845_recOwned;
                  bool _1846_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1847_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out478;
                  bool _out479;
                  bool _out480;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out481;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out478, out _out479, out _out480, out _out481);
                  _1844_recursiveGen = _out478;
                  _1845_recOwned = _out479;
                  _1846_recErased = _out480;
                  _1847_recIdents = _out481;
                  if (!(_1845_recOwned)) {
                    _1844_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1844_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1844_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1845_recOwned;
                  isErased = _1846_recErased;
                  readIdents = _1847_recIdents;
                }
              } else if (_source63.is_Multiset) {
                DAST._IType _1848___mcc_h513 = _source63.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1849_recursiveGen;
                  bool _1850_recOwned;
                  bool _1851_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1852_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out482;
                  bool _out483;
                  bool _out484;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out485;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out482, out _out483, out _out484, out _out485);
                  _1849_recursiveGen = _out482;
                  _1850_recOwned = _out483;
                  _1851_recErased = _out484;
                  _1852_recIdents = _out485;
                  if (!(_1850_recOwned)) {
                    _1849_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1849_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1849_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1850_recOwned;
                  isErased = _1851_recErased;
                  readIdents = _1852_recIdents;
                }
              } else if (_source63.is_Map) {
                DAST._IType _1853___mcc_h516 = _source63.dtor_key;
                DAST._IType _1854___mcc_h517 = _source63.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1855_recursiveGen;
                  bool _1856_recOwned;
                  bool _1857_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1858_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out486;
                  bool _out487;
                  bool _out488;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out489;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out486, out _out487, out _out488, out _out489);
                  _1855_recursiveGen = _out486;
                  _1856_recOwned = _out487;
                  _1857_recErased = _out488;
                  _1858_recIdents = _out489;
                  if (!(_1856_recOwned)) {
                    _1855_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1855_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1855_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1856_recOwned;
                  isErased = _1857_recErased;
                  readIdents = _1858_recIdents;
                }
              } else if (_source63.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1859___mcc_h522 = _source63.dtor_args;
                DAST._IType _1860___mcc_h523 = _source63.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1861_recursiveGen;
                  bool _1862_recOwned;
                  bool _1863_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1864_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out490;
                  bool _out491;
                  bool _out492;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out493;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out490, out _out491, out _out492, out _out493);
                  _1861_recursiveGen = _out490;
                  _1862_recOwned = _out491;
                  _1863_recErased = _out492;
                  _1864_recIdents = _out493;
                  if (!(_1862_recOwned)) {
                    _1861_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1861_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1861_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1862_recOwned;
                  isErased = _1863_recErased;
                  readIdents = _1864_recIdents;
                }
              } else if (_source63.is_Primitive) {
                DAST._IPrimitive _1865___mcc_h528 = _source63.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1866_recursiveGen;
                  bool _1867_recOwned;
                  bool _1868_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1869_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out494;
                  bool _out495;
                  bool _out496;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out497;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out494, out _out495, out _out496, out _out497);
                  _1866_recursiveGen = _out494;
                  _1867_recOwned = _out495;
                  _1868_recErased = _out496;
                  _1869_recIdents = _out497;
                  if (!(_1867_recOwned)) {
                    _1866_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1866_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1867_recOwned;
                  isErased = _1868_recErased;
                  readIdents = _1869_recIdents;
                }
              } else if (_source63.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1870___mcc_h531 = _source63.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1871_recursiveGen;
                  bool _1872_recOwned;
                  bool _1873_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1874_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out498;
                  bool _out499;
                  bool _out500;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out501;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out498, out _out499, out _out500, out _out501);
                  _1871_recursiveGen = _out498;
                  _1872_recOwned = _out499;
                  _1873_recErased = _out500;
                  _1874_recIdents = _out501;
                  if (!(_1872_recOwned)) {
                    _1871_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1871_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1871_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1872_recOwned;
                  isErased = _1873_recErased;
                  readIdents = _1874_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1875___mcc_h534 = _source63.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1876_recursiveGen;
                  bool _1877_recOwned;
                  bool _1878_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1879_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out502;
                  bool _out503;
                  bool _out504;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out505;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out502, out _out503, out _out504, out _out505);
                  _1876_recursiveGen = _out502;
                  _1877_recOwned = _out503;
                  _1878_recErased = _out504;
                  _1879_recIdents = _out505;
                  if (!(_1877_recOwned)) {
                    _1876_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1876_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(_1876_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".unwrap()"));
                  isOwned = _1877_recOwned;
                  isErased = _1878_recErased;
                  readIdents = _1879_recIdents;
                }
              }
            } else if (_source55.is_Tuple) {
              Dafny.ISequence<DAST._IType> _1880___mcc_h537 = _source55.dtor_Tuple_a0;
              DAST._IType _source65 = _1535___mcc_h306;
              if (_source65.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1881___mcc_h541 = _source65.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1882___mcc_h542 = _source65.dtor_typeArgs;
                DAST._IResolvedType _1883___mcc_h543 = _source65.dtor_resolved;
                DAST._IResolvedType _source66 = _1883___mcc_h543;
                if (_source66.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1884___mcc_h547 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1885_recursiveGen;
                    bool _1886_recOwned;
                    bool _1887_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1888_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out506;
                    bool _out507;
                    bool _out508;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out509;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out506, out _out507, out _out508, out _out509);
                    _1885_recursiveGen = _out506;
                    _1886_recOwned = _out507;
                    _1887_recErased = _out508;
                    _1888_recIdents = _out509;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1885_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1886_recOwned;
                    isErased = _1887_recErased;
                    readIdents = _1888_recIdents;
                  }
                } else if (_source66.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1889___mcc_h549 = _source66.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1890_recursiveGen;
                    bool _1891_recOwned;
                    bool _1892_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1893_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out510;
                    bool _out511;
                    bool _out512;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out513;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out510, out _out511, out _out512, out _out513);
                    _1890_recursiveGen = _out510;
                    _1891_recOwned = _out511;
                    _1892_recErased = _out512;
                    _1893_recIdents = _out513;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1890_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1891_recOwned;
                    isErased = _1892_recErased;
                    readIdents = _1893_recIdents;
                  }
                } else {
                  DAST._IType _1894___mcc_h551 = _source66.dtor_Newtype_a0;
                  DAST._IType _1895_b = _1894___mcc_h551;
                  {
                    if (object.Equals(_1528_fromTpe, _1895_b)) {
                      Dafny.ISequence<Dafny.Rune> _1896_recursiveGen;
                      bool _1897_recOwned;
                      bool _1898_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1899_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out514;
                      bool _out515;
                      bool _out516;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out517;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out514, out _out515, out _out516, out _out517);
                      _1896_recursiveGen = _out514;
                      _1897_recOwned = _out515;
                      _1898_recErased = _out516;
                      _1899_recIdents = _out517;
                      Dafny.ISequence<Dafny.Rune> _1900_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out518;
                      _out518 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _1900_rhsType = _out518;
                      Dafny.ISequence<Dafny.Rune> _1901_uneraseFn;
                      _1901_uneraseFn = ((_1897_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1900_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1901_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1896_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1897_recOwned;
                      isErased = false;
                      readIdents = _1899_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out519;
                      bool _out520;
                      bool _out521;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out522;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1895_b), _1895_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out519, out _out520, out _out521, out _out522);
                      s = _out519;
                      isOwned = _out520;
                      isErased = _out521;
                      readIdents = _out522;
                    }
                  }
                }
              } else if (_source65.is_Nullable) {
                DAST._IType _1902___mcc_h553 = _source65.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1903_recursiveGen;
                  bool _1904_recOwned;
                  bool _1905_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1906_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out523;
                  bool _out524;
                  bool _out525;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out526;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out523, out _out524, out _out525, out _out526);
                  _1903_recursiveGen = _out523;
                  _1904_recOwned = _out524;
                  _1905_recErased = _out525;
                  _1906_recIdents = _out526;
                  if (!(_1904_recOwned)) {
                    _1903_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1903_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1903_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1905_recErased;
                  readIdents = _1906_recIdents;
                }
              } else if (_source65.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1907___mcc_h555 = _source65.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1908_recursiveGen;
                  bool _1909_recOwned;
                  bool _1910_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1911_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out527;
                  bool _out528;
                  bool _out529;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out530;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out527, out _out528, out _out529, out _out530);
                  _1908_recursiveGen = _out527;
                  _1909_recOwned = _out528;
                  _1910_recErased = _out529;
                  _1911_recIdents = _out530;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1908_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1909_recOwned;
                  isErased = _1910_recErased;
                  readIdents = _1911_recIdents;
                }
              } else if (_source65.is_Array) {
                DAST._IType _1912___mcc_h557 = _source65.dtor_element;
                BigInteger _1913___mcc_h558 = _source65.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1914_recursiveGen;
                  bool _1915_recOwned;
                  bool _1916_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1917_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out531;
                  bool _out532;
                  bool _out533;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out534;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out531, out _out532, out _out533, out _out534);
                  _1914_recursiveGen = _out531;
                  _1915_recOwned = _out532;
                  _1916_recErased = _out533;
                  _1917_recIdents = _out534;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1914_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1915_recOwned;
                  isErased = _1916_recErased;
                  readIdents = _1917_recIdents;
                }
              } else if (_source65.is_Seq) {
                DAST._IType _1918___mcc_h561 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1919_recursiveGen;
                  bool _1920_recOwned;
                  bool _1921_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1922_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out535;
                  bool _out536;
                  bool _out537;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out538;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out535, out _out536, out _out537, out _out538);
                  _1919_recursiveGen = _out535;
                  _1920_recOwned = _out536;
                  _1921_recErased = _out537;
                  _1922_recIdents = _out538;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1919_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1920_recOwned;
                  isErased = _1921_recErased;
                  readIdents = _1922_recIdents;
                }
              } else if (_source65.is_Set) {
                DAST._IType _1923___mcc_h563 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1924_recursiveGen;
                  bool _1925_recOwned;
                  bool _1926_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1927_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out539;
                  bool _out540;
                  bool _out541;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out542;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out539, out _out540, out _out541, out _out542);
                  _1924_recursiveGen = _out539;
                  _1925_recOwned = _out540;
                  _1926_recErased = _out541;
                  _1927_recIdents = _out542;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1925_recOwned;
                  isErased = _1926_recErased;
                  readIdents = _1927_recIdents;
                }
              } else if (_source65.is_Multiset) {
                DAST._IType _1928___mcc_h565 = _source65.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _1929_recursiveGen;
                  bool _1930_recOwned;
                  bool _1931_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1932_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out543;
                  bool _out544;
                  bool _out545;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out546;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out543, out _out544, out _out545, out _out546);
                  _1929_recursiveGen = _out543;
                  _1930_recOwned = _out544;
                  _1931_recErased = _out545;
                  _1932_recIdents = _out546;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1929_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1930_recOwned;
                  isErased = _1931_recErased;
                  readIdents = _1932_recIdents;
                }
              } else if (_source65.is_Map) {
                DAST._IType _1933___mcc_h567 = _source65.dtor_key;
                DAST._IType _1934___mcc_h568 = _source65.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _1935_recursiveGen;
                  bool _1936_recOwned;
                  bool _1937_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1938_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out547;
                  bool _out548;
                  bool _out549;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out550;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out547, out _out548, out _out549, out _out550);
                  _1935_recursiveGen = _out547;
                  _1936_recOwned = _out548;
                  _1937_recErased = _out549;
                  _1938_recIdents = _out550;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1935_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1936_recOwned;
                  isErased = _1937_recErased;
                  readIdents = _1938_recIdents;
                }
              } else if (_source65.is_Arrow) {
                Dafny.ISequence<DAST._IType> _1939___mcc_h571 = _source65.dtor_args;
                DAST._IType _1940___mcc_h572 = _source65.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _1941_recursiveGen;
                  bool _1942_recOwned;
                  bool _1943_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1944_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out551;
                  bool _out552;
                  bool _out553;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out554;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out551, out _out552, out _out553, out _out554);
                  _1941_recursiveGen = _out551;
                  _1942_recOwned = _out552;
                  _1943_recErased = _out553;
                  _1944_recIdents = _out554;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1941_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1942_recOwned;
                  isErased = _1943_recErased;
                  readIdents = _1944_recIdents;
                }
              } else if (_source65.is_Primitive) {
                DAST._IPrimitive _1945___mcc_h575 = _source65.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1946_recursiveGen;
                  bool _1947_recOwned;
                  bool _1948_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1949_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out555;
                  bool _out556;
                  bool _out557;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out558;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out555, out _out556, out _out557, out _out558);
                  _1946_recursiveGen = _out555;
                  _1947_recOwned = _out556;
                  _1948_recErased = _out557;
                  _1949_recIdents = _out558;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1946_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1947_recOwned;
                  isErased = _1948_recErased;
                  readIdents = _1949_recIdents;
                }
              } else if (_source65.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _1950___mcc_h577 = _source65.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1951_recursiveGen;
                  bool _1952_recOwned;
                  bool _1953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out559;
                  bool _out560;
                  bool _out561;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out562;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out559, out _out560, out _out561, out _out562);
                  _1951_recursiveGen = _out559;
                  _1952_recOwned = _out560;
                  _1953_recErased = _out561;
                  _1954_recIdents = _out562;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1952_recOwned;
                  isErased = _1953_recErased;
                  readIdents = _1954_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _1955___mcc_h579 = _source65.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1956_recursiveGen;
                  bool _1957_recOwned;
                  bool _1958_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1959_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out563;
                  bool _out564;
                  bool _out565;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out566;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out563, out _out564, out _out565, out _out566);
                  _1956_recursiveGen = _out563;
                  _1957_recOwned = _out564;
                  _1958_recErased = _out565;
                  _1959_recIdents = _out566;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1956_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1957_recOwned;
                  isErased = _1958_recErased;
                  readIdents = _1959_recIdents;
                }
              }
            } else if (_source55.is_Array) {
              DAST._IType _1960___mcc_h581 = _source55.dtor_element;
              BigInteger _1961___mcc_h582 = _source55.dtor_dims;
              DAST._IType _source67 = _1535___mcc_h306;
              if (_source67.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1962___mcc_h589 = _source67.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _1963___mcc_h590 = _source67.dtor_typeArgs;
                DAST._IResolvedType _1964___mcc_h591 = _source67.dtor_resolved;
                DAST._IResolvedType _source68 = _1964___mcc_h591;
                if (_source68.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1965___mcc_h595 = _source68.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1966_recursiveGen;
                    bool _1967_recOwned;
                    bool _1968_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1969_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out567;
                    bool _out568;
                    bool _out569;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out570;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out567, out _out568, out _out569, out _out570);
                    _1966_recursiveGen = _out567;
                    _1967_recOwned = _out568;
                    _1968_recErased = _out569;
                    _1969_recIdents = _out570;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1966_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1967_recOwned;
                    isErased = _1968_recErased;
                    readIdents = _1969_recIdents;
                  }
                } else if (_source68.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _1970___mcc_h597 = _source68.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _1971_recursiveGen;
                    bool _1972_recOwned;
                    bool _1973_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1974_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out571;
                    bool _out572;
                    bool _out573;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out574;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out571, out _out572, out _out573, out _out574);
                    _1971_recursiveGen = _out571;
                    _1972_recOwned = _out572;
                    _1973_recErased = _out573;
                    _1974_recIdents = _out574;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1971_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _1972_recOwned;
                    isErased = _1973_recErased;
                    readIdents = _1974_recIdents;
                  }
                } else {
                  DAST._IType _1975___mcc_h599 = _source68.dtor_Newtype_a0;
                  DAST._IType _1976_b = _1975___mcc_h599;
                  {
                    if (object.Equals(_1528_fromTpe, _1976_b)) {
                      Dafny.ISequence<Dafny.Rune> _1977_recursiveGen;
                      bool _1978_recOwned;
                      bool _1979_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1980_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out575;
                      bool _out576;
                      bool _out577;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out578;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out575, out _out576, out _out577, out _out578);
                      _1977_recursiveGen = _out575;
                      _1978_recOwned = _out576;
                      _1979_recErased = _out577;
                      _1980_recIdents = _out578;
                      Dafny.ISequence<Dafny.Rune> _1981_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out579;
                      _out579 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _1981_rhsType = _out579;
                      Dafny.ISequence<Dafny.Rune> _1982_uneraseFn;
                      _1982_uneraseFn = ((_1978_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _1981_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _1982_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _1977_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _1978_recOwned;
                      isErased = false;
                      readIdents = _1980_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out580;
                      bool _out581;
                      bool _out582;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out583;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _1976_b), _1976_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out580, out _out581, out _out582, out _out583);
                      s = _out580;
                      isOwned = _out581;
                      isErased = _out582;
                      readIdents = _out583;
                    }
                  }
                }
              } else if (_source67.is_Nullable) {
                DAST._IType _1983___mcc_h601 = _source67.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1984_recursiveGen;
                  bool _1985_recOwned;
                  bool _1986_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1987_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out584;
                  bool _out585;
                  bool _out586;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out587;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out584, out _out585, out _out586, out _out587);
                  _1984_recursiveGen = _out584;
                  _1985_recOwned = _out585;
                  _1986_recErased = _out586;
                  _1987_recIdents = _out587;
                  if (!(_1985_recOwned)) {
                    _1984_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_1984_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _1984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _1986_recErased;
                  readIdents = _1987_recIdents;
                }
              } else if (_source67.is_Tuple) {
                Dafny.ISequence<DAST._IType> _1988___mcc_h603 = _source67.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _1989_recursiveGen;
                  bool _1990_recOwned;
                  bool _1991_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1992_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out588;
                  bool _out589;
                  bool _out590;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out591;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out588, out _out589, out _out590, out _out591);
                  _1989_recursiveGen = _out588;
                  _1990_recOwned = _out589;
                  _1991_recErased = _out590;
                  _1992_recIdents = _out591;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1989_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1990_recOwned;
                  isErased = _1991_recErased;
                  readIdents = _1992_recIdents;
                }
              } else if (_source67.is_Array) {
                DAST._IType _1993___mcc_h605 = _source67.dtor_element;
                BigInteger _1994___mcc_h606 = _source67.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _1995_recursiveGen;
                  bool _1996_recOwned;
                  bool _1997_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _1998_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out592;
                  bool _out593;
                  bool _out594;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out595;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out592, out _out593, out _out594, out _out595);
                  _1995_recursiveGen = _out592;
                  _1996_recOwned = _out593;
                  _1997_recErased = _out594;
                  _1998_recIdents = _out595;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _1995_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _1996_recOwned;
                  isErased = _1997_recErased;
                  readIdents = _1998_recIdents;
                }
              } else if (_source67.is_Seq) {
                DAST._IType _1999___mcc_h609 = _source67.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2000_recursiveGen;
                  bool _2001_recOwned;
                  bool _2002_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2003_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out596;
                  bool _out597;
                  bool _out598;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out599;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out596, out _out597, out _out598, out _out599);
                  _2000_recursiveGen = _out596;
                  _2001_recOwned = _out597;
                  _2002_recErased = _out598;
                  _2003_recIdents = _out599;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2000_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2001_recOwned;
                  isErased = _2002_recErased;
                  readIdents = _2003_recIdents;
                }
              } else if (_source67.is_Set) {
                DAST._IType _2004___mcc_h611 = _source67.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2005_recursiveGen;
                  bool _2006_recOwned;
                  bool _2007_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2008_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out600;
                  bool _out601;
                  bool _out602;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out603;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out600, out _out601, out _out602, out _out603);
                  _2005_recursiveGen = _out600;
                  _2006_recOwned = _out601;
                  _2007_recErased = _out602;
                  _2008_recIdents = _out603;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2005_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2006_recOwned;
                  isErased = _2007_recErased;
                  readIdents = _2008_recIdents;
                }
              } else if (_source67.is_Multiset) {
                DAST._IType _2009___mcc_h613 = _source67.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2010_recursiveGen;
                  bool _2011_recOwned;
                  bool _2012_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2013_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out604;
                  bool _out605;
                  bool _out606;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out607;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out604, out _out605, out _out606, out _out607);
                  _2010_recursiveGen = _out604;
                  _2011_recOwned = _out605;
                  _2012_recErased = _out606;
                  _2013_recIdents = _out607;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2010_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2011_recOwned;
                  isErased = _2012_recErased;
                  readIdents = _2013_recIdents;
                }
              } else if (_source67.is_Map) {
                DAST._IType _2014___mcc_h615 = _source67.dtor_key;
                DAST._IType _2015___mcc_h616 = _source67.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2016_recursiveGen;
                  bool _2017_recOwned;
                  bool _2018_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2019_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out608;
                  bool _out609;
                  bool _out610;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out611;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out608, out _out609, out _out610, out _out611);
                  _2016_recursiveGen = _out608;
                  _2017_recOwned = _out609;
                  _2018_recErased = _out610;
                  _2019_recIdents = _out611;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2016_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2017_recOwned;
                  isErased = _2018_recErased;
                  readIdents = _2019_recIdents;
                }
              } else if (_source67.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2020___mcc_h619 = _source67.dtor_args;
                DAST._IType _2021___mcc_h620 = _source67.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2022_recursiveGen;
                  bool _2023_recOwned;
                  bool _2024_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2025_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out612;
                  bool _out613;
                  bool _out614;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out615;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out612, out _out613, out _out614, out _out615);
                  _2022_recursiveGen = _out612;
                  _2023_recOwned = _out613;
                  _2024_recErased = _out614;
                  _2025_recIdents = _out615;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2023_recOwned;
                  isErased = _2024_recErased;
                  readIdents = _2025_recIdents;
                }
              } else if (_source67.is_Primitive) {
                DAST._IPrimitive _2026___mcc_h623 = _source67.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2027_recursiveGen;
                  bool _2028_recOwned;
                  bool _2029_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2030_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out616;
                  bool _out617;
                  bool _out618;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out619;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out616, out _out617, out _out618, out _out619);
                  _2027_recursiveGen = _out616;
                  _2028_recOwned = _out617;
                  _2029_recErased = _out618;
                  _2030_recIdents = _out619;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2028_recOwned;
                  isErased = _2029_recErased;
                  readIdents = _2030_recIdents;
                }
              } else if (_source67.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2031___mcc_h625 = _source67.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2032_recursiveGen;
                  bool _2033_recOwned;
                  bool _2034_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2035_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out620;
                  bool _out621;
                  bool _out622;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out623;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out620, out _out621, out _out622, out _out623);
                  _2032_recursiveGen = _out620;
                  _2033_recOwned = _out621;
                  _2034_recErased = _out622;
                  _2035_recIdents = _out623;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2033_recOwned;
                  isErased = _2034_recErased;
                  readIdents = _2035_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2036___mcc_h627 = _source67.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2037_recursiveGen;
                  bool _2038_recOwned;
                  bool _2039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out624;
                  bool _out625;
                  bool _out626;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out627;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out624, out _out625, out _out626, out _out627);
                  _2037_recursiveGen = _out624;
                  _2038_recOwned = _out625;
                  _2039_recErased = _out626;
                  _2040_recIdents = _out627;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2038_recOwned;
                  isErased = _2039_recErased;
                  readIdents = _2040_recIdents;
                }
              }
            } else if (_source55.is_Seq) {
              DAST._IType _2041___mcc_h629 = _source55.dtor_element;
              DAST._IType _source69 = _1535___mcc_h306;
              if (_source69.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2042___mcc_h633 = _source69.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2043___mcc_h634 = _source69.dtor_typeArgs;
                DAST._IResolvedType _2044___mcc_h635 = _source69.dtor_resolved;
                DAST._IResolvedType _source70 = _2044___mcc_h635;
                if (_source70.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2045___mcc_h639 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2046_recursiveGen;
                    bool _2047_recOwned;
                    bool _2048_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2049_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out628;
                    bool _out629;
                    bool _out630;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out631;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out628, out _out629, out _out630, out _out631);
                    _2046_recursiveGen = _out628;
                    _2047_recOwned = _out629;
                    _2048_recErased = _out630;
                    _2049_recIdents = _out631;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2046_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2047_recOwned;
                    isErased = _2048_recErased;
                    readIdents = _2049_recIdents;
                  }
                } else if (_source70.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2050___mcc_h641 = _source70.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2051_recursiveGen;
                    bool _2052_recOwned;
                    bool _2053_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2054_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out632;
                    bool _out633;
                    bool _out634;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out635;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out632, out _out633, out _out634, out _out635);
                    _2051_recursiveGen = _out632;
                    _2052_recOwned = _out633;
                    _2053_recErased = _out634;
                    _2054_recIdents = _out635;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2051_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2052_recOwned;
                    isErased = _2053_recErased;
                    readIdents = _2054_recIdents;
                  }
                } else {
                  DAST._IType _2055___mcc_h643 = _source70.dtor_Newtype_a0;
                  DAST._IType _2056_b = _2055___mcc_h643;
                  {
                    if (object.Equals(_1528_fromTpe, _2056_b)) {
                      Dafny.ISequence<Dafny.Rune> _2057_recursiveGen;
                      bool _2058_recOwned;
                      bool _2059_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2060_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out636;
                      bool _out637;
                      bool _out638;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out639;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out636, out _out637, out _out638, out _out639);
                      _2057_recursiveGen = _out636;
                      _2058_recOwned = _out637;
                      _2059_recErased = _out638;
                      _2060_recIdents = _out639;
                      Dafny.ISequence<Dafny.Rune> _2061_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out640;
                      _out640 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2061_rhsType = _out640;
                      Dafny.ISequence<Dafny.Rune> _2062_uneraseFn;
                      _2062_uneraseFn = ((_2058_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2061_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2062_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2057_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2058_recOwned;
                      isErased = false;
                      readIdents = _2060_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out641;
                      bool _out642;
                      bool _out643;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out644;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2056_b), _2056_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out641, out _out642, out _out643, out _out644);
                      s = _out641;
                      isOwned = _out642;
                      isErased = _out643;
                      readIdents = _out644;
                    }
                  }
                }
              } else if (_source69.is_Nullable) {
                DAST._IType _2063___mcc_h645 = _source69.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2064_recursiveGen;
                  bool _2065_recOwned;
                  bool _2066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out645;
                  bool _out646;
                  bool _out647;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out648;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out645, out _out646, out _out647, out _out648);
                  _2064_recursiveGen = _out645;
                  _2065_recOwned = _out646;
                  _2066_recErased = _out647;
                  _2067_recIdents = _out648;
                  if (!(_2065_recOwned)) {
                    _2064_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2064_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2066_recErased;
                  readIdents = _2067_recIdents;
                }
              } else if (_source69.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2068___mcc_h647 = _source69.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2069_recursiveGen;
                  bool _2070_recOwned;
                  bool _2071_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2072_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out649;
                  bool _out650;
                  bool _out651;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out652;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out649, out _out650, out _out651, out _out652);
                  _2069_recursiveGen = _out649;
                  _2070_recOwned = _out650;
                  _2071_recErased = _out651;
                  _2072_recIdents = _out652;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2069_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2070_recOwned;
                  isErased = _2071_recErased;
                  readIdents = _2072_recIdents;
                }
              } else if (_source69.is_Array) {
                DAST._IType _2073___mcc_h649 = _source69.dtor_element;
                BigInteger _2074___mcc_h650 = _source69.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2075_recursiveGen;
                  bool _2076_recOwned;
                  bool _2077_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2078_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out653;
                  bool _out654;
                  bool _out655;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out656;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out653, out _out654, out _out655, out _out656);
                  _2075_recursiveGen = _out653;
                  _2076_recOwned = _out654;
                  _2077_recErased = _out655;
                  _2078_recIdents = _out656;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2075_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2076_recOwned;
                  isErased = _2077_recErased;
                  readIdents = _2078_recIdents;
                }
              } else if (_source69.is_Seq) {
                DAST._IType _2079___mcc_h653 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2080_recursiveGen;
                  bool _2081_recOwned;
                  bool _2082_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2083_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out657;
                  bool _out658;
                  bool _out659;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out660;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out657, out _out658, out _out659, out _out660);
                  _2080_recursiveGen = _out657;
                  _2081_recOwned = _out658;
                  _2082_recErased = _out659;
                  _2083_recIdents = _out660;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2080_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2081_recOwned;
                  isErased = _2082_recErased;
                  readIdents = _2083_recIdents;
                }
              } else if (_source69.is_Set) {
                DAST._IType _2084___mcc_h655 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2085_recursiveGen;
                  bool _2086_recOwned;
                  bool _2087_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2088_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out661;
                  bool _out662;
                  bool _out663;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out664;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out661, out _out662, out _out663, out _out664);
                  _2085_recursiveGen = _out661;
                  _2086_recOwned = _out662;
                  _2087_recErased = _out663;
                  _2088_recIdents = _out664;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2085_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2086_recOwned;
                  isErased = _2087_recErased;
                  readIdents = _2088_recIdents;
                }
              } else if (_source69.is_Multiset) {
                DAST._IType _2089___mcc_h657 = _source69.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2090_recursiveGen;
                  bool _2091_recOwned;
                  bool _2092_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2093_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out665;
                  bool _out666;
                  bool _out667;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out668;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out665, out _out666, out _out667, out _out668);
                  _2090_recursiveGen = _out665;
                  _2091_recOwned = _out666;
                  _2092_recErased = _out667;
                  _2093_recIdents = _out668;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2090_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2091_recOwned;
                  isErased = _2092_recErased;
                  readIdents = _2093_recIdents;
                }
              } else if (_source69.is_Map) {
                DAST._IType _2094___mcc_h659 = _source69.dtor_key;
                DAST._IType _2095___mcc_h660 = _source69.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2096_recursiveGen;
                  bool _2097_recOwned;
                  bool _2098_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2099_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out669;
                  bool _out670;
                  bool _out671;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out672;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out669, out _out670, out _out671, out _out672);
                  _2096_recursiveGen = _out669;
                  _2097_recOwned = _out670;
                  _2098_recErased = _out671;
                  _2099_recIdents = _out672;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2096_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2097_recOwned;
                  isErased = _2098_recErased;
                  readIdents = _2099_recIdents;
                }
              } else if (_source69.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2100___mcc_h663 = _source69.dtor_args;
                DAST._IType _2101___mcc_h664 = _source69.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2102_recursiveGen;
                  bool _2103_recOwned;
                  bool _2104_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2105_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out673;
                  bool _out674;
                  bool _out675;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out676;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out673, out _out674, out _out675, out _out676);
                  _2102_recursiveGen = _out673;
                  _2103_recOwned = _out674;
                  _2104_recErased = _out675;
                  _2105_recIdents = _out676;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2102_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2103_recOwned;
                  isErased = _2104_recErased;
                  readIdents = _2105_recIdents;
                }
              } else if (_source69.is_Primitive) {
                DAST._IPrimitive _2106___mcc_h667 = _source69.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2107_recursiveGen;
                  bool _2108_recOwned;
                  bool _2109_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2110_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out677;
                  bool _out678;
                  bool _out679;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out680;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out677, out _out678, out _out679, out _out680);
                  _2107_recursiveGen = _out677;
                  _2108_recOwned = _out678;
                  _2109_recErased = _out679;
                  _2110_recIdents = _out680;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2107_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2108_recOwned;
                  isErased = _2109_recErased;
                  readIdents = _2110_recIdents;
                }
              } else if (_source69.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2111___mcc_h669 = _source69.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2112_recursiveGen;
                  bool _2113_recOwned;
                  bool _2114_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2115_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out681;
                  bool _out682;
                  bool _out683;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out684;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out681, out _out682, out _out683, out _out684);
                  _2112_recursiveGen = _out681;
                  _2113_recOwned = _out682;
                  _2114_recErased = _out683;
                  _2115_recIdents = _out684;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2112_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2113_recOwned;
                  isErased = _2114_recErased;
                  readIdents = _2115_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2116___mcc_h671 = _source69.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2117_recursiveGen;
                  bool _2118_recOwned;
                  bool _2119_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2120_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out685;
                  bool _out686;
                  bool _out687;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out688;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out685, out _out686, out _out687, out _out688);
                  _2117_recursiveGen = _out685;
                  _2118_recOwned = _out686;
                  _2119_recErased = _out687;
                  _2120_recIdents = _out688;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2117_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2118_recOwned;
                  isErased = _2119_recErased;
                  readIdents = _2120_recIdents;
                }
              }
            } else if (_source55.is_Set) {
              DAST._IType _2121___mcc_h673 = _source55.dtor_element;
              DAST._IType _source71 = _1535___mcc_h306;
              if (_source71.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2122___mcc_h677 = _source71.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2123___mcc_h678 = _source71.dtor_typeArgs;
                DAST._IResolvedType _2124___mcc_h679 = _source71.dtor_resolved;
                DAST._IResolvedType _source72 = _2124___mcc_h679;
                if (_source72.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2125___mcc_h683 = _source72.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2126_recursiveGen;
                    bool _2127_recOwned;
                    bool _2128_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2129_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out689;
                    bool _out690;
                    bool _out691;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out692;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out689, out _out690, out _out691, out _out692);
                    _2126_recursiveGen = _out689;
                    _2127_recOwned = _out690;
                    _2128_recErased = _out691;
                    _2129_recIdents = _out692;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2126_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2127_recOwned;
                    isErased = _2128_recErased;
                    readIdents = _2129_recIdents;
                  }
                } else if (_source72.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2130___mcc_h685 = _source72.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2131_recursiveGen;
                    bool _2132_recOwned;
                    bool _2133_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2134_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out693;
                    bool _out694;
                    bool _out695;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out696;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out693, out _out694, out _out695, out _out696);
                    _2131_recursiveGen = _out693;
                    _2132_recOwned = _out694;
                    _2133_recErased = _out695;
                    _2134_recIdents = _out696;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2131_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2132_recOwned;
                    isErased = _2133_recErased;
                    readIdents = _2134_recIdents;
                  }
                } else {
                  DAST._IType _2135___mcc_h687 = _source72.dtor_Newtype_a0;
                  DAST._IType _2136_b = _2135___mcc_h687;
                  {
                    if (object.Equals(_1528_fromTpe, _2136_b)) {
                      Dafny.ISequence<Dafny.Rune> _2137_recursiveGen;
                      bool _2138_recOwned;
                      bool _2139_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2140_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out697;
                      bool _out698;
                      bool _out699;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out700;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out697, out _out698, out _out699, out _out700);
                      _2137_recursiveGen = _out697;
                      _2138_recOwned = _out698;
                      _2139_recErased = _out699;
                      _2140_recIdents = _out700;
                      Dafny.ISequence<Dafny.Rune> _2141_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out701;
                      _out701 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2141_rhsType = _out701;
                      Dafny.ISequence<Dafny.Rune> _2142_uneraseFn;
                      _2142_uneraseFn = ((_2138_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2141_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2142_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2137_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2138_recOwned;
                      isErased = false;
                      readIdents = _2140_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out702;
                      bool _out703;
                      bool _out704;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out705;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2136_b), _2136_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out702, out _out703, out _out704, out _out705);
                      s = _out702;
                      isOwned = _out703;
                      isErased = _out704;
                      readIdents = _out705;
                    }
                  }
                }
              } else if (_source71.is_Nullable) {
                DAST._IType _2143___mcc_h689 = _source71.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2144_recursiveGen;
                  bool _2145_recOwned;
                  bool _2146_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2147_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out706;
                  bool _out707;
                  bool _out708;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out709;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out706, out _out707, out _out708, out _out709);
                  _2144_recursiveGen = _out706;
                  _2145_recOwned = _out707;
                  _2146_recErased = _out708;
                  _2147_recIdents = _out709;
                  if (!(_2145_recOwned)) {
                    _2144_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2144_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2144_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2146_recErased;
                  readIdents = _2147_recIdents;
                }
              } else if (_source71.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2148___mcc_h691 = _source71.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2149_recursiveGen;
                  bool _2150_recOwned;
                  bool _2151_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2152_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out710;
                  bool _out711;
                  bool _out712;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out713;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out710, out _out711, out _out712, out _out713);
                  _2149_recursiveGen = _out710;
                  _2150_recOwned = _out711;
                  _2151_recErased = _out712;
                  _2152_recIdents = _out713;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2149_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2150_recOwned;
                  isErased = _2151_recErased;
                  readIdents = _2152_recIdents;
                }
              } else if (_source71.is_Array) {
                DAST._IType _2153___mcc_h693 = _source71.dtor_element;
                BigInteger _2154___mcc_h694 = _source71.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2155_recursiveGen;
                  bool _2156_recOwned;
                  bool _2157_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2158_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out714;
                  bool _out715;
                  bool _out716;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out717;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out714, out _out715, out _out716, out _out717);
                  _2155_recursiveGen = _out714;
                  _2156_recOwned = _out715;
                  _2157_recErased = _out716;
                  _2158_recIdents = _out717;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2155_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2156_recOwned;
                  isErased = _2157_recErased;
                  readIdents = _2158_recIdents;
                }
              } else if (_source71.is_Seq) {
                DAST._IType _2159___mcc_h697 = _source71.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2160_recursiveGen;
                  bool _2161_recOwned;
                  bool _2162_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2163_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out718;
                  bool _out719;
                  bool _out720;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out721;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out718, out _out719, out _out720, out _out721);
                  _2160_recursiveGen = _out718;
                  _2161_recOwned = _out719;
                  _2162_recErased = _out720;
                  _2163_recIdents = _out721;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2160_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2161_recOwned;
                  isErased = _2162_recErased;
                  readIdents = _2163_recIdents;
                }
              } else if (_source71.is_Set) {
                DAST._IType _2164___mcc_h699 = _source71.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2165_recursiveGen;
                  bool _2166_recOwned;
                  bool _2167_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2168_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out722;
                  bool _out723;
                  bool _out724;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out725;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out722, out _out723, out _out724, out _out725);
                  _2165_recursiveGen = _out722;
                  _2166_recOwned = _out723;
                  _2167_recErased = _out724;
                  _2168_recIdents = _out725;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2165_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2166_recOwned;
                  isErased = _2167_recErased;
                  readIdents = _2168_recIdents;
                }
              } else if (_source71.is_Multiset) {
                DAST._IType _2169___mcc_h701 = _source71.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2170_recursiveGen;
                  bool _2171_recOwned;
                  bool _2172_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2173_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out726;
                  bool _out727;
                  bool _out728;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out729;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out726, out _out727, out _out728, out _out729);
                  _2170_recursiveGen = _out726;
                  _2171_recOwned = _out727;
                  _2172_recErased = _out728;
                  _2173_recIdents = _out729;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2170_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2171_recOwned;
                  isErased = _2172_recErased;
                  readIdents = _2173_recIdents;
                }
              } else if (_source71.is_Map) {
                DAST._IType _2174___mcc_h703 = _source71.dtor_key;
                DAST._IType _2175___mcc_h704 = _source71.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2176_recursiveGen;
                  bool _2177_recOwned;
                  bool _2178_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2179_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out730;
                  bool _out731;
                  bool _out732;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out733;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out730, out _out731, out _out732, out _out733);
                  _2176_recursiveGen = _out730;
                  _2177_recOwned = _out731;
                  _2178_recErased = _out732;
                  _2179_recIdents = _out733;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2176_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2177_recOwned;
                  isErased = _2178_recErased;
                  readIdents = _2179_recIdents;
                }
              } else if (_source71.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2180___mcc_h707 = _source71.dtor_args;
                DAST._IType _2181___mcc_h708 = _source71.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2182_recursiveGen;
                  bool _2183_recOwned;
                  bool _2184_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2185_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out734;
                  bool _out735;
                  bool _out736;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out737;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out734, out _out735, out _out736, out _out737);
                  _2182_recursiveGen = _out734;
                  _2183_recOwned = _out735;
                  _2184_recErased = _out736;
                  _2185_recIdents = _out737;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2182_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2183_recOwned;
                  isErased = _2184_recErased;
                  readIdents = _2185_recIdents;
                }
              } else if (_source71.is_Primitive) {
                DAST._IPrimitive _2186___mcc_h711 = _source71.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2187_recursiveGen;
                  bool _2188_recOwned;
                  bool _2189_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2190_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out738;
                  bool _out739;
                  bool _out740;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out741;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out738, out _out739, out _out740, out _out741);
                  _2187_recursiveGen = _out738;
                  _2188_recOwned = _out739;
                  _2189_recErased = _out740;
                  _2190_recIdents = _out741;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2187_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2188_recOwned;
                  isErased = _2189_recErased;
                  readIdents = _2190_recIdents;
                }
              } else if (_source71.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2191___mcc_h713 = _source71.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2192_recursiveGen;
                  bool _2193_recOwned;
                  bool _2194_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2195_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out742;
                  bool _out743;
                  bool _out744;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out745;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out742, out _out743, out _out744, out _out745);
                  _2192_recursiveGen = _out742;
                  _2193_recOwned = _out743;
                  _2194_recErased = _out744;
                  _2195_recIdents = _out745;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2192_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2193_recOwned;
                  isErased = _2194_recErased;
                  readIdents = _2195_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2196___mcc_h715 = _source71.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2197_recursiveGen;
                  bool _2198_recOwned;
                  bool _2199_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2200_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out746;
                  bool _out747;
                  bool _out748;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out749;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out746, out _out747, out _out748, out _out749);
                  _2197_recursiveGen = _out746;
                  _2198_recOwned = _out747;
                  _2199_recErased = _out748;
                  _2200_recIdents = _out749;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2197_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2198_recOwned;
                  isErased = _2199_recErased;
                  readIdents = _2200_recIdents;
                }
              }
            } else if (_source55.is_Multiset) {
              DAST._IType _2201___mcc_h717 = _source55.dtor_element;
              DAST._IType _source73 = _1535___mcc_h306;
              if (_source73.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2202___mcc_h721 = _source73.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2203___mcc_h722 = _source73.dtor_typeArgs;
                DAST._IResolvedType _2204___mcc_h723 = _source73.dtor_resolved;
                DAST._IResolvedType _source74 = _2204___mcc_h723;
                if (_source74.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2205___mcc_h727 = _source74.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2206_recursiveGen;
                    bool _2207_recOwned;
                    bool _2208_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2209_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out750;
                    bool _out751;
                    bool _out752;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out753;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out750, out _out751, out _out752, out _out753);
                    _2206_recursiveGen = _out750;
                    _2207_recOwned = _out751;
                    _2208_recErased = _out752;
                    _2209_recIdents = _out753;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2206_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2207_recOwned;
                    isErased = _2208_recErased;
                    readIdents = _2209_recIdents;
                  }
                } else if (_source74.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2210___mcc_h729 = _source74.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2211_recursiveGen;
                    bool _2212_recOwned;
                    bool _2213_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2214_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out754;
                    bool _out755;
                    bool _out756;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out757;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out754, out _out755, out _out756, out _out757);
                    _2211_recursiveGen = _out754;
                    _2212_recOwned = _out755;
                    _2213_recErased = _out756;
                    _2214_recIdents = _out757;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2211_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2212_recOwned;
                    isErased = _2213_recErased;
                    readIdents = _2214_recIdents;
                  }
                } else {
                  DAST._IType _2215___mcc_h731 = _source74.dtor_Newtype_a0;
                  DAST._IType _2216_b = _2215___mcc_h731;
                  {
                    if (object.Equals(_1528_fromTpe, _2216_b)) {
                      Dafny.ISequence<Dafny.Rune> _2217_recursiveGen;
                      bool _2218_recOwned;
                      bool _2219_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2220_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out758;
                      bool _out759;
                      bool _out760;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out761;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out758, out _out759, out _out760, out _out761);
                      _2217_recursiveGen = _out758;
                      _2218_recOwned = _out759;
                      _2219_recErased = _out760;
                      _2220_recIdents = _out761;
                      Dafny.ISequence<Dafny.Rune> _2221_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out762;
                      _out762 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2221_rhsType = _out762;
                      Dafny.ISequence<Dafny.Rune> _2222_uneraseFn;
                      _2222_uneraseFn = ((_2218_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2221_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2222_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2217_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2218_recOwned;
                      isErased = false;
                      readIdents = _2220_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out763;
                      bool _out764;
                      bool _out765;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out766;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2216_b), _2216_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out763, out _out764, out _out765, out _out766);
                      s = _out763;
                      isOwned = _out764;
                      isErased = _out765;
                      readIdents = _out766;
                    }
                  }
                }
              } else if (_source73.is_Nullable) {
                DAST._IType _2223___mcc_h733 = _source73.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2224_recursiveGen;
                  bool _2225_recOwned;
                  bool _2226_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2227_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out767;
                  bool _out768;
                  bool _out769;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out770;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out767, out _out768, out _out769, out _out770);
                  _2224_recursiveGen = _out767;
                  _2225_recOwned = _out768;
                  _2226_recErased = _out769;
                  _2227_recIdents = _out770;
                  if (!(_2225_recOwned)) {
                    _2224_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2224_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2224_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2226_recErased;
                  readIdents = _2227_recIdents;
                }
              } else if (_source73.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2228___mcc_h735 = _source73.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2229_recursiveGen;
                  bool _2230_recOwned;
                  bool _2231_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2232_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out771;
                  bool _out772;
                  bool _out773;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out774;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out771, out _out772, out _out773, out _out774);
                  _2229_recursiveGen = _out771;
                  _2230_recOwned = _out772;
                  _2231_recErased = _out773;
                  _2232_recIdents = _out774;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2229_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2230_recOwned;
                  isErased = _2231_recErased;
                  readIdents = _2232_recIdents;
                }
              } else if (_source73.is_Array) {
                DAST._IType _2233___mcc_h737 = _source73.dtor_element;
                BigInteger _2234___mcc_h738 = _source73.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2235_recursiveGen;
                  bool _2236_recOwned;
                  bool _2237_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2238_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out775;
                  bool _out776;
                  bool _out777;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out778;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out775, out _out776, out _out777, out _out778);
                  _2235_recursiveGen = _out775;
                  _2236_recOwned = _out776;
                  _2237_recErased = _out777;
                  _2238_recIdents = _out778;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2235_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2236_recOwned;
                  isErased = _2237_recErased;
                  readIdents = _2238_recIdents;
                }
              } else if (_source73.is_Seq) {
                DAST._IType _2239___mcc_h741 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2240_recursiveGen;
                  bool _2241_recOwned;
                  bool _2242_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2243_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out779;
                  bool _out780;
                  bool _out781;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out782;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out779, out _out780, out _out781, out _out782);
                  _2240_recursiveGen = _out779;
                  _2241_recOwned = _out780;
                  _2242_recErased = _out781;
                  _2243_recIdents = _out782;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2240_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2241_recOwned;
                  isErased = _2242_recErased;
                  readIdents = _2243_recIdents;
                }
              } else if (_source73.is_Set) {
                DAST._IType _2244___mcc_h743 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2245_recursiveGen;
                  bool _2246_recOwned;
                  bool _2247_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2248_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out783;
                  bool _out784;
                  bool _out785;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out786;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out783, out _out784, out _out785, out _out786);
                  _2245_recursiveGen = _out783;
                  _2246_recOwned = _out784;
                  _2247_recErased = _out785;
                  _2248_recIdents = _out786;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2245_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2246_recOwned;
                  isErased = _2247_recErased;
                  readIdents = _2248_recIdents;
                }
              } else if (_source73.is_Multiset) {
                DAST._IType _2249___mcc_h745 = _source73.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2250_recursiveGen;
                  bool _2251_recOwned;
                  bool _2252_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2253_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out787;
                  bool _out788;
                  bool _out789;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out790;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out787, out _out788, out _out789, out _out790);
                  _2250_recursiveGen = _out787;
                  _2251_recOwned = _out788;
                  _2252_recErased = _out789;
                  _2253_recIdents = _out790;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2250_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2251_recOwned;
                  isErased = _2252_recErased;
                  readIdents = _2253_recIdents;
                }
              } else if (_source73.is_Map) {
                DAST._IType _2254___mcc_h747 = _source73.dtor_key;
                DAST._IType _2255___mcc_h748 = _source73.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2256_recursiveGen;
                  bool _2257_recOwned;
                  bool _2258_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2259_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out791;
                  bool _out792;
                  bool _out793;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out794;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out791, out _out792, out _out793, out _out794);
                  _2256_recursiveGen = _out791;
                  _2257_recOwned = _out792;
                  _2258_recErased = _out793;
                  _2259_recIdents = _out794;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2256_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2257_recOwned;
                  isErased = _2258_recErased;
                  readIdents = _2259_recIdents;
                }
              } else if (_source73.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2260___mcc_h751 = _source73.dtor_args;
                DAST._IType _2261___mcc_h752 = _source73.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2262_recursiveGen;
                  bool _2263_recOwned;
                  bool _2264_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2265_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out795;
                  bool _out796;
                  bool _out797;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out798;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out795, out _out796, out _out797, out _out798);
                  _2262_recursiveGen = _out795;
                  _2263_recOwned = _out796;
                  _2264_recErased = _out797;
                  _2265_recIdents = _out798;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2262_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2263_recOwned;
                  isErased = _2264_recErased;
                  readIdents = _2265_recIdents;
                }
              } else if (_source73.is_Primitive) {
                DAST._IPrimitive _2266___mcc_h755 = _source73.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2267_recursiveGen;
                  bool _2268_recOwned;
                  bool _2269_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2270_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out799;
                  bool _out800;
                  bool _out801;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out802;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out799, out _out800, out _out801, out _out802);
                  _2267_recursiveGen = _out799;
                  _2268_recOwned = _out800;
                  _2269_recErased = _out801;
                  _2270_recIdents = _out802;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2267_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2268_recOwned;
                  isErased = _2269_recErased;
                  readIdents = _2270_recIdents;
                }
              } else if (_source73.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2271___mcc_h757 = _source73.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2272_recursiveGen;
                  bool _2273_recOwned;
                  bool _2274_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2275_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out803;
                  bool _out804;
                  bool _out805;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out806;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out803, out _out804, out _out805, out _out806);
                  _2272_recursiveGen = _out803;
                  _2273_recOwned = _out804;
                  _2274_recErased = _out805;
                  _2275_recIdents = _out806;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2272_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2273_recOwned;
                  isErased = _2274_recErased;
                  readIdents = _2275_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2276___mcc_h759 = _source73.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2277_recursiveGen;
                  bool _2278_recOwned;
                  bool _2279_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2280_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out807;
                  bool _out808;
                  bool _out809;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out810;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out807, out _out808, out _out809, out _out810);
                  _2277_recursiveGen = _out807;
                  _2278_recOwned = _out808;
                  _2279_recErased = _out809;
                  _2280_recIdents = _out810;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2277_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2278_recOwned;
                  isErased = _2279_recErased;
                  readIdents = _2280_recIdents;
                }
              }
            } else if (_source55.is_Map) {
              DAST._IType _2281___mcc_h761 = _source55.dtor_key;
              DAST._IType _2282___mcc_h762 = _source55.dtor_value;
              DAST._IType _source75 = _1535___mcc_h306;
              if (_source75.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2283___mcc_h769 = _source75.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2284___mcc_h770 = _source75.dtor_typeArgs;
                DAST._IResolvedType _2285___mcc_h771 = _source75.dtor_resolved;
                DAST._IResolvedType _source76 = _2285___mcc_h771;
                if (_source76.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2286___mcc_h775 = _source76.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2287_recursiveGen;
                    bool _2288_recOwned;
                    bool _2289_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2290_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out811;
                    bool _out812;
                    bool _out813;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out814;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out811, out _out812, out _out813, out _out814);
                    _2287_recursiveGen = _out811;
                    _2288_recOwned = _out812;
                    _2289_recErased = _out813;
                    _2290_recIdents = _out814;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2287_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2288_recOwned;
                    isErased = _2289_recErased;
                    readIdents = _2290_recIdents;
                  }
                } else if (_source76.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2291___mcc_h777 = _source76.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2292_recursiveGen;
                    bool _2293_recOwned;
                    bool _2294_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2295_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out815;
                    bool _out816;
                    bool _out817;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out818;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out815, out _out816, out _out817, out _out818);
                    _2292_recursiveGen = _out815;
                    _2293_recOwned = _out816;
                    _2294_recErased = _out817;
                    _2295_recIdents = _out818;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2292_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2293_recOwned;
                    isErased = _2294_recErased;
                    readIdents = _2295_recIdents;
                  }
                } else {
                  DAST._IType _2296___mcc_h779 = _source76.dtor_Newtype_a0;
                  DAST._IType _2297_b = _2296___mcc_h779;
                  {
                    if (object.Equals(_1528_fromTpe, _2297_b)) {
                      Dafny.ISequence<Dafny.Rune> _2298_recursiveGen;
                      bool _2299_recOwned;
                      bool _2300_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2301_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out819;
                      bool _out820;
                      bool _out821;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out822;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out819, out _out820, out _out821, out _out822);
                      _2298_recursiveGen = _out819;
                      _2299_recOwned = _out820;
                      _2300_recErased = _out821;
                      _2301_recIdents = _out822;
                      Dafny.ISequence<Dafny.Rune> _2302_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out823;
                      _out823 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2302_rhsType = _out823;
                      Dafny.ISequence<Dafny.Rune> _2303_uneraseFn;
                      _2303_uneraseFn = ((_2299_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2302_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2303_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2298_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2299_recOwned;
                      isErased = false;
                      readIdents = _2301_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out824;
                      bool _out825;
                      bool _out826;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out827;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2297_b), _2297_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out824, out _out825, out _out826, out _out827);
                      s = _out824;
                      isOwned = _out825;
                      isErased = _out826;
                      readIdents = _out827;
                    }
                  }
                }
              } else if (_source75.is_Nullable) {
                DAST._IType _2304___mcc_h781 = _source75.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2305_recursiveGen;
                  bool _2306_recOwned;
                  bool _2307_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2308_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out828;
                  bool _out829;
                  bool _out830;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out831;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out828, out _out829, out _out830, out _out831);
                  _2305_recursiveGen = _out828;
                  _2306_recOwned = _out829;
                  _2307_recErased = _out830;
                  _2308_recIdents = _out831;
                  if (!(_2306_recOwned)) {
                    _2305_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2305_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2305_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2307_recErased;
                  readIdents = _2308_recIdents;
                }
              } else if (_source75.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2309___mcc_h783 = _source75.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2310_recursiveGen;
                  bool _2311_recOwned;
                  bool _2312_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2313_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out832;
                  bool _out833;
                  bool _out834;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out835;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out832, out _out833, out _out834, out _out835);
                  _2310_recursiveGen = _out832;
                  _2311_recOwned = _out833;
                  _2312_recErased = _out834;
                  _2313_recIdents = _out835;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2310_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2311_recOwned;
                  isErased = _2312_recErased;
                  readIdents = _2313_recIdents;
                }
              } else if (_source75.is_Array) {
                DAST._IType _2314___mcc_h785 = _source75.dtor_element;
                BigInteger _2315___mcc_h786 = _source75.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2316_recursiveGen;
                  bool _2317_recOwned;
                  bool _2318_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2319_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out836;
                  bool _out837;
                  bool _out838;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out839;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out836, out _out837, out _out838, out _out839);
                  _2316_recursiveGen = _out836;
                  _2317_recOwned = _out837;
                  _2318_recErased = _out838;
                  _2319_recIdents = _out839;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2316_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2317_recOwned;
                  isErased = _2318_recErased;
                  readIdents = _2319_recIdents;
                }
              } else if (_source75.is_Seq) {
                DAST._IType _2320___mcc_h789 = _source75.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2321_recursiveGen;
                  bool _2322_recOwned;
                  bool _2323_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2324_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out840;
                  bool _out841;
                  bool _out842;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out843;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out840, out _out841, out _out842, out _out843);
                  _2321_recursiveGen = _out840;
                  _2322_recOwned = _out841;
                  _2323_recErased = _out842;
                  _2324_recIdents = _out843;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2321_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2322_recOwned;
                  isErased = _2323_recErased;
                  readIdents = _2324_recIdents;
                }
              } else if (_source75.is_Set) {
                DAST._IType _2325___mcc_h791 = _source75.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2326_recursiveGen;
                  bool _2327_recOwned;
                  bool _2328_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2329_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out844;
                  bool _out845;
                  bool _out846;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out847;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out844, out _out845, out _out846, out _out847);
                  _2326_recursiveGen = _out844;
                  _2327_recOwned = _out845;
                  _2328_recErased = _out846;
                  _2329_recIdents = _out847;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2326_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2327_recOwned;
                  isErased = _2328_recErased;
                  readIdents = _2329_recIdents;
                }
              } else if (_source75.is_Multiset) {
                DAST._IType _2330___mcc_h793 = _source75.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2331_recursiveGen;
                  bool _2332_recOwned;
                  bool _2333_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2334_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out848;
                  bool _out849;
                  bool _out850;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out851;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out848, out _out849, out _out850, out _out851);
                  _2331_recursiveGen = _out848;
                  _2332_recOwned = _out849;
                  _2333_recErased = _out850;
                  _2334_recIdents = _out851;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2331_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2332_recOwned;
                  isErased = _2333_recErased;
                  readIdents = _2334_recIdents;
                }
              } else if (_source75.is_Map) {
                DAST._IType _2335___mcc_h795 = _source75.dtor_key;
                DAST._IType _2336___mcc_h796 = _source75.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2337_recursiveGen;
                  bool _2338_recOwned;
                  bool _2339_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2340_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out852;
                  bool _out853;
                  bool _out854;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out855;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out852, out _out853, out _out854, out _out855);
                  _2337_recursiveGen = _out852;
                  _2338_recOwned = _out853;
                  _2339_recErased = _out854;
                  _2340_recIdents = _out855;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2337_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2338_recOwned;
                  isErased = _2339_recErased;
                  readIdents = _2340_recIdents;
                }
              } else if (_source75.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2341___mcc_h799 = _source75.dtor_args;
                DAST._IType _2342___mcc_h800 = _source75.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2343_recursiveGen;
                  bool _2344_recOwned;
                  bool _2345_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2346_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out856;
                  bool _out857;
                  bool _out858;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out859;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out856, out _out857, out _out858, out _out859);
                  _2343_recursiveGen = _out856;
                  _2344_recOwned = _out857;
                  _2345_recErased = _out858;
                  _2346_recIdents = _out859;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2343_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2344_recOwned;
                  isErased = _2345_recErased;
                  readIdents = _2346_recIdents;
                }
              } else if (_source75.is_Primitive) {
                DAST._IPrimitive _2347___mcc_h803 = _source75.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2348_recursiveGen;
                  bool _2349_recOwned;
                  bool _2350_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2351_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out860;
                  bool _out861;
                  bool _out862;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out863;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out860, out _out861, out _out862, out _out863);
                  _2348_recursiveGen = _out860;
                  _2349_recOwned = _out861;
                  _2350_recErased = _out862;
                  _2351_recIdents = _out863;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2348_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2349_recOwned;
                  isErased = _2350_recErased;
                  readIdents = _2351_recIdents;
                }
              } else if (_source75.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2352___mcc_h805 = _source75.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2353_recursiveGen;
                  bool _2354_recOwned;
                  bool _2355_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2356_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out864;
                  bool _out865;
                  bool _out866;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out867;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out864, out _out865, out _out866, out _out867);
                  _2353_recursiveGen = _out864;
                  _2354_recOwned = _out865;
                  _2355_recErased = _out866;
                  _2356_recIdents = _out867;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2353_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2354_recOwned;
                  isErased = _2355_recErased;
                  readIdents = _2356_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2357___mcc_h807 = _source75.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2358_recursiveGen;
                  bool _2359_recOwned;
                  bool _2360_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2361_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out868;
                  bool _out869;
                  bool _out870;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out871;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out868, out _out869, out _out870, out _out871);
                  _2358_recursiveGen = _out868;
                  _2359_recOwned = _out869;
                  _2360_recErased = _out870;
                  _2361_recIdents = _out871;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2358_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2359_recOwned;
                  isErased = _2360_recErased;
                  readIdents = _2361_recIdents;
                }
              }
            } else if (_source55.is_Arrow) {
              Dafny.ISequence<DAST._IType> _2362___mcc_h809 = _source55.dtor_args;
              DAST._IType _2363___mcc_h810 = _source55.dtor_result;
              DAST._IType _source77 = _1535___mcc_h306;
              if (_source77.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2364___mcc_h817 = _source77.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2365___mcc_h818 = _source77.dtor_typeArgs;
                DAST._IResolvedType _2366___mcc_h819 = _source77.dtor_resolved;
                DAST._IResolvedType _source78 = _2366___mcc_h819;
                if (_source78.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2367___mcc_h823 = _source78.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2368_recursiveGen;
                    bool _2369_recOwned;
                    bool _2370_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2371_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out872;
                    bool _out873;
                    bool _out874;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out875;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out872, out _out873, out _out874, out _out875);
                    _2368_recursiveGen = _out872;
                    _2369_recOwned = _out873;
                    _2370_recErased = _out874;
                    _2371_recIdents = _out875;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2368_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2369_recOwned;
                    isErased = _2370_recErased;
                    readIdents = _2371_recIdents;
                  }
                } else if (_source78.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2372___mcc_h825 = _source78.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2373_recursiveGen;
                    bool _2374_recOwned;
                    bool _2375_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2376_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out876;
                    bool _out877;
                    bool _out878;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out879;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out876, out _out877, out _out878, out _out879);
                    _2373_recursiveGen = _out876;
                    _2374_recOwned = _out877;
                    _2375_recErased = _out878;
                    _2376_recIdents = _out879;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2373_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2374_recOwned;
                    isErased = _2375_recErased;
                    readIdents = _2376_recIdents;
                  }
                } else {
                  DAST._IType _2377___mcc_h827 = _source78.dtor_Newtype_a0;
                  DAST._IType _2378_b = _2377___mcc_h827;
                  {
                    if (object.Equals(_1528_fromTpe, _2378_b)) {
                      Dafny.ISequence<Dafny.Rune> _2379_recursiveGen;
                      bool _2380_recOwned;
                      bool _2381_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2382_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out880;
                      bool _out881;
                      bool _out882;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out883;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out880, out _out881, out _out882, out _out883);
                      _2379_recursiveGen = _out880;
                      _2380_recOwned = _out881;
                      _2381_recErased = _out882;
                      _2382_recIdents = _out883;
                      Dafny.ISequence<Dafny.Rune> _2383_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out884;
                      _out884 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2383_rhsType = _out884;
                      Dafny.ISequence<Dafny.Rune> _2384_uneraseFn;
                      _2384_uneraseFn = ((_2380_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2383_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2384_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2379_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2380_recOwned;
                      isErased = false;
                      readIdents = _2382_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out885;
                      bool _out886;
                      bool _out887;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out888;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2378_b), _2378_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out885, out _out886, out _out887, out _out888);
                      s = _out885;
                      isOwned = _out886;
                      isErased = _out887;
                      readIdents = _out888;
                    }
                  }
                }
              } else if (_source77.is_Nullable) {
                DAST._IType _2385___mcc_h829 = _source77.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2386_recursiveGen;
                  bool _2387_recOwned;
                  bool _2388_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2389_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out889;
                  bool _out890;
                  bool _out891;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out892;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out889, out _out890, out _out891, out _out892);
                  _2386_recursiveGen = _out889;
                  _2387_recOwned = _out890;
                  _2388_recErased = _out891;
                  _2389_recIdents = _out892;
                  if (!(_2387_recOwned)) {
                    _2386_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2386_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2386_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2388_recErased;
                  readIdents = _2389_recIdents;
                }
              } else if (_source77.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2390___mcc_h831 = _source77.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2391_recursiveGen;
                  bool _2392_recOwned;
                  bool _2393_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2394_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out893;
                  bool _out894;
                  bool _out895;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out896;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out893, out _out894, out _out895, out _out896);
                  _2391_recursiveGen = _out893;
                  _2392_recOwned = _out894;
                  _2393_recErased = _out895;
                  _2394_recIdents = _out896;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2391_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2392_recOwned;
                  isErased = _2393_recErased;
                  readIdents = _2394_recIdents;
                }
              } else if (_source77.is_Array) {
                DAST._IType _2395___mcc_h833 = _source77.dtor_element;
                BigInteger _2396___mcc_h834 = _source77.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2397_recursiveGen;
                  bool _2398_recOwned;
                  bool _2399_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2400_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out897;
                  bool _out898;
                  bool _out899;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out900;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out897, out _out898, out _out899, out _out900);
                  _2397_recursiveGen = _out897;
                  _2398_recOwned = _out898;
                  _2399_recErased = _out899;
                  _2400_recIdents = _out900;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2397_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2398_recOwned;
                  isErased = _2399_recErased;
                  readIdents = _2400_recIdents;
                }
              } else if (_source77.is_Seq) {
                DAST._IType _2401___mcc_h837 = _source77.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2402_recursiveGen;
                  bool _2403_recOwned;
                  bool _2404_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2405_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out901;
                  bool _out902;
                  bool _out903;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out904;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out901, out _out902, out _out903, out _out904);
                  _2402_recursiveGen = _out901;
                  _2403_recOwned = _out902;
                  _2404_recErased = _out903;
                  _2405_recIdents = _out904;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2402_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2403_recOwned;
                  isErased = _2404_recErased;
                  readIdents = _2405_recIdents;
                }
              } else if (_source77.is_Set) {
                DAST._IType _2406___mcc_h839 = _source77.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2407_recursiveGen;
                  bool _2408_recOwned;
                  bool _2409_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2410_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out905;
                  bool _out906;
                  bool _out907;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out908;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out905, out _out906, out _out907, out _out908);
                  _2407_recursiveGen = _out905;
                  _2408_recOwned = _out906;
                  _2409_recErased = _out907;
                  _2410_recIdents = _out908;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2407_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2408_recOwned;
                  isErased = _2409_recErased;
                  readIdents = _2410_recIdents;
                }
              } else if (_source77.is_Multiset) {
                DAST._IType _2411___mcc_h841 = _source77.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2412_recursiveGen;
                  bool _2413_recOwned;
                  bool _2414_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2415_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out909;
                  bool _out910;
                  bool _out911;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out912;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out909, out _out910, out _out911, out _out912);
                  _2412_recursiveGen = _out909;
                  _2413_recOwned = _out910;
                  _2414_recErased = _out911;
                  _2415_recIdents = _out912;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2412_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2413_recOwned;
                  isErased = _2414_recErased;
                  readIdents = _2415_recIdents;
                }
              } else if (_source77.is_Map) {
                DAST._IType _2416___mcc_h843 = _source77.dtor_key;
                DAST._IType _2417___mcc_h844 = _source77.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2418_recursiveGen;
                  bool _2419_recOwned;
                  bool _2420_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2421_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out913;
                  bool _out914;
                  bool _out915;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out916;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out913, out _out914, out _out915, out _out916);
                  _2418_recursiveGen = _out913;
                  _2419_recOwned = _out914;
                  _2420_recErased = _out915;
                  _2421_recIdents = _out916;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2418_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2419_recOwned;
                  isErased = _2420_recErased;
                  readIdents = _2421_recIdents;
                }
              } else if (_source77.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2422___mcc_h847 = _source77.dtor_args;
                DAST._IType _2423___mcc_h848 = _source77.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2424_recursiveGen;
                  bool _2425_recOwned;
                  bool _2426_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2427_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out917;
                  bool _out918;
                  bool _out919;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out920;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out917, out _out918, out _out919, out _out920);
                  _2424_recursiveGen = _out917;
                  _2425_recOwned = _out918;
                  _2426_recErased = _out919;
                  _2427_recIdents = _out920;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2424_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2425_recOwned;
                  isErased = _2426_recErased;
                  readIdents = _2427_recIdents;
                }
              } else if (_source77.is_Primitive) {
                DAST._IPrimitive _2428___mcc_h851 = _source77.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2429_recursiveGen;
                  bool _2430_recOwned;
                  bool _2431_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2432_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out921;
                  bool _out922;
                  bool _out923;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out924;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out921, out _out922, out _out923, out _out924);
                  _2429_recursiveGen = _out921;
                  _2430_recOwned = _out922;
                  _2431_recErased = _out923;
                  _2432_recIdents = _out924;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2429_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2430_recOwned;
                  isErased = _2431_recErased;
                  readIdents = _2432_recIdents;
                }
              } else if (_source77.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2433___mcc_h853 = _source77.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2434_recursiveGen;
                  bool _2435_recOwned;
                  bool _2436_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2437_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out925;
                  bool _out926;
                  bool _out927;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out928;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out925, out _out926, out _out927, out _out928);
                  _2434_recursiveGen = _out925;
                  _2435_recOwned = _out926;
                  _2436_recErased = _out927;
                  _2437_recIdents = _out928;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2434_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2435_recOwned;
                  isErased = _2436_recErased;
                  readIdents = _2437_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2438___mcc_h855 = _source77.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2439_recursiveGen;
                  bool _2440_recOwned;
                  bool _2441_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2442_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out929;
                  bool _out930;
                  bool _out931;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out932;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out929, out _out930, out _out931, out _out932);
                  _2439_recursiveGen = _out929;
                  _2440_recOwned = _out930;
                  _2441_recErased = _out931;
                  _2442_recIdents = _out932;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2439_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2440_recOwned;
                  isErased = _2441_recErased;
                  readIdents = _2442_recIdents;
                }
              }
            } else if (_source55.is_Primitive) {
              DAST._IPrimitive _2443___mcc_h857 = _source55.dtor_Primitive_a0;
              DAST._IPrimitive _source79 = _2443___mcc_h857;
              if (_source79.is_Int) {
                DAST._IType _source80 = _1535___mcc_h306;
                if (_source80.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2444___mcc_h861 = _source80.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2445___mcc_h862 = _source80.dtor_typeArgs;
                  DAST._IResolvedType _2446___mcc_h863 = _source80.dtor_resolved;
                  DAST._IResolvedType _source81 = _2446___mcc_h863;
                  if (_source81.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2447___mcc_h867 = _source81.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2448_recursiveGen;
                      bool _2449_recOwned;
                      bool _2450_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2451_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out933;
                      bool _out934;
                      bool _out935;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out936;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out933, out _out934, out _out935, out _out936);
                      _2448_recursiveGen = _out933;
                      _2449_recOwned = _out934;
                      _2450_recErased = _out935;
                      _2451_recIdents = _out936;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2448_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2449_recOwned;
                      isErased = _2450_recErased;
                      readIdents = _2451_recIdents;
                    }
                  } else if (_source81.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2452___mcc_h869 = _source81.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2453_recursiveGen;
                      bool _2454_recOwned;
                      bool _2455_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2456_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out937;
                      bool _out938;
                      bool _out939;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out940;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out937, out _out938, out _out939, out _out940);
                      _2453_recursiveGen = _out937;
                      _2454_recOwned = _out938;
                      _2455_recErased = _out939;
                      _2456_recIdents = _out940;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2453_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2454_recOwned;
                      isErased = _2455_recErased;
                      readIdents = _2456_recIdents;
                    }
                  } else {
                    DAST._IType _2457___mcc_h871 = _source81.dtor_Newtype_a0;
                    DAST._IType _2458_b = _2457___mcc_h871;
                    {
                      if (object.Equals(_1528_fromTpe, _2458_b)) {
                        Dafny.ISequence<Dafny.Rune> _2459_recursiveGen;
                        bool _2460_recOwned;
                        bool _2461_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2462_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out941;
                        bool _out942;
                        bool _out943;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out944;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out941, out _out942, out _out943, out _out944);
                        _2459_recursiveGen = _out941;
                        _2460_recOwned = _out942;
                        _2461_recErased = _out943;
                        _2462_recIdents = _out944;
                        Dafny.ISequence<Dafny.Rune> _2463_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out945;
                        _out945 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _2463_rhsType = _out945;
                        Dafny.ISequence<Dafny.Rune> _2464_uneraseFn;
                        _2464_uneraseFn = ((_2460_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2463_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2464_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2459_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2460_recOwned;
                        isErased = false;
                        readIdents = _2462_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out946;
                        bool _out947;
                        bool _out948;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out949;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2458_b), _2458_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out946, out _out947, out _out948, out _out949);
                        s = _out946;
                        isOwned = _out947;
                        isErased = _out948;
                        readIdents = _out949;
                      }
                    }
                  }
                } else if (_source80.is_Nullable) {
                  DAST._IType _2465___mcc_h873 = _source80.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2466_recursiveGen;
                    bool _2467_recOwned;
                    bool _2468_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2469_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out950;
                    bool _out951;
                    bool _out952;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out953;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out950, out _out951, out _out952, out _out953);
                    _2466_recursiveGen = _out950;
                    _2467_recOwned = _out951;
                    _2468_recErased = _out952;
                    _2469_recIdents = _out953;
                    if (!(_2467_recOwned)) {
                      _2466_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2466_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2466_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2468_recErased;
                    readIdents = _2469_recIdents;
                  }
                } else if (_source80.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2470___mcc_h875 = _source80.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2471_recursiveGen;
                    bool _2472_recOwned;
                    bool _2473_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2474_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out954;
                    bool _out955;
                    bool _out956;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out957;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out954, out _out955, out _out956, out _out957);
                    _2471_recursiveGen = _out954;
                    _2472_recOwned = _out955;
                    _2473_recErased = _out956;
                    _2474_recIdents = _out957;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2471_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2472_recOwned;
                    isErased = _2473_recErased;
                    readIdents = _2474_recIdents;
                  }
                } else if (_source80.is_Array) {
                  DAST._IType _2475___mcc_h877 = _source80.dtor_element;
                  BigInteger _2476___mcc_h878 = _source80.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2477_recursiveGen;
                    bool _2478_recOwned;
                    bool _2479_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2480_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out958;
                    bool _out959;
                    bool _out960;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out961;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out958, out _out959, out _out960, out _out961);
                    _2477_recursiveGen = _out958;
                    _2478_recOwned = _out959;
                    _2479_recErased = _out960;
                    _2480_recIdents = _out961;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2477_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2478_recOwned;
                    isErased = _2479_recErased;
                    readIdents = _2480_recIdents;
                  }
                } else if (_source80.is_Seq) {
                  DAST._IType _2481___mcc_h881 = _source80.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2482_recursiveGen;
                    bool _2483_recOwned;
                    bool _2484_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2485_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out962;
                    bool _out963;
                    bool _out964;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out965;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out962, out _out963, out _out964, out _out965);
                    _2482_recursiveGen = _out962;
                    _2483_recOwned = _out963;
                    _2484_recErased = _out964;
                    _2485_recIdents = _out965;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2482_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2483_recOwned;
                    isErased = _2484_recErased;
                    readIdents = _2485_recIdents;
                  }
                } else if (_source80.is_Set) {
                  DAST._IType _2486___mcc_h883 = _source80.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2487_recursiveGen;
                    bool _2488_recOwned;
                    bool _2489_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2490_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out966;
                    bool _out967;
                    bool _out968;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out969;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out966, out _out967, out _out968, out _out969);
                    _2487_recursiveGen = _out966;
                    _2488_recOwned = _out967;
                    _2489_recErased = _out968;
                    _2490_recIdents = _out969;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2487_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2488_recOwned;
                    isErased = _2489_recErased;
                    readIdents = _2490_recIdents;
                  }
                } else if (_source80.is_Multiset) {
                  DAST._IType _2491___mcc_h885 = _source80.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2492_recursiveGen;
                    bool _2493_recOwned;
                    bool _2494_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2495_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out970;
                    bool _out971;
                    bool _out972;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out973;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out970, out _out971, out _out972, out _out973);
                    _2492_recursiveGen = _out970;
                    _2493_recOwned = _out971;
                    _2494_recErased = _out972;
                    _2495_recIdents = _out973;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2492_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2493_recOwned;
                    isErased = _2494_recErased;
                    readIdents = _2495_recIdents;
                  }
                } else if (_source80.is_Map) {
                  DAST._IType _2496___mcc_h887 = _source80.dtor_key;
                  DAST._IType _2497___mcc_h888 = _source80.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2498_recursiveGen;
                    bool _2499_recOwned;
                    bool _2500_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2501_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out974;
                    bool _out975;
                    bool _out976;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out977;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out974, out _out975, out _out976, out _out977);
                    _2498_recursiveGen = _out974;
                    _2499_recOwned = _out975;
                    _2500_recErased = _out976;
                    _2501_recIdents = _out977;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2498_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2499_recOwned;
                    isErased = _2500_recErased;
                    readIdents = _2501_recIdents;
                  }
                } else if (_source80.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2502___mcc_h891 = _source80.dtor_args;
                  DAST._IType _2503___mcc_h892 = _source80.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2504_recursiveGen;
                    bool _2505_recOwned;
                    bool _2506_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2507_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out978;
                    bool _out979;
                    bool _out980;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out981;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out978, out _out979, out _out980, out _out981);
                    _2504_recursiveGen = _out978;
                    _2505_recOwned = _out979;
                    _2506_recErased = _out980;
                    _2507_recIdents = _out981;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2504_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2505_recOwned;
                    isErased = _2506_recErased;
                    readIdents = _2507_recIdents;
                  }
                } else if (_source80.is_Primitive) {
                  DAST._IPrimitive _2508___mcc_h895 = _source80.dtor_Primitive_a0;
                  DAST._IPrimitive _source82 = _2508___mcc_h895;
                  if (_source82.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2509_recursiveGen;
                      bool _2510_recOwned;
                      bool _2511_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2512_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out982;
                      bool _out983;
                      bool _out984;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out985;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out982, out _out983, out _out984, out _out985);
                      _2509_recursiveGen = _out982;
                      _2510_recOwned = _out983;
                      _2511_recErased = _out984;
                      _2512_recIdents = _out985;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2509_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2510_recOwned;
                      isErased = _2511_recErased;
                      readIdents = _2512_recIdents;
                    }
                  } else if (_source82.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2513_recursiveGen;
                      bool _2514___v46;
                      bool _2515___v47;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2516_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out986;
                      bool _out987;
                      bool _out988;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out989;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, true, out _out986, out _out987, out _out988, out _out989);
                      _2513_recursiveGen = _out986;
                      _2514___v46 = _out987;
                      _2515___v47 = _out988;
                      _2516_recIdents = _out989;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigRational::from_integer("), _2513_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2516_recIdents;
                    }
                  } else if (_source82.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2517_recursiveGen;
                      bool _2518_recOwned;
                      bool _2519_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2520_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out990;
                      bool _out991;
                      bool _out992;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out993;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out990, out _out991, out _out992, out _out993);
                      _2517_recursiveGen = _out990;
                      _2518_recOwned = _out991;
                      _2519_recErased = _out992;
                      _2520_recIdents = _out993;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2517_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2518_recOwned;
                      isErased = _2519_recErased;
                      readIdents = _2520_recIdents;
                    }
                  } else if (_source82.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2521_recursiveGen;
                      bool _2522_recOwned;
                      bool _2523_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2524_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out994;
                      bool _out995;
                      bool _out996;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out997;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out994, out _out995, out _out996, out _out997);
                      _2521_recursiveGen = _out994;
                      _2522_recOwned = _out995;
                      _2523_recErased = _out996;
                      _2524_recIdents = _out997;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2521_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2522_recOwned;
                      isErased = _2523_recErased;
                      readIdents = _2524_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2525_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out998;
                      _out998 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2525_rhsType = _out998;
                      Dafny.ISequence<Dafny.Rune> _2526_recursiveGen;
                      bool _2527___v56;
                      bool _2528___v57;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2529_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out999;
                      bool _out1000;
                      bool _out1001;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1002;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, true, out _out999, out _out1000, out _out1001, out _out1002);
                      _2526_recursiveGen = _out999;
                      _2527___v56 = _out1000;
                      _2528___v57 = _out1001;
                      _2529_recIdents = _out1002;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("char::from_u32(<u32 as ::dafny_runtime::NumCast>::from("), _2526_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()).unwrap()"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2529_recIdents;
                    }
                  }
                } else if (_source80.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2530___mcc_h897 = _source80.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2531_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1003;
                    _out1003 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                    _2531_rhsType = _out1003;
                    Dafny.ISequence<Dafny.Rune> _2532_recursiveGen;
                    bool _2533___v51;
                    bool _2534___v52;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2535_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1004;
                    bool _out1005;
                    bool _out1006;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1007;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, true, out _out1004, out _out1005, out _out1006, out _out1007);
                    _2532_recursiveGen = _out1004;
                    _2533___v51 = _out1005;
                    _2534___v52 = _out1006;
                    _2535_recIdents = _out1007;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2531_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::NumCast>::from(")), _2532_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2535_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2536___mcc_h899 = _source80.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2537_recursiveGen;
                    bool _2538_recOwned;
                    bool _2539_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2540_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1008;
                    bool _out1009;
                    bool _out1010;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1011;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1008, out _out1009, out _out1010, out _out1011);
                    _2537_recursiveGen = _out1008;
                    _2538_recOwned = _out1009;
                    _2539_recErased = _out1010;
                    _2540_recIdents = _out1011;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2537_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2538_recOwned;
                    isErased = _2539_recErased;
                    readIdents = _2540_recIdents;
                  }
                }
              } else if (_source79.is_Real) {
                DAST._IType _source83 = _1535___mcc_h306;
                if (_source83.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2541___mcc_h901 = _source83.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2542___mcc_h902 = _source83.dtor_typeArgs;
                  DAST._IResolvedType _2543___mcc_h903 = _source83.dtor_resolved;
                  DAST._IResolvedType _source84 = _2543___mcc_h903;
                  if (_source84.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2544___mcc_h907 = _source84.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2545_recursiveGen;
                      bool _2546_recOwned;
                      bool _2547_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2548_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1012;
                      bool _out1013;
                      bool _out1014;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1015;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1012, out _out1013, out _out1014, out _out1015);
                      _2545_recursiveGen = _out1012;
                      _2546_recOwned = _out1013;
                      _2547_recErased = _out1014;
                      _2548_recIdents = _out1015;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2545_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2546_recOwned;
                      isErased = _2547_recErased;
                      readIdents = _2548_recIdents;
                    }
                  } else if (_source84.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2549___mcc_h909 = _source84.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2550_recursiveGen;
                      bool _2551_recOwned;
                      bool _2552_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2553_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1016;
                      bool _out1017;
                      bool _out1018;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1019;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1016, out _out1017, out _out1018, out _out1019);
                      _2550_recursiveGen = _out1016;
                      _2551_recOwned = _out1017;
                      _2552_recErased = _out1018;
                      _2553_recIdents = _out1019;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2550_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2551_recOwned;
                      isErased = _2552_recErased;
                      readIdents = _2553_recIdents;
                    }
                  } else {
                    DAST._IType _2554___mcc_h911 = _source84.dtor_Newtype_a0;
                    DAST._IType _2555_b = _2554___mcc_h911;
                    {
                      if (object.Equals(_1528_fromTpe, _2555_b)) {
                        Dafny.ISequence<Dafny.Rune> _2556_recursiveGen;
                        bool _2557_recOwned;
                        bool _2558_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2559_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1020;
                        bool _out1021;
                        bool _out1022;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1023;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1020, out _out1021, out _out1022, out _out1023);
                        _2556_recursiveGen = _out1020;
                        _2557_recOwned = _out1021;
                        _2558_recErased = _out1022;
                        _2559_recIdents = _out1023;
                        Dafny.ISequence<Dafny.Rune> _2560_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1024;
                        _out1024 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _2560_rhsType = _out1024;
                        Dafny.ISequence<Dafny.Rune> _2561_uneraseFn;
                        _2561_uneraseFn = ((_2557_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2560_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2561_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2556_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2557_recOwned;
                        isErased = false;
                        readIdents = _2559_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1025;
                        bool _out1026;
                        bool _out1027;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1028;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2555_b), _2555_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out1025, out _out1026, out _out1027, out _out1028);
                        s = _out1025;
                        isOwned = _out1026;
                        isErased = _out1027;
                        readIdents = _out1028;
                      }
                    }
                  }
                } else if (_source83.is_Nullable) {
                  DAST._IType _2562___mcc_h913 = _source83.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2563_recursiveGen;
                    bool _2564_recOwned;
                    bool _2565_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2566_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1029;
                    bool _out1030;
                    bool _out1031;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1032;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1029, out _out1030, out _out1031, out _out1032);
                    _2563_recursiveGen = _out1029;
                    _2564_recOwned = _out1030;
                    _2565_recErased = _out1031;
                    _2566_recIdents = _out1032;
                    if (!(_2564_recOwned)) {
                      _2563_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2563_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2563_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2565_recErased;
                    readIdents = _2566_recIdents;
                  }
                } else if (_source83.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2567___mcc_h915 = _source83.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2568_recursiveGen;
                    bool _2569_recOwned;
                    bool _2570_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2571_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1033;
                    bool _out1034;
                    bool _out1035;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1036;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1033, out _out1034, out _out1035, out _out1036);
                    _2568_recursiveGen = _out1033;
                    _2569_recOwned = _out1034;
                    _2570_recErased = _out1035;
                    _2571_recIdents = _out1036;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2568_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2569_recOwned;
                    isErased = _2570_recErased;
                    readIdents = _2571_recIdents;
                  }
                } else if (_source83.is_Array) {
                  DAST._IType _2572___mcc_h917 = _source83.dtor_element;
                  BigInteger _2573___mcc_h918 = _source83.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2574_recursiveGen;
                    bool _2575_recOwned;
                    bool _2576_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2577_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1037;
                    bool _out1038;
                    bool _out1039;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1040;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1037, out _out1038, out _out1039, out _out1040);
                    _2574_recursiveGen = _out1037;
                    _2575_recOwned = _out1038;
                    _2576_recErased = _out1039;
                    _2577_recIdents = _out1040;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2574_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2575_recOwned;
                    isErased = _2576_recErased;
                    readIdents = _2577_recIdents;
                  }
                } else if (_source83.is_Seq) {
                  DAST._IType _2578___mcc_h921 = _source83.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2579_recursiveGen;
                    bool _2580_recOwned;
                    bool _2581_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2582_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1041;
                    bool _out1042;
                    bool _out1043;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1044;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1041, out _out1042, out _out1043, out _out1044);
                    _2579_recursiveGen = _out1041;
                    _2580_recOwned = _out1042;
                    _2581_recErased = _out1043;
                    _2582_recIdents = _out1044;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2579_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2580_recOwned;
                    isErased = _2581_recErased;
                    readIdents = _2582_recIdents;
                  }
                } else if (_source83.is_Set) {
                  DAST._IType _2583___mcc_h923 = _source83.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2584_recursiveGen;
                    bool _2585_recOwned;
                    bool _2586_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2587_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1045;
                    bool _out1046;
                    bool _out1047;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1048;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1045, out _out1046, out _out1047, out _out1048);
                    _2584_recursiveGen = _out1045;
                    _2585_recOwned = _out1046;
                    _2586_recErased = _out1047;
                    _2587_recIdents = _out1048;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2584_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2585_recOwned;
                    isErased = _2586_recErased;
                    readIdents = _2587_recIdents;
                  }
                } else if (_source83.is_Multiset) {
                  DAST._IType _2588___mcc_h925 = _source83.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2589_recursiveGen;
                    bool _2590_recOwned;
                    bool _2591_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2592_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1049;
                    bool _out1050;
                    bool _out1051;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1052;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1049, out _out1050, out _out1051, out _out1052);
                    _2589_recursiveGen = _out1049;
                    _2590_recOwned = _out1050;
                    _2591_recErased = _out1051;
                    _2592_recIdents = _out1052;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2589_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2590_recOwned;
                    isErased = _2591_recErased;
                    readIdents = _2592_recIdents;
                  }
                } else if (_source83.is_Map) {
                  DAST._IType _2593___mcc_h927 = _source83.dtor_key;
                  DAST._IType _2594___mcc_h928 = _source83.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2595_recursiveGen;
                    bool _2596_recOwned;
                    bool _2597_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2598_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1053;
                    bool _out1054;
                    bool _out1055;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1056;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1053, out _out1054, out _out1055, out _out1056);
                    _2595_recursiveGen = _out1053;
                    _2596_recOwned = _out1054;
                    _2597_recErased = _out1055;
                    _2598_recIdents = _out1056;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2595_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2596_recOwned;
                    isErased = _2597_recErased;
                    readIdents = _2598_recIdents;
                  }
                } else if (_source83.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2599___mcc_h931 = _source83.dtor_args;
                  DAST._IType _2600___mcc_h932 = _source83.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2601_recursiveGen;
                    bool _2602_recOwned;
                    bool _2603_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2604_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1057;
                    bool _out1058;
                    bool _out1059;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1060;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1057, out _out1058, out _out1059, out _out1060);
                    _2601_recursiveGen = _out1057;
                    _2602_recOwned = _out1058;
                    _2603_recErased = _out1059;
                    _2604_recIdents = _out1060;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2601_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2602_recOwned;
                    isErased = _2603_recErased;
                    readIdents = _2604_recIdents;
                  }
                } else if (_source83.is_Primitive) {
                  DAST._IPrimitive _2605___mcc_h935 = _source83.dtor_Primitive_a0;
                  DAST._IPrimitive _source85 = _2605___mcc_h935;
                  if (_source85.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2606_recursiveGen;
                      bool _2607___v48;
                      bool _2608___v49;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2609_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1061;
                      bool _out1062;
                      bool _out1063;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1064;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, false, out _out1061, out _out1062, out _out1063, out _out1064);
                      _2606_recursiveGen = _out1061;
                      _2607___v48 = _out1062;
                      _2608___v49 = _out1063;
                      _2609_recIdents = _out1064;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::dafny_rational_to_int("), _2606_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2609_recIdents;
                    }
                  } else if (_source85.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2610_recursiveGen;
                      bool _2611_recOwned;
                      bool _2612_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2613_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1065;
                      bool _out1066;
                      bool _out1067;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1068;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1065, out _out1066, out _out1067, out _out1068);
                      _2610_recursiveGen = _out1065;
                      _2611_recOwned = _out1066;
                      _2612_recErased = _out1067;
                      _2613_recIdents = _out1068;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2610_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2611_recOwned;
                      isErased = _2612_recErased;
                      readIdents = _2613_recIdents;
                    }
                  } else if (_source85.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2614_recursiveGen;
                      bool _2615_recOwned;
                      bool _2616_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2617_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1069;
                      bool _out1070;
                      bool _out1071;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1072;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1069, out _out1070, out _out1071, out _out1072);
                      _2614_recursiveGen = _out1069;
                      _2615_recOwned = _out1070;
                      _2616_recErased = _out1071;
                      _2617_recIdents = _out1072;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2614_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2615_recOwned;
                      isErased = _2616_recErased;
                      readIdents = _2617_recIdents;
                    }
                  } else if (_source85.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2618_recursiveGen;
                      bool _2619_recOwned;
                      bool _2620_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2621_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1073;
                      bool _out1074;
                      bool _out1075;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1076;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1073, out _out1074, out _out1075, out _out1076);
                      _2618_recursiveGen = _out1073;
                      _2619_recOwned = _out1074;
                      _2620_recErased = _out1075;
                      _2621_recIdents = _out1076;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2618_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2619_recOwned;
                      isErased = _2620_recErased;
                      readIdents = _2621_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2622_recursiveGen;
                      bool _2623_recOwned;
                      bool _2624_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2625_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1077;
                      bool _out1078;
                      bool _out1079;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1080;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1077, out _out1078, out _out1079, out _out1080);
                      _2622_recursiveGen = _out1077;
                      _2623_recOwned = _out1078;
                      _2624_recErased = _out1079;
                      _2625_recIdents = _out1080;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2622_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2623_recOwned;
                      isErased = _2624_recErased;
                      readIdents = _2625_recIdents;
                    }
                  }
                } else if (_source83.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2626___mcc_h937 = _source83.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2627_recursiveGen;
                    bool _2628_recOwned;
                    bool _2629_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2630_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1081;
                    bool _out1082;
                    bool _out1083;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1084;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1081, out _out1082, out _out1083, out _out1084);
                    _2627_recursiveGen = _out1081;
                    _2628_recOwned = _out1082;
                    _2629_recErased = _out1083;
                    _2630_recIdents = _out1084;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2627_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2628_recOwned;
                    isErased = _2629_recErased;
                    readIdents = _2630_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2631___mcc_h939 = _source83.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2632_recursiveGen;
                    bool _2633_recOwned;
                    bool _2634_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2635_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1085;
                    bool _out1086;
                    bool _out1087;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1088;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1085, out _out1086, out _out1087, out _out1088);
                    _2632_recursiveGen = _out1085;
                    _2633_recOwned = _out1086;
                    _2634_recErased = _out1087;
                    _2635_recIdents = _out1088;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2632_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2633_recOwned;
                    isErased = _2634_recErased;
                    readIdents = _2635_recIdents;
                  }
                }
              } else if (_source79.is_String) {
                DAST._IType _source86 = _1535___mcc_h306;
                if (_source86.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2636___mcc_h941 = _source86.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2637___mcc_h942 = _source86.dtor_typeArgs;
                  DAST._IResolvedType _2638___mcc_h943 = _source86.dtor_resolved;
                  DAST._IResolvedType _source87 = _2638___mcc_h943;
                  if (_source87.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2639___mcc_h947 = _source87.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2640_recursiveGen;
                      bool _2641_recOwned;
                      bool _2642_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2643_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1089;
                      bool _out1090;
                      bool _out1091;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1092;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1089, out _out1090, out _out1091, out _out1092);
                      _2640_recursiveGen = _out1089;
                      _2641_recOwned = _out1090;
                      _2642_recErased = _out1091;
                      _2643_recIdents = _out1092;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2640_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2641_recOwned;
                      isErased = _2642_recErased;
                      readIdents = _2643_recIdents;
                    }
                  } else if (_source87.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2644___mcc_h949 = _source87.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2645_recursiveGen;
                      bool _2646_recOwned;
                      bool _2647_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2648_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1093;
                      bool _out1094;
                      bool _out1095;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1096;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1093, out _out1094, out _out1095, out _out1096);
                      _2645_recursiveGen = _out1093;
                      _2646_recOwned = _out1094;
                      _2647_recErased = _out1095;
                      _2648_recIdents = _out1096;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2645_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2646_recOwned;
                      isErased = _2647_recErased;
                      readIdents = _2648_recIdents;
                    }
                  } else {
                    DAST._IType _2649___mcc_h951 = _source87.dtor_Newtype_a0;
                    DAST._IType _2650_b = _2649___mcc_h951;
                    {
                      if (object.Equals(_1528_fromTpe, _2650_b)) {
                        Dafny.ISequence<Dafny.Rune> _2651_recursiveGen;
                        bool _2652_recOwned;
                        bool _2653_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2654_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1097;
                        bool _out1098;
                        bool _out1099;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1100;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1097, out _out1098, out _out1099, out _out1100);
                        _2651_recursiveGen = _out1097;
                        _2652_recOwned = _out1098;
                        _2653_recErased = _out1099;
                        _2654_recIdents = _out1100;
                        Dafny.ISequence<Dafny.Rune> _2655_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1101;
                        _out1101 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _2655_rhsType = _out1101;
                        Dafny.ISequence<Dafny.Rune> _2656_uneraseFn;
                        _2656_uneraseFn = ((_2652_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2655_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2656_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2651_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2652_recOwned;
                        isErased = false;
                        readIdents = _2654_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1102;
                        bool _out1103;
                        bool _out1104;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1105;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2650_b), _2650_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out1102, out _out1103, out _out1104, out _out1105);
                        s = _out1102;
                        isOwned = _out1103;
                        isErased = _out1104;
                        readIdents = _out1105;
                      }
                    }
                  }
                } else if (_source86.is_Nullable) {
                  DAST._IType _2657___mcc_h953 = _source86.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2658_recursiveGen;
                    bool _2659_recOwned;
                    bool _2660_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2661_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1106;
                    bool _out1107;
                    bool _out1108;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1109;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1106, out _out1107, out _out1108, out _out1109);
                    _2658_recursiveGen = _out1106;
                    _2659_recOwned = _out1107;
                    _2660_recErased = _out1108;
                    _2661_recIdents = _out1109;
                    if (!(_2659_recOwned)) {
                      _2658_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2658_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2658_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2660_recErased;
                    readIdents = _2661_recIdents;
                  }
                } else if (_source86.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2662___mcc_h955 = _source86.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2663_recursiveGen;
                    bool _2664_recOwned;
                    bool _2665_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2666_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1110;
                    bool _out1111;
                    bool _out1112;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1113;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1110, out _out1111, out _out1112, out _out1113);
                    _2663_recursiveGen = _out1110;
                    _2664_recOwned = _out1111;
                    _2665_recErased = _out1112;
                    _2666_recIdents = _out1113;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2663_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2664_recOwned;
                    isErased = _2665_recErased;
                    readIdents = _2666_recIdents;
                  }
                } else if (_source86.is_Array) {
                  DAST._IType _2667___mcc_h957 = _source86.dtor_element;
                  BigInteger _2668___mcc_h958 = _source86.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2669_recursiveGen;
                    bool _2670_recOwned;
                    bool _2671_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2672_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1114;
                    bool _out1115;
                    bool _out1116;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1117;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1114, out _out1115, out _out1116, out _out1117);
                    _2669_recursiveGen = _out1114;
                    _2670_recOwned = _out1115;
                    _2671_recErased = _out1116;
                    _2672_recIdents = _out1117;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2669_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2670_recOwned;
                    isErased = _2671_recErased;
                    readIdents = _2672_recIdents;
                  }
                } else if (_source86.is_Seq) {
                  DAST._IType _2673___mcc_h961 = _source86.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2674_recursiveGen;
                    bool _2675_recOwned;
                    bool _2676_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2677_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1118;
                    bool _out1119;
                    bool _out1120;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1121;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1118, out _out1119, out _out1120, out _out1121);
                    _2674_recursiveGen = _out1118;
                    _2675_recOwned = _out1119;
                    _2676_recErased = _out1120;
                    _2677_recIdents = _out1121;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2674_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2675_recOwned;
                    isErased = _2676_recErased;
                    readIdents = _2677_recIdents;
                  }
                } else if (_source86.is_Set) {
                  DAST._IType _2678___mcc_h963 = _source86.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2679_recursiveGen;
                    bool _2680_recOwned;
                    bool _2681_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2682_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1122;
                    bool _out1123;
                    bool _out1124;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1125;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1122, out _out1123, out _out1124, out _out1125);
                    _2679_recursiveGen = _out1122;
                    _2680_recOwned = _out1123;
                    _2681_recErased = _out1124;
                    _2682_recIdents = _out1125;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2679_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2680_recOwned;
                    isErased = _2681_recErased;
                    readIdents = _2682_recIdents;
                  }
                } else if (_source86.is_Multiset) {
                  DAST._IType _2683___mcc_h965 = _source86.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2684_recursiveGen;
                    bool _2685_recOwned;
                    bool _2686_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2687_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1126;
                    bool _out1127;
                    bool _out1128;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1129;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1126, out _out1127, out _out1128, out _out1129);
                    _2684_recursiveGen = _out1126;
                    _2685_recOwned = _out1127;
                    _2686_recErased = _out1128;
                    _2687_recIdents = _out1129;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2684_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2685_recOwned;
                    isErased = _2686_recErased;
                    readIdents = _2687_recIdents;
                  }
                } else if (_source86.is_Map) {
                  DAST._IType _2688___mcc_h967 = _source86.dtor_key;
                  DAST._IType _2689___mcc_h968 = _source86.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2690_recursiveGen;
                    bool _2691_recOwned;
                    bool _2692_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2693_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1130;
                    bool _out1131;
                    bool _out1132;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1133;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1130, out _out1131, out _out1132, out _out1133);
                    _2690_recursiveGen = _out1130;
                    _2691_recOwned = _out1131;
                    _2692_recErased = _out1132;
                    _2693_recIdents = _out1133;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2690_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2691_recOwned;
                    isErased = _2692_recErased;
                    readIdents = _2693_recIdents;
                  }
                } else if (_source86.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2694___mcc_h971 = _source86.dtor_args;
                  DAST._IType _2695___mcc_h972 = _source86.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2696_recursiveGen;
                    bool _2697_recOwned;
                    bool _2698_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2699_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1134;
                    bool _out1135;
                    bool _out1136;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1137;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1134, out _out1135, out _out1136, out _out1137);
                    _2696_recursiveGen = _out1134;
                    _2697_recOwned = _out1135;
                    _2698_recErased = _out1136;
                    _2699_recIdents = _out1137;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2696_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2697_recOwned;
                    isErased = _2698_recErased;
                    readIdents = _2699_recIdents;
                  }
                } else if (_source86.is_Primitive) {
                  DAST._IPrimitive _2700___mcc_h975 = _source86.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2701_recursiveGen;
                    bool _2702_recOwned;
                    bool _2703_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2704_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1138;
                    bool _out1139;
                    bool _out1140;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1141;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1138, out _out1139, out _out1140, out _out1141);
                    _2701_recursiveGen = _out1138;
                    _2702_recOwned = _out1139;
                    _2703_recErased = _out1140;
                    _2704_recIdents = _out1141;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2701_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2702_recOwned;
                    isErased = _2703_recErased;
                    readIdents = _2704_recIdents;
                  }
                } else if (_source86.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2705___mcc_h977 = _source86.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2706_recursiveGen;
                    bool _2707_recOwned;
                    bool _2708_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2709_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1142;
                    bool _out1143;
                    bool _out1144;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1145;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1142, out _out1143, out _out1144, out _out1145);
                    _2706_recursiveGen = _out1142;
                    _2707_recOwned = _out1143;
                    _2708_recErased = _out1144;
                    _2709_recIdents = _out1145;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2706_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2707_recOwned;
                    isErased = _2708_recErased;
                    readIdents = _2709_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2710___mcc_h979 = _source86.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2711_recursiveGen;
                    bool _2712_recOwned;
                    bool _2713_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2714_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1146;
                    bool _out1147;
                    bool _out1148;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1149;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1146, out _out1147, out _out1148, out _out1149);
                    _2711_recursiveGen = _out1146;
                    _2712_recOwned = _out1147;
                    _2713_recErased = _out1148;
                    _2714_recIdents = _out1149;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2711_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2712_recOwned;
                    isErased = _2713_recErased;
                    readIdents = _2714_recIdents;
                  }
                }
              } else if (_source79.is_Bool) {
                DAST._IType _source88 = _1535___mcc_h306;
                if (_source88.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2715___mcc_h981 = _source88.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2716___mcc_h982 = _source88.dtor_typeArgs;
                  DAST._IResolvedType _2717___mcc_h983 = _source88.dtor_resolved;
                  DAST._IResolvedType _source89 = _2717___mcc_h983;
                  if (_source89.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2718___mcc_h987 = _source89.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2719_recursiveGen;
                      bool _2720_recOwned;
                      bool _2721_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2722_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1150;
                      bool _out1151;
                      bool _out1152;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1153;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1150, out _out1151, out _out1152, out _out1153);
                      _2719_recursiveGen = _out1150;
                      _2720_recOwned = _out1151;
                      _2721_recErased = _out1152;
                      _2722_recIdents = _out1153;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2719_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2720_recOwned;
                      isErased = _2721_recErased;
                      readIdents = _2722_recIdents;
                    }
                  } else if (_source89.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2723___mcc_h989 = _source89.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2724_recursiveGen;
                      bool _2725_recOwned;
                      bool _2726_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2727_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1154;
                      bool _out1155;
                      bool _out1156;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1157;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1154, out _out1155, out _out1156, out _out1157);
                      _2724_recursiveGen = _out1154;
                      _2725_recOwned = _out1155;
                      _2726_recErased = _out1156;
                      _2727_recIdents = _out1157;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2724_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2725_recOwned;
                      isErased = _2726_recErased;
                      readIdents = _2727_recIdents;
                    }
                  } else {
                    DAST._IType _2728___mcc_h991 = _source89.dtor_Newtype_a0;
                    DAST._IType _2729_b = _2728___mcc_h991;
                    {
                      if (object.Equals(_1528_fromTpe, _2729_b)) {
                        Dafny.ISequence<Dafny.Rune> _2730_recursiveGen;
                        bool _2731_recOwned;
                        bool _2732_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2733_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1158;
                        bool _out1159;
                        bool _out1160;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1161;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1158, out _out1159, out _out1160, out _out1161);
                        _2730_recursiveGen = _out1158;
                        _2731_recOwned = _out1159;
                        _2732_recErased = _out1160;
                        _2733_recIdents = _out1161;
                        Dafny.ISequence<Dafny.Rune> _2734_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1162;
                        _out1162 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _2734_rhsType = _out1162;
                        Dafny.ISequence<Dafny.Rune> _2735_uneraseFn;
                        _2735_uneraseFn = ((_2731_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2734_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2735_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2730_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2731_recOwned;
                        isErased = false;
                        readIdents = _2733_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1163;
                        bool _out1164;
                        bool _out1165;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1166;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2729_b), _2729_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out1163, out _out1164, out _out1165, out _out1166);
                        s = _out1163;
                        isOwned = _out1164;
                        isErased = _out1165;
                        readIdents = _out1166;
                      }
                    }
                  }
                } else if (_source88.is_Nullable) {
                  DAST._IType _2736___mcc_h993 = _source88.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2737_recursiveGen;
                    bool _2738_recOwned;
                    bool _2739_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2740_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1167;
                    bool _out1168;
                    bool _out1169;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1170;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1167, out _out1168, out _out1169, out _out1170);
                    _2737_recursiveGen = _out1167;
                    _2738_recOwned = _out1168;
                    _2739_recErased = _out1169;
                    _2740_recIdents = _out1170;
                    if (!(_2738_recOwned)) {
                      _2737_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2737_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2737_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2739_recErased;
                    readIdents = _2740_recIdents;
                  }
                } else if (_source88.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2741___mcc_h995 = _source88.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2742_recursiveGen;
                    bool _2743_recOwned;
                    bool _2744_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2745_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1171;
                    bool _out1172;
                    bool _out1173;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1174;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1171, out _out1172, out _out1173, out _out1174);
                    _2742_recursiveGen = _out1171;
                    _2743_recOwned = _out1172;
                    _2744_recErased = _out1173;
                    _2745_recIdents = _out1174;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2742_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2743_recOwned;
                    isErased = _2744_recErased;
                    readIdents = _2745_recIdents;
                  }
                } else if (_source88.is_Array) {
                  DAST._IType _2746___mcc_h997 = _source88.dtor_element;
                  BigInteger _2747___mcc_h998 = _source88.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2748_recursiveGen;
                    bool _2749_recOwned;
                    bool _2750_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2751_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1175;
                    bool _out1176;
                    bool _out1177;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1178;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1175, out _out1176, out _out1177, out _out1178);
                    _2748_recursiveGen = _out1175;
                    _2749_recOwned = _out1176;
                    _2750_recErased = _out1177;
                    _2751_recIdents = _out1178;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2748_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2749_recOwned;
                    isErased = _2750_recErased;
                    readIdents = _2751_recIdents;
                  }
                } else if (_source88.is_Seq) {
                  DAST._IType _2752___mcc_h1001 = _source88.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2753_recursiveGen;
                    bool _2754_recOwned;
                    bool _2755_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2756_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1179;
                    bool _out1180;
                    bool _out1181;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1182;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1179, out _out1180, out _out1181, out _out1182);
                    _2753_recursiveGen = _out1179;
                    _2754_recOwned = _out1180;
                    _2755_recErased = _out1181;
                    _2756_recIdents = _out1182;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2753_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2754_recOwned;
                    isErased = _2755_recErased;
                    readIdents = _2756_recIdents;
                  }
                } else if (_source88.is_Set) {
                  DAST._IType _2757___mcc_h1003 = _source88.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2758_recursiveGen;
                    bool _2759_recOwned;
                    bool _2760_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2761_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1183;
                    bool _out1184;
                    bool _out1185;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1186;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1183, out _out1184, out _out1185, out _out1186);
                    _2758_recursiveGen = _out1183;
                    _2759_recOwned = _out1184;
                    _2760_recErased = _out1185;
                    _2761_recIdents = _out1186;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2758_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2759_recOwned;
                    isErased = _2760_recErased;
                    readIdents = _2761_recIdents;
                  }
                } else if (_source88.is_Multiset) {
                  DAST._IType _2762___mcc_h1005 = _source88.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2763_recursiveGen;
                    bool _2764_recOwned;
                    bool _2765_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2766_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1187;
                    bool _out1188;
                    bool _out1189;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1190;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1187, out _out1188, out _out1189, out _out1190);
                    _2763_recursiveGen = _out1187;
                    _2764_recOwned = _out1188;
                    _2765_recErased = _out1189;
                    _2766_recIdents = _out1190;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2763_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2764_recOwned;
                    isErased = _2765_recErased;
                    readIdents = _2766_recIdents;
                  }
                } else if (_source88.is_Map) {
                  DAST._IType _2767___mcc_h1007 = _source88.dtor_key;
                  DAST._IType _2768___mcc_h1008 = _source88.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2769_recursiveGen;
                    bool _2770_recOwned;
                    bool _2771_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2772_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1191;
                    bool _out1192;
                    bool _out1193;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1194;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1191, out _out1192, out _out1193, out _out1194);
                    _2769_recursiveGen = _out1191;
                    _2770_recOwned = _out1192;
                    _2771_recErased = _out1193;
                    _2772_recIdents = _out1194;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2769_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2770_recOwned;
                    isErased = _2771_recErased;
                    readIdents = _2772_recIdents;
                  }
                } else if (_source88.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2773___mcc_h1011 = _source88.dtor_args;
                  DAST._IType _2774___mcc_h1012 = _source88.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2775_recursiveGen;
                    bool _2776_recOwned;
                    bool _2777_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2778_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1195;
                    bool _out1196;
                    bool _out1197;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1198;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1195, out _out1196, out _out1197, out _out1198);
                    _2775_recursiveGen = _out1195;
                    _2776_recOwned = _out1196;
                    _2777_recErased = _out1197;
                    _2778_recIdents = _out1198;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2775_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2776_recOwned;
                    isErased = _2777_recErased;
                    readIdents = _2778_recIdents;
                  }
                } else if (_source88.is_Primitive) {
                  DAST._IPrimitive _2779___mcc_h1015 = _source88.dtor_Primitive_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2780_recursiveGen;
                    bool _2781_recOwned;
                    bool _2782_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2783_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1199;
                    bool _out1200;
                    bool _out1201;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1202;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1199, out _out1200, out _out1201, out _out1202);
                    _2780_recursiveGen = _out1199;
                    _2781_recOwned = _out1200;
                    _2782_recErased = _out1201;
                    _2783_recIdents = _out1202;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2780_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2781_recOwned;
                    isErased = _2782_recErased;
                    readIdents = _2783_recIdents;
                  }
                } else if (_source88.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2784___mcc_h1017 = _source88.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2785_recursiveGen;
                    bool _2786_recOwned;
                    bool _2787_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2788_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1203;
                    bool _out1204;
                    bool _out1205;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1206;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1203, out _out1204, out _out1205, out _out1206);
                    _2785_recursiveGen = _out1203;
                    _2786_recOwned = _out1204;
                    _2787_recErased = _out1205;
                    _2788_recIdents = _out1206;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2785_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2786_recOwned;
                    isErased = _2787_recErased;
                    readIdents = _2788_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2789___mcc_h1019 = _source88.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2790_recursiveGen;
                    bool _2791_recOwned;
                    bool _2792_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2793_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1207;
                    bool _out1208;
                    bool _out1209;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1210;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1207, out _out1208, out _out1209, out _out1210);
                    _2790_recursiveGen = _out1207;
                    _2791_recOwned = _out1208;
                    _2792_recErased = _out1209;
                    _2793_recIdents = _out1210;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2790_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2791_recOwned;
                    isErased = _2792_recErased;
                    readIdents = _2793_recIdents;
                  }
                }
              } else {
                DAST._IType _source90 = _1535___mcc_h306;
                if (_source90.is_Path) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2794___mcc_h1021 = _source90.dtor_Path_a0;
                  Dafny.ISequence<DAST._IType> _2795___mcc_h1022 = _source90.dtor_typeArgs;
                  DAST._IResolvedType _2796___mcc_h1023 = _source90.dtor_resolved;
                  DAST._IResolvedType _source91 = _2796___mcc_h1023;
                  if (_source91.is_Datatype) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2797___mcc_h1027 = _source91.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2798_recursiveGen;
                      bool _2799_recOwned;
                      bool _2800_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2801_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1211;
                      bool _out1212;
                      bool _out1213;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1214;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1211, out _out1212, out _out1213, out _out1214);
                      _2798_recursiveGen = _out1211;
                      _2799_recOwned = _out1212;
                      _2800_recErased = _out1213;
                      _2801_recIdents = _out1214;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2798_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2799_recOwned;
                      isErased = _2800_recErased;
                      readIdents = _2801_recIdents;
                    }
                  } else if (_source91.is_Trait) {
                    Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2802___mcc_h1029 = _source91.dtor_path;
                    {
                      Dafny.ISequence<Dafny.Rune> _2803_recursiveGen;
                      bool _2804_recOwned;
                      bool _2805_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2806_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1215;
                      bool _out1216;
                      bool _out1217;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1218;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1215, out _out1216, out _out1217, out _out1218);
                      _2803_recursiveGen = _out1215;
                      _2804_recOwned = _out1216;
                      _2805_recErased = _out1217;
                      _2806_recIdents = _out1218;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2803_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2804_recOwned;
                      isErased = _2805_recErased;
                      readIdents = _2806_recIdents;
                    }
                  } else {
                    DAST._IType _2807___mcc_h1031 = _source91.dtor_Newtype_a0;
                    DAST._IType _2808_b = _2807___mcc_h1031;
                    {
                      if (object.Equals(_1528_fromTpe, _2808_b)) {
                        Dafny.ISequence<Dafny.Rune> _2809_recursiveGen;
                        bool _2810_recOwned;
                        bool _2811_recErased;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2812_recIdents;
                        Dafny.ISequence<Dafny.Rune> _out1219;
                        bool _out1220;
                        bool _out1221;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1222;
                        DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1219, out _out1220, out _out1221, out _out1222);
                        _2809_recursiveGen = _out1219;
                        _2810_recOwned = _out1220;
                        _2811_recErased = _out1221;
                        _2812_recIdents = _out1222;
                        Dafny.ISequence<Dafny.Rune> _2813_rhsType;
                        Dafny.ISequence<Dafny.Rune> _out1223;
                        _out1223 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                        _2813_rhsType = _out1223;
                        Dafny.ISequence<Dafny.Rune> _2814_uneraseFn;
                        _2814_uneraseFn = ((_2810_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                        s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2813_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2814_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2809_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                        isOwned = _2810_recOwned;
                        isErased = false;
                        readIdents = _2812_recIdents;
                      } else {
                        Dafny.ISequence<Dafny.Rune> _out1224;
                        bool _out1225;
                        bool _out1226;
                        Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1227;
                        DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2808_b), _2808_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out1224, out _out1225, out _out1226, out _out1227);
                        s = _out1224;
                        isOwned = _out1225;
                        isErased = _out1226;
                        readIdents = _out1227;
                      }
                    }
                  }
                } else if (_source90.is_Nullable) {
                  DAST._IType _2815___mcc_h1033 = _source90.dtor_Nullable_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2816_recursiveGen;
                    bool _2817_recOwned;
                    bool _2818_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2819_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1228;
                    bool _out1229;
                    bool _out1230;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1231;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1228, out _out1229, out _out1230, out _out1231);
                    _2816_recursiveGen = _out1228;
                    _2817_recOwned = _out1229;
                    _2818_recErased = _out1230;
                    _2819_recIdents = _out1231;
                    if (!(_2817_recOwned)) {
                      _2816_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2816_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                    }
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2816_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = _2818_recErased;
                    readIdents = _2819_recIdents;
                  }
                } else if (_source90.is_Tuple) {
                  Dafny.ISequence<DAST._IType> _2820___mcc_h1035 = _source90.dtor_Tuple_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2821_recursiveGen;
                    bool _2822_recOwned;
                    bool _2823_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2824_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1232;
                    bool _out1233;
                    bool _out1234;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1235;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1232, out _out1233, out _out1234, out _out1235);
                    _2821_recursiveGen = _out1232;
                    _2822_recOwned = _out1233;
                    _2823_recErased = _out1234;
                    _2824_recIdents = _out1235;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2821_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2822_recOwned;
                    isErased = _2823_recErased;
                    readIdents = _2824_recIdents;
                  }
                } else if (_source90.is_Array) {
                  DAST._IType _2825___mcc_h1037 = _source90.dtor_element;
                  BigInteger _2826___mcc_h1038 = _source90.dtor_dims;
                  {
                    Dafny.ISequence<Dafny.Rune> _2827_recursiveGen;
                    bool _2828_recOwned;
                    bool _2829_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2830_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1236;
                    bool _out1237;
                    bool _out1238;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1239;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1236, out _out1237, out _out1238, out _out1239);
                    _2827_recursiveGen = _out1236;
                    _2828_recOwned = _out1237;
                    _2829_recErased = _out1238;
                    _2830_recIdents = _out1239;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2827_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2828_recOwned;
                    isErased = _2829_recErased;
                    readIdents = _2830_recIdents;
                  }
                } else if (_source90.is_Seq) {
                  DAST._IType _2831___mcc_h1041 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2832_recursiveGen;
                    bool _2833_recOwned;
                    bool _2834_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2835_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1240;
                    bool _out1241;
                    bool _out1242;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1243;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1240, out _out1241, out _out1242, out _out1243);
                    _2832_recursiveGen = _out1240;
                    _2833_recOwned = _out1241;
                    _2834_recErased = _out1242;
                    _2835_recIdents = _out1243;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2832_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2833_recOwned;
                    isErased = _2834_recErased;
                    readIdents = _2835_recIdents;
                  }
                } else if (_source90.is_Set) {
                  DAST._IType _2836___mcc_h1043 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2837_recursiveGen;
                    bool _2838_recOwned;
                    bool _2839_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2840_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1244;
                    bool _out1245;
                    bool _out1246;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1247;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1244, out _out1245, out _out1246, out _out1247);
                    _2837_recursiveGen = _out1244;
                    _2838_recOwned = _out1245;
                    _2839_recErased = _out1246;
                    _2840_recIdents = _out1247;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2837_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2838_recOwned;
                    isErased = _2839_recErased;
                    readIdents = _2840_recIdents;
                  }
                } else if (_source90.is_Multiset) {
                  DAST._IType _2841___mcc_h1045 = _source90.dtor_element;
                  {
                    Dafny.ISequence<Dafny.Rune> _2842_recursiveGen;
                    bool _2843_recOwned;
                    bool _2844_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2845_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1248;
                    bool _out1249;
                    bool _out1250;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1251;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1248, out _out1249, out _out1250, out _out1251);
                    _2842_recursiveGen = _out1248;
                    _2843_recOwned = _out1249;
                    _2844_recErased = _out1250;
                    _2845_recIdents = _out1251;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2842_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2843_recOwned;
                    isErased = _2844_recErased;
                    readIdents = _2845_recIdents;
                  }
                } else if (_source90.is_Map) {
                  DAST._IType _2846___mcc_h1047 = _source90.dtor_key;
                  DAST._IType _2847___mcc_h1048 = _source90.dtor_value;
                  {
                    Dafny.ISequence<Dafny.Rune> _2848_recursiveGen;
                    bool _2849_recOwned;
                    bool _2850_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2851_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1252;
                    bool _out1253;
                    bool _out1254;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1255;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1252, out _out1253, out _out1254, out _out1255);
                    _2848_recursiveGen = _out1252;
                    _2849_recOwned = _out1253;
                    _2850_recErased = _out1254;
                    _2851_recIdents = _out1255;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2848_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2849_recOwned;
                    isErased = _2850_recErased;
                    readIdents = _2851_recIdents;
                  }
                } else if (_source90.is_Arrow) {
                  Dafny.ISequence<DAST._IType> _2852___mcc_h1051 = _source90.dtor_args;
                  DAST._IType _2853___mcc_h1052 = _source90.dtor_result;
                  {
                    Dafny.ISequence<Dafny.Rune> _2854_recursiveGen;
                    bool _2855_recOwned;
                    bool _2856_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2857_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1256;
                    bool _out1257;
                    bool _out1258;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1259;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1256, out _out1257, out _out1258, out _out1259);
                    _2854_recursiveGen = _out1256;
                    _2855_recOwned = _out1257;
                    _2856_recErased = _out1258;
                    _2857_recIdents = _out1259;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2854_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2855_recOwned;
                    isErased = _2856_recErased;
                    readIdents = _2857_recIdents;
                  }
                } else if (_source90.is_Primitive) {
                  DAST._IPrimitive _2858___mcc_h1055 = _source90.dtor_Primitive_a0;
                  DAST._IPrimitive _source92 = _2858___mcc_h1055;
                  if (_source92.is_Int) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2859_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1260;
                      _out1260 = DCOMP.COMP.GenType(_1528_fromTpe, true, false);
                      _2859_rhsType = _out1260;
                      Dafny.ISequence<Dafny.Rune> _2860_recursiveGen;
                      bool _2861___v58;
                      bool _2862___v59;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2863_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1261;
                      bool _out1262;
                      bool _out1263;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1264;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, true, out _out1261, out _out1262, out _out1263, out _out1264);
                      _2860_recursiveGen = _out1261;
                      _2861___v58 = _out1262;
                      _2862___v59 = _out1263;
                      _2863_recIdents = _out1264;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2860_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as u32)"));
                      isOwned = true;
                      isErased = true;
                      readIdents = _2863_recIdents;
                    }
                  } else if (_source92.is_Real) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2864_recursiveGen;
                      bool _2865_recOwned;
                      bool _2866_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2867_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1265;
                      bool _out1266;
                      bool _out1267;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1268;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1265, out _out1266, out _out1267, out _out1268);
                      _2864_recursiveGen = _out1265;
                      _2865_recOwned = _out1266;
                      _2866_recErased = _out1267;
                      _2867_recIdents = _out1268;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2864_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2865_recOwned;
                      isErased = _2866_recErased;
                      readIdents = _2867_recIdents;
                    }
                  } else if (_source92.is_String) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2868_recursiveGen;
                      bool _2869_recOwned;
                      bool _2870_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2871_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1269;
                      bool _out1270;
                      bool _out1271;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1272;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1269, out _out1270, out _out1271, out _out1272);
                      _2868_recursiveGen = _out1269;
                      _2869_recOwned = _out1270;
                      _2870_recErased = _out1271;
                      _2871_recIdents = _out1272;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2868_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2869_recOwned;
                      isErased = _2870_recErased;
                      readIdents = _2871_recIdents;
                    }
                  } else if (_source92.is_Bool) {
                    {
                      Dafny.ISequence<Dafny.Rune> _2872_recursiveGen;
                      bool _2873_recOwned;
                      bool _2874_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2875_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1273;
                      bool _out1274;
                      bool _out1275;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1276;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1273, out _out1274, out _out1275, out _out1276);
                      _2872_recursiveGen = _out1273;
                      _2873_recOwned = _out1274;
                      _2874_recErased = _out1275;
                      _2875_recIdents = _out1276;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2872_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2873_recOwned;
                      isErased = _2874_recErased;
                      readIdents = _2875_recIdents;
                    }
                  } else {
                    {
                      Dafny.ISequence<Dafny.Rune> _2876_recursiveGen;
                      bool _2877_recOwned;
                      bool _2878_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2879_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1277;
                      bool _out1278;
                      bool _out1279;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1280;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1277, out _out1278, out _out1279, out _out1280);
                      _2876_recursiveGen = _out1277;
                      _2877_recOwned = _out1278;
                      _2878_recErased = _out1279;
                      _2879_recIdents = _out1280;
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2876_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                      isOwned = _2877_recOwned;
                      isErased = _2878_recErased;
                      readIdents = _2879_recIdents;
                    }
                  }
                } else if (_source90.is_Passthrough) {
                  Dafny.ISequence<Dafny.Rune> _2880___mcc_h1057 = _source90.dtor_Passthrough_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2881_recursiveGen;
                    bool _2882_recOwned;
                    bool _2883_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2884_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1281;
                    bool _out1282;
                    bool _out1283;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1284;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1281, out _out1282, out _out1283, out _out1284);
                    _2881_recursiveGen = _out1281;
                    _2882_recOwned = _out1282;
                    _2883_recErased = _out1283;
                    _2884_recIdents = _out1284;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2881_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2882_recOwned;
                    isErased = _2883_recErased;
                    readIdents = _2884_recIdents;
                  }
                } else {
                  Dafny.ISequence<Dafny.Rune> _2885___mcc_h1059 = _source90.dtor_TypeArg_a0;
                  {
                    Dafny.ISequence<Dafny.Rune> _2886_recursiveGen;
                    bool _2887_recOwned;
                    bool _2888_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2889_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1285;
                    bool _out1286;
                    bool _out1287;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1288;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1285, out _out1286, out _out1287, out _out1288);
                    _2886_recursiveGen = _out1285;
                    _2887_recOwned = _out1286;
                    _2888_recErased = _out1287;
                    _2889_recIdents = _out1288;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2886_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2887_recOwned;
                    isErased = _2888_recErased;
                    readIdents = _2889_recIdents;
                  }
                }
              }
            } else if (_source55.is_Passthrough) {
              Dafny.ISequence<Dafny.Rune> _2890___mcc_h1061 = _source55.dtor_Passthrough_a0;
              DAST._IType _source93 = _1535___mcc_h306;
              if (_source93.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2891___mcc_h1065 = _source93.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2892___mcc_h1066 = _source93.dtor_typeArgs;
                DAST._IResolvedType _2893___mcc_h1067 = _source93.dtor_resolved;
                DAST._IResolvedType _source94 = _2893___mcc_h1067;
                if (_source94.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2894___mcc_h1071 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2895_recursiveGen;
                    bool _2896_recOwned;
                    bool _2897_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2898_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1289;
                    bool _out1290;
                    bool _out1291;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1292;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1289, out _out1290, out _out1291, out _out1292);
                    _2895_recursiveGen = _out1289;
                    _2896_recOwned = _out1290;
                    _2897_recErased = _out1291;
                    _2898_recIdents = _out1292;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2895_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2896_recOwned;
                    isErased = _2897_recErased;
                    readIdents = _2898_recIdents;
                  }
                } else if (_source94.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2899___mcc_h1073 = _source94.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2900_recursiveGen;
                    bool _2901_recOwned;
                    bool _2902_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2903_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1293;
                    bool _out1294;
                    bool _out1295;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1296;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1293, out _out1294, out _out1295, out _out1296);
                    _2900_recursiveGen = _out1293;
                    _2901_recOwned = _out1294;
                    _2902_recErased = _out1295;
                    _2903_recIdents = _out1296;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2900_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2901_recOwned;
                    isErased = _2902_recErased;
                    readIdents = _2903_recIdents;
                  }
                } else {
                  DAST._IType _2904___mcc_h1075 = _source94.dtor_Newtype_a0;
                  DAST._IType _2905_b = _2904___mcc_h1075;
                  {
                    if (object.Equals(_1528_fromTpe, _2905_b)) {
                      Dafny.ISequence<Dafny.Rune> _2906_recursiveGen;
                      bool _2907_recOwned;
                      bool _2908_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2909_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1297;
                      bool _out1298;
                      bool _out1299;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1300;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1297, out _out1298, out _out1299, out _out1300);
                      _2906_recursiveGen = _out1297;
                      _2907_recOwned = _out1298;
                      _2908_recErased = _out1299;
                      _2909_recIdents = _out1300;
                      Dafny.ISequence<Dafny.Rune> _2910_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1301;
                      _out1301 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _2910_rhsType = _out1301;
                      Dafny.ISequence<Dafny.Rune> _2911_uneraseFn;
                      _2911_uneraseFn = ((_2907_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _2910_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _2911_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _2906_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _2907_recOwned;
                      isErased = false;
                      readIdents = _2909_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1302;
                      bool _out1303;
                      bool _out1304;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1305;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _2905_b), _2905_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out1302, out _out1303, out _out1304, out _out1305);
                      s = _out1302;
                      isOwned = _out1303;
                      isErased = _out1304;
                      readIdents = _out1305;
                    }
                  }
                }
              } else if (_source93.is_Nullable) {
                DAST._IType _2912___mcc_h1077 = _source93.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2913_recursiveGen;
                  bool _2914_recOwned;
                  bool _2915_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2916_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1306;
                  bool _out1307;
                  bool _out1308;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1309;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1306, out _out1307, out _out1308, out _out1309);
                  _2913_recursiveGen = _out1306;
                  _2914_recOwned = _out1307;
                  _2915_recErased = _out1308;
                  _2916_recIdents = _out1309;
                  if (!(_2914_recOwned)) {
                    _2913_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_2913_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _2913_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _2915_recErased;
                  readIdents = _2916_recIdents;
                }
              } else if (_source93.is_Tuple) {
                Dafny.ISequence<DAST._IType> _2917___mcc_h1079 = _source93.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2918_recursiveGen;
                  bool _2919_recOwned;
                  bool _2920_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2921_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1310;
                  bool _out1311;
                  bool _out1312;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1313;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1310, out _out1311, out _out1312, out _out1313);
                  _2918_recursiveGen = _out1310;
                  _2919_recOwned = _out1311;
                  _2920_recErased = _out1312;
                  _2921_recIdents = _out1313;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2918_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2919_recOwned;
                  isErased = _2920_recErased;
                  readIdents = _2921_recIdents;
                }
              } else if (_source93.is_Array) {
                DAST._IType _2922___mcc_h1081 = _source93.dtor_element;
                BigInteger _2923___mcc_h1082 = _source93.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _2924_recursiveGen;
                  bool _2925_recOwned;
                  bool _2926_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2927_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1314;
                  bool _out1315;
                  bool _out1316;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1317;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1314, out _out1315, out _out1316, out _out1317);
                  _2924_recursiveGen = _out1314;
                  _2925_recOwned = _out1315;
                  _2926_recErased = _out1316;
                  _2927_recIdents = _out1317;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2924_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2925_recOwned;
                  isErased = _2926_recErased;
                  readIdents = _2927_recIdents;
                }
              } else if (_source93.is_Seq) {
                DAST._IType _2928___mcc_h1085 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2929_recursiveGen;
                  bool _2930_recOwned;
                  bool _2931_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2932_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1318;
                  bool _out1319;
                  bool _out1320;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1321;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1318, out _out1319, out _out1320, out _out1321);
                  _2929_recursiveGen = _out1318;
                  _2930_recOwned = _out1319;
                  _2931_recErased = _out1320;
                  _2932_recIdents = _out1321;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2929_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2930_recOwned;
                  isErased = _2931_recErased;
                  readIdents = _2932_recIdents;
                }
              } else if (_source93.is_Set) {
                DAST._IType _2933___mcc_h1087 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2934_recursiveGen;
                  bool _2935_recOwned;
                  bool _2936_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2937_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1322;
                  bool _out1323;
                  bool _out1324;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1325;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1322, out _out1323, out _out1324, out _out1325);
                  _2934_recursiveGen = _out1322;
                  _2935_recOwned = _out1323;
                  _2936_recErased = _out1324;
                  _2937_recIdents = _out1325;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2934_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2935_recOwned;
                  isErased = _2936_recErased;
                  readIdents = _2937_recIdents;
                }
              } else if (_source93.is_Multiset) {
                DAST._IType _2938___mcc_h1089 = _source93.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _2939_recursiveGen;
                  bool _2940_recOwned;
                  bool _2941_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2942_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1326;
                  bool _out1327;
                  bool _out1328;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1329;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1326, out _out1327, out _out1328, out _out1329);
                  _2939_recursiveGen = _out1326;
                  _2940_recOwned = _out1327;
                  _2941_recErased = _out1328;
                  _2942_recIdents = _out1329;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2939_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2940_recOwned;
                  isErased = _2941_recErased;
                  readIdents = _2942_recIdents;
                }
              } else if (_source93.is_Map) {
                DAST._IType _2943___mcc_h1091 = _source93.dtor_key;
                DAST._IType _2944___mcc_h1092 = _source93.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _2945_recursiveGen;
                  bool _2946_recOwned;
                  bool _2947_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2948_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1330;
                  bool _out1331;
                  bool _out1332;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1333;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1330, out _out1331, out _out1332, out _out1333);
                  _2945_recursiveGen = _out1330;
                  _2946_recOwned = _out1331;
                  _2947_recErased = _out1332;
                  _2948_recIdents = _out1333;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2945_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2946_recOwned;
                  isErased = _2947_recErased;
                  readIdents = _2948_recIdents;
                }
              } else if (_source93.is_Arrow) {
                Dafny.ISequence<DAST._IType> _2949___mcc_h1095 = _source93.dtor_args;
                DAST._IType _2950___mcc_h1096 = _source93.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _2951_recursiveGen;
                  bool _2952_recOwned;
                  bool _2953_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2954_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1334;
                  bool _out1335;
                  bool _out1336;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1337;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1334, out _out1335, out _out1336, out _out1337);
                  _2951_recursiveGen = _out1334;
                  _2952_recOwned = _out1335;
                  _2953_recErased = _out1336;
                  _2954_recIdents = _out1337;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2951_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2952_recOwned;
                  isErased = _2953_recErased;
                  readIdents = _2954_recIdents;
                }
              } else if (_source93.is_Primitive) {
                DAST._IPrimitive _2955___mcc_h1099 = _source93.dtor_Primitive_a0;
                DAST._IPrimitive _source95 = _2955___mcc_h1099;
                if (_source95.is_Int) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2956_rhsType;
                    Dafny.ISequence<Dafny.Rune> _out1338;
                    _out1338 = DCOMP.COMP.GenType(_1528_fromTpe, true, false);
                    _2956_rhsType = _out1338;
                    Dafny.ISequence<Dafny.Rune> _2957_recursiveGen;
                    bool _2958___v54;
                    bool _2959___v55;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2960_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1339;
                    bool _out1340;
                    bool _out1341;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1342;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, true, out _out1339, out _out1340, out _out1341, out _out1342);
                    _2957_recursiveGen = _out1339;
                    _2958___v54 = _out1340;
                    _2959___v55 = _out1341;
                    _2960_recIdents = _out1342;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from("), _2957_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    isOwned = true;
                    isErased = true;
                    readIdents = _2960_recIdents;
                  }
                } else if (_source95.is_Real) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2961_recursiveGen;
                    bool _2962_recOwned;
                    bool _2963_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2964_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1343;
                    bool _out1344;
                    bool _out1345;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1346;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1343, out _out1344, out _out1345, out _out1346);
                    _2961_recursiveGen = _out1343;
                    _2962_recOwned = _out1344;
                    _2963_recErased = _out1345;
                    _2964_recIdents = _out1346;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2961_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2962_recOwned;
                    isErased = _2963_recErased;
                    readIdents = _2964_recIdents;
                  }
                } else if (_source95.is_String) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2965_recursiveGen;
                    bool _2966_recOwned;
                    bool _2967_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2968_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1347;
                    bool _out1348;
                    bool _out1349;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1350;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1347, out _out1348, out _out1349, out _out1350);
                    _2965_recursiveGen = _out1347;
                    _2966_recOwned = _out1348;
                    _2967_recErased = _out1349;
                    _2968_recIdents = _out1350;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2965_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2966_recOwned;
                    isErased = _2967_recErased;
                    readIdents = _2968_recIdents;
                  }
                } else if (_source95.is_Bool) {
                  {
                    Dafny.ISequence<Dafny.Rune> _2969_recursiveGen;
                    bool _2970_recOwned;
                    bool _2971_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2972_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1351;
                    bool _out1352;
                    bool _out1353;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1354;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1351, out _out1352, out _out1353, out _out1354);
                    _2969_recursiveGen = _out1351;
                    _2970_recOwned = _out1352;
                    _2971_recErased = _out1353;
                    _2972_recIdents = _out1354;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2969_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2970_recOwned;
                    isErased = _2971_recErased;
                    readIdents = _2972_recIdents;
                  }
                } else {
                  {
                    Dafny.ISequence<Dafny.Rune> _2973_recursiveGen;
                    bool _2974_recOwned;
                    bool _2975_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2976_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1355;
                    bool _out1356;
                    bool _out1357;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1358;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1355, out _out1356, out _out1357, out _out1358);
                    _2973_recursiveGen = _out1355;
                    _2974_recOwned = _out1356;
                    _2975_recErased = _out1357;
                    _2976_recIdents = _out1358;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2973_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2974_recOwned;
                    isErased = _2975_recErased;
                    readIdents = _2976_recIdents;
                  }
                }
              } else if (_source93.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _2977___mcc_h1101 = _source93.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2978_recursiveGen;
                  bool _2979___v62;
                  bool _2980___v63;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2981_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1359;
                  bool _out1360;
                  bool _out1361;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1362;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, true, out _out1359, out _out1360, out _out1361, out _out1362);
                  _2978_recursiveGen = _out1359;
                  _2979___v62 = _out1360;
                  _2980___v63 = _out1361;
                  _2981_recIdents = _out1362;
                  Dafny.ISequence<Dafny.Rune> _2982_toTpeGen;
                  Dafny.ISequence<Dafny.Rune> _out1363;
                  _out1363 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                  _2982_toTpeGen = _out1363;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _2978_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ")), _2982_toTpeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = true;
                  readIdents = _2981_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _2983___mcc_h1103 = _source93.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _2984_recursiveGen;
                  bool _2985_recOwned;
                  bool _2986_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2987_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1364;
                  bool _out1365;
                  bool _out1366;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1367;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1364, out _out1365, out _out1366, out _out1367);
                  _2984_recursiveGen = _out1364;
                  _2985_recOwned = _out1365;
                  _2986_recErased = _out1366;
                  _2987_recIdents = _out1367;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2984_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _2985_recOwned;
                  isErased = _2986_recErased;
                  readIdents = _2987_recIdents;
                }
              }
            } else {
              Dafny.ISequence<Dafny.Rune> _2988___mcc_h1105 = _source55.dtor_TypeArg_a0;
              DAST._IType _source96 = _1535___mcc_h306;
              if (_source96.is_Path) {
                Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2989___mcc_h1109 = _source96.dtor_Path_a0;
                Dafny.ISequence<DAST._IType> _2990___mcc_h1110 = _source96.dtor_typeArgs;
                DAST._IResolvedType _2991___mcc_h1111 = _source96.dtor_resolved;
                DAST._IResolvedType _source97 = _2991___mcc_h1111;
                if (_source97.is_Datatype) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2992___mcc_h1115 = _source97.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2993_recursiveGen;
                    bool _2994_recOwned;
                    bool _2995_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _2996_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1368;
                    bool _out1369;
                    bool _out1370;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1371;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1368, out _out1369, out _out1370, out _out1371);
                    _2993_recursiveGen = _out1368;
                    _2994_recOwned = _out1369;
                    _2995_recErased = _out1370;
                    _2996_recIdents = _out1371;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2993_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2994_recOwned;
                    isErased = _2995_recErased;
                    readIdents = _2996_recIdents;
                  }
                } else if (_source97.is_Trait) {
                  Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _2997___mcc_h1117 = _source97.dtor_path;
                  {
                    Dafny.ISequence<Dafny.Rune> _2998_recursiveGen;
                    bool _2999_recOwned;
                    bool _3000_recErased;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3001_recIdents;
                    Dafny.ISequence<Dafny.Rune> _out1372;
                    bool _out1373;
                    bool _out1374;
                    Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1375;
                    DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1372, out _out1373, out _out1374, out _out1375);
                    _2998_recursiveGen = _out1372;
                    _2999_recOwned = _out1373;
                    _3000_recErased = _out1374;
                    _3001_recIdents = _out1375;
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _2998_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                    isOwned = _2999_recOwned;
                    isErased = _3000_recErased;
                    readIdents = _3001_recIdents;
                  }
                } else {
                  DAST._IType _3002___mcc_h1119 = _source97.dtor_Newtype_a0;
                  DAST._IType _3003_b = _3002___mcc_h1119;
                  {
                    if (object.Equals(_1528_fromTpe, _3003_b)) {
                      Dafny.ISequence<Dafny.Rune> _3004_recursiveGen;
                      bool _3005_recOwned;
                      bool _3006_recErased;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3007_recIdents;
                      Dafny.ISequence<Dafny.Rune> _out1376;
                      bool _out1377;
                      bool _out1378;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1379;
                      DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1376, out _out1377, out _out1378, out _out1379);
                      _3004_recursiveGen = _out1376;
                      _3005_recOwned = _out1377;
                      _3006_recErased = _out1378;
                      _3007_recIdents = _out1379;
                      Dafny.ISequence<Dafny.Rune> _3008_rhsType;
                      Dafny.ISequence<Dafny.Rune> _out1380;
                      _out1380 = DCOMP.COMP.GenType(_1527_toTpe, true, false);
                      _3008_rhsType = _out1380;
                      Dafny.ISequence<Dafny.Rune> _3009_uneraseFn;
                      _3009_uneraseFn = ((_3005_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("unerase")));
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3008_rhsType), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as ::dafny_runtime::DafnyUnerasable<_>>::")), _3009_uneraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3004_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                      isOwned = _3005_recOwned;
                      isErased = false;
                      readIdents = _3007_recIdents;
                    } else {
                      Dafny.ISequence<Dafny.Rune> _out1381;
                      bool _out1382;
                      bool _out1383;
                      Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1384;
                      DCOMP.COMP.GenExpr(DAST.Expression.create_Convert(DAST.Expression.create_Convert(_1529_expr, _1528_fromTpe, _3003_b), _3003_b, _1527_toTpe), selfIdent, @params, mustOwn, out _out1381, out _out1382, out _out1383, out _out1384);
                      s = _out1381;
                      isOwned = _out1382;
                      isErased = _out1383;
                      readIdents = _out1384;
                    }
                  }
                }
              } else if (_source96.is_Nullable) {
                DAST._IType _3010___mcc_h1121 = _source96.dtor_Nullable_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3011_recursiveGen;
                  bool _3012_recOwned;
                  bool _3013_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3014_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1385;
                  bool _out1386;
                  bool _out1387;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1388;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1385, out _out1386, out _out1387, out _out1388);
                  _3011_recursiveGen = _out1385;
                  _3012_recOwned = _out1386;
                  _3013_recErased = _out1387;
                  _3014_recIdents = _out1388;
                  if (!(_3012_recOwned)) {
                    _3011_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(_3011_recursiveGen, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                  }
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("Some("), _3011_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                  isOwned = true;
                  isErased = _3013_recErased;
                  readIdents = _3014_recIdents;
                }
              } else if (_source96.is_Tuple) {
                Dafny.ISequence<DAST._IType> _3015___mcc_h1123 = _source96.dtor_Tuple_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3016_recursiveGen;
                  bool _3017_recOwned;
                  bool _3018_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3019_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1389;
                  bool _out1390;
                  bool _out1391;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1392;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1389, out _out1390, out _out1391, out _out1392);
                  _3016_recursiveGen = _out1389;
                  _3017_recOwned = _out1390;
                  _3018_recErased = _out1391;
                  _3019_recIdents = _out1392;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3016_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3017_recOwned;
                  isErased = _3018_recErased;
                  readIdents = _3019_recIdents;
                }
              } else if (_source96.is_Array) {
                DAST._IType _3020___mcc_h1125 = _source96.dtor_element;
                BigInteger _3021___mcc_h1126 = _source96.dtor_dims;
                {
                  Dafny.ISequence<Dafny.Rune> _3022_recursiveGen;
                  bool _3023_recOwned;
                  bool _3024_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3025_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1393;
                  bool _out1394;
                  bool _out1395;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1396;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1393, out _out1394, out _out1395, out _out1396);
                  _3022_recursiveGen = _out1393;
                  _3023_recOwned = _out1394;
                  _3024_recErased = _out1395;
                  _3025_recIdents = _out1396;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3022_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3023_recOwned;
                  isErased = _3024_recErased;
                  readIdents = _3025_recIdents;
                }
              } else if (_source96.is_Seq) {
                DAST._IType _3026___mcc_h1129 = _source96.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3027_recursiveGen;
                  bool _3028_recOwned;
                  bool _3029_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3030_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1397;
                  bool _out1398;
                  bool _out1399;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1400;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1397, out _out1398, out _out1399, out _out1400);
                  _3027_recursiveGen = _out1397;
                  _3028_recOwned = _out1398;
                  _3029_recErased = _out1399;
                  _3030_recIdents = _out1400;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3027_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3028_recOwned;
                  isErased = _3029_recErased;
                  readIdents = _3030_recIdents;
                }
              } else if (_source96.is_Set) {
                DAST._IType _3031___mcc_h1131 = _source96.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3032_recursiveGen;
                  bool _3033_recOwned;
                  bool _3034_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3035_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1401;
                  bool _out1402;
                  bool _out1403;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1404;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1401, out _out1402, out _out1403, out _out1404);
                  _3032_recursiveGen = _out1401;
                  _3033_recOwned = _out1402;
                  _3034_recErased = _out1403;
                  _3035_recIdents = _out1404;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3032_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3033_recOwned;
                  isErased = _3034_recErased;
                  readIdents = _3035_recIdents;
                }
              } else if (_source96.is_Multiset) {
                DAST._IType _3036___mcc_h1133 = _source96.dtor_element;
                {
                  Dafny.ISequence<Dafny.Rune> _3037_recursiveGen;
                  bool _3038_recOwned;
                  bool _3039_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3040_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1405;
                  bool _out1406;
                  bool _out1407;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1408;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1405, out _out1406, out _out1407, out _out1408);
                  _3037_recursiveGen = _out1405;
                  _3038_recOwned = _out1406;
                  _3039_recErased = _out1407;
                  _3040_recIdents = _out1408;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3037_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3038_recOwned;
                  isErased = _3039_recErased;
                  readIdents = _3040_recIdents;
                }
              } else if (_source96.is_Map) {
                DAST._IType _3041___mcc_h1135 = _source96.dtor_key;
                DAST._IType _3042___mcc_h1136 = _source96.dtor_value;
                {
                  Dafny.ISequence<Dafny.Rune> _3043_recursiveGen;
                  bool _3044_recOwned;
                  bool _3045_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3046_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1409;
                  bool _out1410;
                  bool _out1411;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1412;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1409, out _out1410, out _out1411, out _out1412);
                  _3043_recursiveGen = _out1409;
                  _3044_recOwned = _out1410;
                  _3045_recErased = _out1411;
                  _3046_recIdents = _out1412;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3043_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3044_recOwned;
                  isErased = _3045_recErased;
                  readIdents = _3046_recIdents;
                }
              } else if (_source96.is_Arrow) {
                Dafny.ISequence<DAST._IType> _3047___mcc_h1139 = _source96.dtor_args;
                DAST._IType _3048___mcc_h1140 = _source96.dtor_result;
                {
                  Dafny.ISequence<Dafny.Rune> _3049_recursiveGen;
                  bool _3050_recOwned;
                  bool _3051_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3052_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1413;
                  bool _out1414;
                  bool _out1415;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1416;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1413, out _out1414, out _out1415, out _out1416);
                  _3049_recursiveGen = _out1413;
                  _3050_recOwned = _out1414;
                  _3051_recErased = _out1415;
                  _3052_recIdents = _out1416;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3049_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3050_recOwned;
                  isErased = _3051_recErased;
                  readIdents = _3052_recIdents;
                }
              } else if (_source96.is_Primitive) {
                DAST._IPrimitive _3053___mcc_h1143 = _source96.dtor_Primitive_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3054_recursiveGen;
                  bool _3055_recOwned;
                  bool _3056_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3057_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1417;
                  bool _out1418;
                  bool _out1419;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1420;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1417, out _out1418, out _out1419, out _out1420);
                  _3054_recursiveGen = _out1417;
                  _3055_recOwned = _out1418;
                  _3056_recErased = _out1419;
                  _3057_recIdents = _out1420;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3054_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3055_recOwned;
                  isErased = _3056_recErased;
                  readIdents = _3057_recIdents;
                }
              } else if (_source96.is_Passthrough) {
                Dafny.ISequence<Dafny.Rune> _3058___mcc_h1145 = _source96.dtor_Passthrough_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3059_recursiveGen;
                  bool _3060_recOwned;
                  bool _3061_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3062_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1421;
                  bool _out1422;
                  bool _out1423;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1424;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1421, out _out1422, out _out1423, out _out1424);
                  _3059_recursiveGen = _out1421;
                  _3060_recOwned = _out1422;
                  _3061_recErased = _out1423;
                  _3062_recIdents = _out1424;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3059_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3060_recOwned;
                  isErased = _3061_recErased;
                  readIdents = _3062_recIdents;
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3063___mcc_h1147 = _source96.dtor_TypeArg_a0;
                {
                  Dafny.ISequence<Dafny.Rune> _3064_recursiveGen;
                  bool _3065_recOwned;
                  bool _3066_recErased;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3067_recIdents;
                  Dafny.ISequence<Dafny.Rune> _out1425;
                  bool _out1426;
                  bool _out1427;
                  Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1428;
                  DCOMP.COMP.GenExpr(_1529_expr, selfIdent, @params, mustOwn, out _out1425, out _out1426, out _out1427, out _out1428);
                  _3064_recursiveGen = _out1425;
                  _3065_recOwned = _out1426;
                  _3066_recErased = _out1427;
                  _3067_recIdents = _out1428;
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3064_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("/* conversion not yet implemented */)"));
                  isOwned = _3065_recOwned;
                  isErased = _3066_recErased;
                  readIdents = _3067_recIdents;
                }
              }
            }
          }
        }
      } else if (_source48.is_SeqConstruct) {
        DAST._IExpression _3068___mcc_h26 = _source48.dtor_length;
        DAST._IExpression _3069___mcc_h27 = _source48.dtor_elem;
        DAST._IExpression _3070_expr = _3069___mcc_h27;
        DAST._IExpression _3071_length = _3068___mcc_h26;
        {
          Dafny.ISequence<Dafny.Rune> _3072_recursiveGen;
          bool _3073___v65;
          bool _3074_eErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3075_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1429;
          bool _out1430;
          bool _out1431;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1432;
          DCOMP.COMP.GenExpr(_3070_expr, selfIdent, @params, true, out _out1429, out _out1430, out _out1431, out _out1432);
          _3072_recursiveGen = _out1429;
          _3073___v65 = _out1430;
          _3074_eErased = _out1431;
          _3075_recIdents = _out1432;
          Dafny.ISequence<Dafny.Rune> _3076_lengthGen;
          bool _3077___v66;
          bool _3078_lengthErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3079_lengthIdents;
          Dafny.ISequence<Dafny.Rune> _out1433;
          bool _out1434;
          bool _out1435;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1436;
          DCOMP.COMP.GenExpr(_3071_length, selfIdent, @params, true, out _out1433, out _out1434, out _out1435, out _out1436);
          _3076_lengthGen = _out1433;
          _3077___v66 = _out1434;
          _3078_lengthErased = _out1435;
          _3079_lengthIdents = _out1436;
          if (!(_3078_lengthErased)) {
            _3076_lengthGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3076_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet _initializer = "), _3072_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n::dafny_runtime::integer_range(::dafny_runtime::Zero::zero(), ")), _3076_lengthGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").map(|i| _initializer.0(&i)).collect::<Vec<_>>()\n}"));
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3075_recIdents, _3079_lengthIdents);
          isOwned = true;
          isErased = _3074_eErased;
        }
      } else if (_source48.is_SeqValue) {
        Dafny.ISequence<DAST._IExpression> _3080___mcc_h28 = _source48.dtor_elements;
        DAST._IType _3081___mcc_h29 = _source48.dtor_typ;
        DAST._IType _3082_typ = _3081___mcc_h29;
        Dafny.ISequence<DAST._IExpression> _3083_exprs = _3080___mcc_h28;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3084_genTpe;
          Dafny.ISequence<Dafny.Rune> _out1437;
          _out1437 = DCOMP.COMP.GenType(_3082_typ, false, false);
          _3084_genTpe = _out1437;
          BigInteger _3085_i;
          _3085_i = BigInteger.Zero;
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(vec![");
          _3085_i = BigInteger.Zero;
          while ((_3085_i) < (new BigInteger((_3083_exprs).Count))) {
            if ((_3085_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3086_recursiveGen;
            bool _3087___v67;
            bool _3088_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3089_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1438;
            bool _out1439;
            bool _out1440;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1441;
            DCOMP.COMP.GenExpr((_3083_exprs).Select(_3085_i), selfIdent, @params, true, out _out1438, out _out1439, out _out1440, out _out1441);
            _3086_recursiveGen = _out1438;
            _3087___v67 = _out1439;
            _3088_isErased = _out1440;
            _3089_recIdents = _out1441;
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3089_recIdents);
            if (_3088_isErased) {
              _3086_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3086_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3086_recursiveGen);
            _3085_i = (_3085_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("] as Vec<")), _3084_genTpe), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_SetValue) {
        Dafny.ISequence<DAST._IExpression> _3090___mcc_h30 = _source48.dtor_elements;
        Dafny.ISequence<DAST._IExpression> _3091_exprs = _3090___mcc_h30;
        {
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>> _3092_generatedValues;
          _3092_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3093_i;
          _3093_i = BigInteger.Zero;
          bool _3094_allErased;
          _3094_allErased = true;
          while ((_3093_i) < (new BigInteger((_3091_exprs).Count))) {
            Dafny.ISequence<Dafny.Rune> _3095_recursiveGen;
            bool _3096___v68;
            bool _3097_isErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3098_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1442;
            bool _out1443;
            bool _out1444;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1445;
            DCOMP.COMP.GenExpr((_3091_exprs).Select(_3093_i), selfIdent, @params, true, out _out1442, out _out1443, out _out1444, out _out1445);
            _3095_recursiveGen = _out1442;
            _3096___v68 = _out1443;
            _3097_isErased = _out1444;
            _3098_recIdents = _out1445;
            _3094_allErased = (_3094_allErased) && (_3097_isErased);
            _3092_generatedValues = Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.Concat(_3092_generatedValues, Dafny.Sequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, bool>>.FromElements(_System.Tuple2<Dafny.ISequence<Dafny.Rune>, bool>.create(_3095_recursiveGen, _3097_isErased)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3098_recIdents);
            _3093_i = (_3093_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3093_i = BigInteger.Zero;
          while ((_3093_i) < (new BigInteger((_3092_generatedValues).Count))) {
            if ((_3093_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3099_gen;
            _3099_gen = ((_3092_generatedValues).Select(_3093_i)).dtor__0;
            if ((((_3092_generatedValues).Select(_3093_i)).dtor__1) && (!(_3094_allErased))) {
              _3099_gen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3099_gen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3099_gen);
            _3093_i = (_3093_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashSet<_>>()"));
          isOwned = true;
          isErased = _3094_allErased;
        }
      } else if (_source48.is_MapValue) {
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3100___mcc_h31 = _source48.dtor_mapElems;
        Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3101_mapElems = _3100___mcc_h31;
        {
          Dafny.ISequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>> _3102_generatedValues;
          _3102_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements();
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3103_i;
          _3103_i = BigInteger.Zero;
          bool _3104_allErased;
          _3104_allErased = true;
          while ((_3103_i) < (new BigInteger((_3101_mapElems).Count))) {
            Dafny.ISequence<Dafny.Rune> _3105_recursiveGenKey;
            bool _3106___v69;
            bool _3107_isErasedKey;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3108_recIdentsKey;
            Dafny.ISequence<Dafny.Rune> _out1446;
            bool _out1447;
            bool _out1448;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1449;
            DCOMP.COMP.GenExpr(((_3101_mapElems).Select(_3103_i)).dtor__0, selfIdent, @params, true, out _out1446, out _out1447, out _out1448, out _out1449);
            _3105_recursiveGenKey = _out1446;
            _3106___v69 = _out1447;
            _3107_isErasedKey = _out1448;
            _3108_recIdentsKey = _out1449;
            Dafny.ISequence<Dafny.Rune> _3109_recursiveGenValue;
            bool _3110___v70;
            bool _3111_isErasedValue;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3112_recIdentsValue;
            Dafny.ISequence<Dafny.Rune> _out1450;
            bool _out1451;
            bool _out1452;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1453;
            DCOMP.COMP.GenExpr(((_3101_mapElems).Select(_3103_i)).dtor__1, selfIdent, @params, true, out _out1450, out _out1451, out _out1452, out _out1453);
            _3109_recursiveGenValue = _out1450;
            _3110___v70 = _out1451;
            _3111_isErasedValue = _out1452;
            _3112_recIdentsValue = _out1453;
            _3104_allErased = ((_3104_allErased) && (_3107_isErasedKey)) && (_3111_isErasedValue);
            _3102_generatedValues = Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.Concat(_3102_generatedValues, Dafny.Sequence<_System._ITuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>>.FromElements(_System.Tuple4<Dafny.ISequence<Dafny.Rune>, Dafny.ISequence<Dafny.Rune>, bool, bool>.create(_3105_recursiveGenKey, _3109_recursiveGenValue, _3107_isErasedKey, _3111_isErasedValue)));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3108_recIdentsKey), _3112_recIdentsValue);
            _3103_i = (_3103_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("vec![");
          _3103_i = BigInteger.Zero;
          while ((_3103_i) < (new BigInteger((_3102_generatedValues).Count))) {
            if ((_3103_i).Sign == 1) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3113_genKey;
            _3113_genKey = ((_3102_generatedValues).Select(_3103_i)).dtor__0;
            Dafny.ISequence<Dafny.Rune> _3114_genValue;
            _3114_genValue = ((_3102_generatedValues).Select(_3103_i)).dtor__1;
            if ((((_3102_generatedValues).Select(_3103_i)).dtor__2) && (!(_3104_allErased))) {
              _3113_genKey = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3113_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if ((((_3102_generatedValues).Select(_3103_i)).dtor__3) && (!(_3104_allErased))) {
              _3114_genValue = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned("), _3114_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3113_genKey), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3114_genValue), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3103_i = (_3103_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].into_iter().collect::<std::collections::HashMap<_, _>>()"));
          isOwned = true;
          isErased = _3104_allErased;
        }
      } else if (_source48.is_This) {
        {
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _source98 = selfIdent;
          if (_source98.is_None) {
            {
              s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("panic!(\"this outside of a method\")");
              isOwned = true;
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
              isErased = true;
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3115___mcc_h1149 = _source98.dtor_value;
            Dafny.ISequence<Dafny.Rune> _3116_id = _3115___mcc_h1149;
            {
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(_3116_id, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
                isOwned = true;
              } else {
                if ((_3116_id).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self"))) {
                  s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("self");
                } else {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3116_id);
                }
                isOwned = false;
              }
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3116_id);
              isErased = false;
            }
          }
        }
      } else if (_source48.is_Ite) {
        DAST._IExpression _3117___mcc_h32 = _source48.dtor_cond;
        DAST._IExpression _3118___mcc_h33 = _source48.dtor_thn;
        DAST._IExpression _3119___mcc_h34 = _source48.dtor_els;
        DAST._IExpression _3120_f = _3119___mcc_h34;
        DAST._IExpression _3121_t = _3118___mcc_h33;
        DAST._IExpression _3122_cond = _3117___mcc_h32;
        {
          Dafny.ISequence<Dafny.Rune> _3123_condString;
          bool _3124___v71;
          bool _3125_condErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3126_recIdentsCond;
          Dafny.ISequence<Dafny.Rune> _out1454;
          bool _out1455;
          bool _out1456;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1457;
          DCOMP.COMP.GenExpr(_3122_cond, selfIdent, @params, true, out _out1454, out _out1455, out _out1456, out _out1457);
          _3123_condString = _out1454;
          _3124___v71 = _out1455;
          _3125_condErased = _out1456;
          _3126_recIdentsCond = _out1457;
          if (!(_3125_condErased)) {
            _3123_condString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3123_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          Dafny.ISequence<Dafny.Rune> _3127___v72;
          bool _3128_tHasToBeOwned;
          bool _3129___v73;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3130___v74;
          Dafny.ISequence<Dafny.Rune> _out1458;
          bool _out1459;
          bool _out1460;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1461;
          DCOMP.COMP.GenExpr(_3121_t, selfIdent, @params, mustOwn, out _out1458, out _out1459, out _out1460, out _out1461);
          _3127___v72 = _out1458;
          _3128_tHasToBeOwned = _out1459;
          _3129___v73 = _out1460;
          _3130___v74 = _out1461;
          Dafny.ISequence<Dafny.Rune> _3131_fString;
          bool _3132_fOwned;
          bool _3133_fErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3134_recIdentsF;
          Dafny.ISequence<Dafny.Rune> _out1462;
          bool _out1463;
          bool _out1464;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1465;
          DCOMP.COMP.GenExpr(_3120_f, selfIdent, @params, _3128_tHasToBeOwned, out _out1462, out _out1463, out _out1464, out _out1465);
          _3131_fString = _out1462;
          _3132_fOwned = _out1463;
          _3133_fErased = _out1464;
          _3134_recIdentsF = _out1465;
          Dafny.ISequence<Dafny.Rune> _3135_tString;
          bool _3136___v75;
          bool _3137_tErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3138_recIdentsT;
          Dafny.ISequence<Dafny.Rune> _out1466;
          bool _out1467;
          bool _out1468;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1469;
          DCOMP.COMP.GenExpr(_3121_t, selfIdent, @params, _3132_fOwned, out _out1466, out _out1467, out _out1468, out _out1469);
          _3135_tString = _out1466;
          _3136___v75 = _out1467;
          _3137_tErased = _out1468;
          _3138_recIdentsT = _out1469;
          if ((!(_3133_fErased)) || (!(_3137_tErased))) {
            if (_3133_fErased) {
              _3131_fString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3131_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (_3137_tErased) {
              _3135_tString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3135_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(if "), _3123_condString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3135_tString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n} else {\n")), _3131_fString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})"));
          isOwned = _3132_fOwned;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3126_recIdentsCond, _3138_recIdentsT), _3134_recIdentsF);
          isErased = (_3133_fErased) || (_3137_tErased);
        }
      } else if (_source48.is_UnOp) {
        DAST._IUnaryOp _3139___mcc_h35 = _source48.dtor_unOp;
        DAST._IExpression _3140___mcc_h36 = _source48.dtor_expr;
        DAST._IUnaryOp _source99 = _3139___mcc_h35;
        if (_source99.is_Not) {
          DAST._IExpression _3141_e = _3140___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3142_recursiveGen;
            bool _3143___v76;
            bool _3144_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3145_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1470;
            bool _out1471;
            bool _out1472;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1473;
            DCOMP.COMP.GenExpr(_3141_e, selfIdent, @params, true, out _out1470, out _out1471, out _out1472, out _out1473);
            _3142_recursiveGen = _out1470;
            _3143___v76 = _out1471;
            _3144_recErased = _out1472;
            _3145_recIdents = _out1473;
            if (!(_3144_recErased)) {
              _3142_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3142_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3142_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3145_recIdents;
            isErased = true;
          }
        } else if (_source99.is_BitwiseNot) {
          DAST._IExpression _3146_e = _3140___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3147_recursiveGen;
            bool _3148___v77;
            bool _3149_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3150_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1474;
            bool _out1475;
            bool _out1476;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1477;
            DCOMP.COMP.GenExpr(_3146_e, selfIdent, @params, true, out _out1474, out _out1475, out _out1476, out _out1477);
            _3147_recursiveGen = _out1474;
            _3148___v77 = _out1475;
            _3149_recErased = _out1476;
            _3150_recIdents = _out1477;
            if (!(_3149_recErased)) {
              _3147_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3147_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("~("), _3147_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = true;
            readIdents = _3150_recIdents;
            isErased = true;
          }
        } else {
          DAST._IExpression _3151_e = _3140___mcc_h36;
          {
            Dafny.ISequence<Dafny.Rune> _3152_recursiveGen;
            bool _3153_recOwned;
            bool _3154_recErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3155_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1478;
            bool _out1479;
            bool _out1480;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1481;
            DCOMP.COMP.GenExpr(_3151_e, selfIdent, @params, false, out _out1478, out _out1479, out _out1480, out _out1481);
            _3152_recursiveGen = _out1478;
            _3153_recOwned = _out1479;
            _3154_recErased = _out1480;
            _3155_recIdents = _out1481;
            if (!(_3154_recErased)) {
              Dafny.ISequence<Dafny.Rune> _3156_eraseFn;
              _3156_eraseFn = ((_3153_recOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase_owned")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("erase")));
              _3152_recursiveGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::"), _3156_eraseFn), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3152_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").len())"));
            isOwned = true;
            readIdents = _3155_recIdents;
            isErased = true;
          }
        }
      } else if (_source48.is_BinOp) {
        DAST._IBinOp _3157___mcc_h37 = _source48.dtor_op;
        DAST._IExpression _3158___mcc_h38 = _source48.dtor_left;
        DAST._IExpression _3159___mcc_h39 = _source48.dtor_right;
        DAST._IExpression _3160_r = _3159___mcc_h39;
        DAST._IExpression _3161_l = _3158___mcc_h38;
        DAST._IBinOp _3162_op = _3157___mcc_h37;
        {
          Dafny.ISequence<Dafny.Rune> _3163_left;
          bool _3164___v78;
          bool _3165_leftErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3166_recIdentsL;
          Dafny.ISequence<Dafny.Rune> _out1482;
          bool _out1483;
          bool _out1484;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1485;
          DCOMP.COMP.GenExpr(_3161_l, selfIdent, @params, true, out _out1482, out _out1483, out _out1484, out _out1485);
          _3163_left = _out1482;
          _3164___v78 = _out1483;
          _3165_leftErased = _out1484;
          _3166_recIdentsL = _out1485;
          Dafny.ISequence<Dafny.Rune> _3167_right;
          bool _3168___v79;
          bool _3169_rightErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3170_recIdentsR;
          Dafny.ISequence<Dafny.Rune> _out1486;
          bool _out1487;
          bool _out1488;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1489;
          DCOMP.COMP.GenExpr(_3160_r, selfIdent, @params, true, out _out1486, out _out1487, out _out1488, out _out1489);
          _3167_right = _out1486;
          _3168___v79 = _out1487;
          _3169_rightErased = _out1488;
          _3170_recIdentsR = _out1489;
          DAST._IBinOp _source100 = _3162_op;
          if (_source100.is_Eq) {
            bool _3171___mcc_h1150 = _source100.dtor_referential;
            bool _3172___mcc_h1151 = _source100.dtor_nullable;
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source101 = _3162_op;
              if (_source101.is_Eq) {
                bool _3173___mcc_h1160 = _source101.dtor_referential;
                bool _3174___mcc_h1161 = _source101.dtor_nullable;
                bool _3175_nullable = _3174___mcc_h1161;
                bool _3176_referential = _3173___mcc_h1160;
                {
                  if (_3176_referential) {
                    if (_3175_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source101.is_Neq) {
                bool _3177___mcc_h1162 = _source101.dtor_referential;
                bool _3178___mcc_h1163 = _source101.dtor_nullable;
                bool _3179_nullable = _3178___mcc_h1163;
                bool _3180_referential = _3177___mcc_h1162;
                {
                  if (_3180_referential) {
                    if (_3179_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source101.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source101.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source101.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source101.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3181___mcc_h1164 = _source101.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3182_op = _3181___mcc_h1164;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3182_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Neq) {
            bool _3183___mcc_h1154 = _source100.dtor_referential;
            bool _3184___mcc_h1155 = _source100.dtor_nullable;
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source102 = _3162_op;
              if (_source102.is_Eq) {
                bool _3185___mcc_h1165 = _source102.dtor_referential;
                bool _3186___mcc_h1166 = _source102.dtor_nullable;
                bool _3187_nullable = _3186___mcc_h1166;
                bool _3188_referential = _3185___mcc_h1165;
                {
                  if (_3188_referential) {
                    if (_3187_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source102.is_Neq) {
                bool _3189___mcc_h1167 = _source102.dtor_referential;
                bool _3190___mcc_h1168 = _source102.dtor_nullable;
                bool _3191_nullable = _3190___mcc_h1168;
                bool _3192_referential = _3189___mcc_h1167;
                {
                  if (_3192_referential) {
                    if (_3191_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source102.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source102.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source102.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source102.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3193___mcc_h1169 = _source102.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3194_op = _3193___mcc_h1169;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3194_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Div) {
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source103 = _3162_op;
              if (_source103.is_Eq) {
                bool _3195___mcc_h1170 = _source103.dtor_referential;
                bool _3196___mcc_h1171 = _source103.dtor_nullable;
                bool _3197_nullable = _3196___mcc_h1171;
                bool _3198_referential = _3195___mcc_h1170;
                {
                  if (_3198_referential) {
                    if (_3197_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source103.is_Neq) {
                bool _3199___mcc_h1172 = _source103.dtor_referential;
                bool _3200___mcc_h1173 = _source103.dtor_nullable;
                bool _3201_nullable = _3200___mcc_h1173;
                bool _3202_referential = _3199___mcc_h1172;
                {
                  if (_3202_referential) {
                    if (_3201_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source103.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source103.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source103.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source103.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3203___mcc_h1174 = _source103.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3204_op = _3203___mcc_h1174;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3204_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_EuclidianDiv) {
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source104 = _3162_op;
              if (_source104.is_Eq) {
                bool _3205___mcc_h1175 = _source104.dtor_referential;
                bool _3206___mcc_h1176 = _source104.dtor_nullable;
                bool _3207_nullable = _3206___mcc_h1176;
                bool _3208_referential = _3205___mcc_h1175;
                {
                  if (_3208_referential) {
                    if (_3207_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source104.is_Neq) {
                bool _3209___mcc_h1177 = _source104.dtor_referential;
                bool _3210___mcc_h1178 = _source104.dtor_nullable;
                bool _3211_nullable = _3210___mcc_h1178;
                bool _3212_referential = _3209___mcc_h1177;
                {
                  if (_3212_referential) {
                    if (_3211_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source104.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source104.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3213___mcc_h1179 = _source104.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3214_op = _3213___mcc_h1179;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3214_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Mod) {
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source105 = _3162_op;
              if (_source105.is_Eq) {
                bool _3215___mcc_h1180 = _source105.dtor_referential;
                bool _3216___mcc_h1181 = _source105.dtor_nullable;
                bool _3217_nullable = _3216___mcc_h1181;
                bool _3218_referential = _3215___mcc_h1180;
                {
                  if (_3218_referential) {
                    if (_3217_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source105.is_Neq) {
                bool _3219___mcc_h1182 = _source105.dtor_referential;
                bool _3220___mcc_h1183 = _source105.dtor_nullable;
                bool _3221_nullable = _3220___mcc_h1183;
                bool _3222_referential = _3219___mcc_h1182;
                {
                  if (_3222_referential) {
                    if (_3221_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source105.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source105.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source105.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source105.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3223___mcc_h1184 = _source105.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3224_op = _3223___mcc_h1184;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3224_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_EuclidianMod) {
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source106 = _3162_op;
              if (_source106.is_Eq) {
                bool _3225___mcc_h1185 = _source106.dtor_referential;
                bool _3226___mcc_h1186 = _source106.dtor_nullable;
                bool _3227_nullable = _3226___mcc_h1186;
                bool _3228_referential = _3225___mcc_h1185;
                {
                  if (_3228_referential) {
                    if (_3227_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source106.is_Neq) {
                bool _3229___mcc_h1187 = _source106.dtor_referential;
                bool _3230___mcc_h1188 = _source106.dtor_nullable;
                bool _3231_nullable = _3230___mcc_h1188;
                bool _3232_referential = _3229___mcc_h1187;
                {
                  if (_3232_referential) {
                    if (_3231_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source106.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source106.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3233___mcc_h1189 = _source106.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3234_op = _3233___mcc_h1189;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3234_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          } else if (_source100.is_Implies) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") || ")), _3167_right);
            }
          } else if (_source100.is_In) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3167_right, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
          } else if (_source100.is_NotIn) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".contains(&")), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
            }
          } else if (_source100.is_SetDifference) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".difference(&")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").cloned().collect::<::std::collections::HashSet<_>>()"));
            }
          } else if (_source100.is_Concat) {
            {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("["), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("].concat()"));
            }
          } else {
            Dafny.ISequence<Dafny.Rune> _3235___mcc_h1158 = _source100.dtor_Passthrough_a0;
            {
              if (!(_3165_leftErased)) {
                _3163_left = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              if (!(_3169_rightErased)) {
                _3167_right = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              DAST._IBinOp _source107 = _3162_op;
              if (_source107.is_Eq) {
                bool _3236___mcc_h1190 = _source107.dtor_referential;
                bool _3237___mcc_h1191 = _source107.dtor_nullable;
                bool _3238_nullable = _3237___mcc_h1191;
                bool _3239_referential = _3236___mcc_h1190;
                {
                  if (_3239_referential) {
                    if (_3238_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" == ")), _3167_right);
                  }
                }
              } else if (_source107.is_Neq) {
                bool _3240___mcc_h1192 = _source107.dtor_referential;
                bool _3241___mcc_h1193 = _source107.dtor_nullable;
                bool _3242_nullable = _3241___mcc_h1193;
                bool _3243_referential = _3240___mcc_h1192;
                {
                  if (_3243_referential) {
                    if (_3242_nullable) {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::dafny_runtime::nullable_referential_equality("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                    } else {
                      s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("!::std::rc::Rc::ptr_eq(&("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("), &(")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
                    }
                  } else {
                    s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3163_left, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" != ")), _3167_right);
                  }
                }
              } else if (_source107.is_Div) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") / (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source107.is_EuclidianDiv) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_division("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source107.is_Mod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") % (")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else if (_source107.is_EuclidianMod) {
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::euclidian_modulo("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              } else {
                Dafny.ISequence<Dafny.Rune> _3244___mcc_h1194 = _source107.dtor_Passthrough_a0;
                Dafny.ISequence<Dafny.Rune> _3245_op = _3244___mcc_h1194;
                {
                  s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3163_left), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3245_op), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" ")), _3167_right), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
                }
              }
            }
          }
          isOwned = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3166_recIdentsL, _3170_recIdentsR);
          isErased = true;
        }
      } else if (_source48.is_ArrayLen) {
        DAST._IExpression _3246___mcc_h40 = _source48.dtor_expr;
        BigInteger _3247___mcc_h41 = _source48.dtor_dim;
        BigInteger _3248_dim = _3247___mcc_h41;
        DAST._IExpression _3249_expr = _3246___mcc_h40;
        {
          Dafny.ISequence<Dafny.Rune> _3250_recursiveGen;
          bool _3251___v81;
          bool _3252_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3253_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1490;
          bool _out1491;
          bool _out1492;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1493;
          DCOMP.COMP.GenExpr(_3249_expr, selfIdent, @params, true, out _out1490, out _out1491, out _out1492, out _out1493);
          _3250_recursiveGen = _out1490;
          _3251___v81 = _out1491;
          _3252_recErased = _out1492;
          _3253_recIdents = _out1493;
          if ((_3248_dim).Sign == 0) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(("), _3250_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow().len())"));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::BigInt::from(m.borrow().len())");
            BigInteger _3254_i;
            _3254_i = BigInteger.One;
            while ((_3254_i) < (_3248_dim)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("m.borrow().get(0).map(|m| "), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
              _3254_i = (_3254_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3250_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow().get(0).map(|m| ")), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap_or(::dafny_runtime::BigInt::from(0))"));
          }
          isOwned = true;
          readIdents = _3253_recIdents;
          isErased = true;
        }
      } else if (_source48.is_Select) {
        DAST._IExpression _3255___mcc_h42 = _source48.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3256___mcc_h43 = _source48.dtor_field;
        bool _3257___mcc_h44 = _source48.dtor_isConstant;
        bool _3258___mcc_h45 = _source48.dtor_onDatatype;
        DAST._IExpression _source108 = _3255___mcc_h42;
        if (_source108.is_Literal) {
          DAST._ILiteral _3259___mcc_h46 = _source108.dtor_Literal_a0;
          bool _3260_isDatatype = _3258___mcc_h45;
          bool _3261_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3262_field = _3256___mcc_h43;
          DAST._IExpression _3263_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3264_onString;
            bool _3265_onOwned;
            bool _3266_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3267_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1494;
            bool _out1495;
            bool _out1496;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1497;
            DCOMP.COMP.GenExpr(_3263_on, selfIdent, @params, false, out _out1494, out _out1495, out _out1496, out _out1497);
            _3264_onString = _out1494;
            _3265_onOwned = _out1495;
            _3266_onErased = _out1496;
            _3267_recIdents = _out1497;
            if ((_3260_isDatatype) || (_3261_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3264_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3262_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3261_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3264_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3262_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3267_recIdents;
          }
        } else if (_source108.is_Ident) {
          Dafny.ISequence<Dafny.Rune> _3268___mcc_h48 = _source108.dtor_Ident_a0;
          bool _3269_isDatatype = _3258___mcc_h45;
          bool _3270_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3271_field = _3256___mcc_h43;
          DAST._IExpression _3272_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3273_onString;
            bool _3274_onOwned;
            bool _3275_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3276_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1498;
            bool _out1499;
            bool _out1500;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1501;
            DCOMP.COMP.GenExpr(_3272_on, selfIdent, @params, false, out _out1498, out _out1499, out _out1500, out _out1501);
            _3273_onString = _out1498;
            _3274_onOwned = _out1499;
            _3275_onErased = _out1500;
            _3276_recIdents = _out1501;
            if ((_3269_isDatatype) || (_3270_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3273_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3271_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3270_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3273_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3271_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3276_recIdents;
          }
        } else if (_source108.is_Companion) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3277___mcc_h50 = _source108.dtor_Companion_a0;
          bool _3278_isDatatype = _3258___mcc_h45;
          bool _3279_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3280_field = _3256___mcc_h43;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3281_c = _3277___mcc_h50;
          {
            Dafny.ISequence<Dafny.Rune> _3282_onString;
            bool _3283_onOwned;
            bool _3284_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3285_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1502;
            bool _out1503;
            bool _out1504;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1505;
            DCOMP.COMP.GenExpr(DAST.Expression.create_Companion(_3281_c), selfIdent, @params, false, out _out1502, out _out1503, out _out1504, out _out1505);
            _3282_onString = _out1502;
            _3283_onOwned = _out1503;
            _3284_onErased = _out1504;
            _3285_recIdents = _out1505;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3282_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3280_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
            isOwned = true;
            isErased = false;
            readIdents = _3285_recIdents;
          }
        } else if (_source108.is_Tuple) {
          Dafny.ISequence<DAST._IExpression> _3286___mcc_h52 = _source108.dtor_Tuple_a0;
          bool _3287_isDatatype = _3258___mcc_h45;
          bool _3288_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3289_field = _3256___mcc_h43;
          DAST._IExpression _3290_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3291_onString;
            bool _3292_onOwned;
            bool _3293_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3294_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1506;
            bool _out1507;
            bool _out1508;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1509;
            DCOMP.COMP.GenExpr(_3290_on, selfIdent, @params, false, out _out1506, out _out1507, out _out1508, out _out1509);
            _3291_onString = _out1506;
            _3292_onOwned = _out1507;
            _3293_onErased = _out1508;
            _3294_recIdents = _out1509;
            if ((_3287_isDatatype) || (_3288_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3291_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3289_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3288_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3291_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3289_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3294_recIdents;
          }
        } else if (_source108.is_New) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3295___mcc_h54 = _source108.dtor_path;
          Dafny.ISequence<DAST._IType> _3296___mcc_h55 = _source108.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3297___mcc_h56 = _source108.dtor_args;
          bool _3298_isDatatype = _3258___mcc_h45;
          bool _3299_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3300_field = _3256___mcc_h43;
          DAST._IExpression _3301_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3302_onString;
            bool _3303_onOwned;
            bool _3304_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3305_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1510;
            bool _out1511;
            bool _out1512;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1513;
            DCOMP.COMP.GenExpr(_3301_on, selfIdent, @params, false, out _out1510, out _out1511, out _out1512, out _out1513);
            _3302_onString = _out1510;
            _3303_onOwned = _out1511;
            _3304_onErased = _out1512;
            _3305_recIdents = _out1513;
            if ((_3298_isDatatype) || (_3299_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3299_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3302_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3300_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3305_recIdents;
          }
        } else if (_source108.is_NewArray) {
          Dafny.ISequence<DAST._IExpression> _3306___mcc_h60 = _source108.dtor_dims;
          DAST._IType _3307___mcc_h61 = _source108.dtor_typ;
          bool _3308_isDatatype = _3258___mcc_h45;
          bool _3309_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3310_field = _3256___mcc_h43;
          DAST._IExpression _3311_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3312_onString;
            bool _3313_onOwned;
            bool _3314_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3315_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1514;
            bool _out1515;
            bool _out1516;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1517;
            DCOMP.COMP.GenExpr(_3311_on, selfIdent, @params, false, out _out1514, out _out1515, out _out1516, out _out1517);
            _3312_onString = _out1514;
            _3313_onOwned = _out1515;
            _3314_onErased = _out1516;
            _3315_recIdents = _out1517;
            if ((_3308_isDatatype) || (_3309_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3312_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3310_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3309_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3312_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3310_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3315_recIdents;
          }
        } else if (_source108.is_DatatypeValue) {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3316___mcc_h64 = _source108.dtor_path;
          Dafny.ISequence<DAST._IType> _3317___mcc_h65 = _source108.dtor_typeArgs;
          Dafny.ISequence<Dafny.Rune> _3318___mcc_h66 = _source108.dtor_variant;
          bool _3319___mcc_h67 = _source108.dtor_isCo;
          Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3320___mcc_h68 = _source108.dtor_contents;
          bool _3321_isDatatype = _3258___mcc_h45;
          bool _3322_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3323_field = _3256___mcc_h43;
          DAST._IExpression _3324_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3325_onString;
            bool _3326_onOwned;
            bool _3327_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3328_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1518;
            bool _out1519;
            bool _out1520;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1521;
            DCOMP.COMP.GenExpr(_3324_on, selfIdent, @params, false, out _out1518, out _out1519, out _out1520, out _out1521);
            _3325_onString = _out1518;
            _3326_onOwned = _out1519;
            _3327_onErased = _out1520;
            _3328_recIdents = _out1521;
            if ((_3321_isDatatype) || (_3322_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3325_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3323_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3322_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3325_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3323_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3328_recIdents;
          }
        } else if (_source108.is_Convert) {
          DAST._IExpression _3329___mcc_h74 = _source108.dtor_value;
          DAST._IType _3330___mcc_h75 = _source108.dtor_from;
          DAST._IType _3331___mcc_h76 = _source108.dtor_typ;
          bool _3332_isDatatype = _3258___mcc_h45;
          bool _3333_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3334_field = _3256___mcc_h43;
          DAST._IExpression _3335_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3336_onString;
            bool _3337_onOwned;
            bool _3338_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3339_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1522;
            bool _out1523;
            bool _out1524;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1525;
            DCOMP.COMP.GenExpr(_3335_on, selfIdent, @params, false, out _out1522, out _out1523, out _out1524, out _out1525);
            _3336_onString = _out1522;
            _3337_onOwned = _out1523;
            _3338_onErased = _out1524;
            _3339_recIdents = _out1525;
            if ((_3332_isDatatype) || (_3333_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3336_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3334_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3333_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3336_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3334_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3339_recIdents;
          }
        } else if (_source108.is_SeqConstruct) {
          DAST._IExpression _3340___mcc_h80 = _source108.dtor_length;
          DAST._IExpression _3341___mcc_h81 = _source108.dtor_elem;
          bool _3342_isDatatype = _3258___mcc_h45;
          bool _3343_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3344_field = _3256___mcc_h43;
          DAST._IExpression _3345_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3346_onString;
            bool _3347_onOwned;
            bool _3348_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3349_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1526;
            bool _out1527;
            bool _out1528;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1529;
            DCOMP.COMP.GenExpr(_3345_on, selfIdent, @params, false, out _out1526, out _out1527, out _out1528, out _out1529);
            _3346_onString = _out1526;
            _3347_onOwned = _out1527;
            _3348_onErased = _out1528;
            _3349_recIdents = _out1529;
            if ((_3342_isDatatype) || (_3343_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3346_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3344_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3343_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3346_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3344_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3349_recIdents;
          }
        } else if (_source108.is_SeqValue) {
          Dafny.ISequence<DAST._IExpression> _3350___mcc_h84 = _source108.dtor_elements;
          DAST._IType _3351___mcc_h85 = _source108.dtor_typ;
          bool _3352_isDatatype = _3258___mcc_h45;
          bool _3353_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3354_field = _3256___mcc_h43;
          DAST._IExpression _3355_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3356_onString;
            bool _3357_onOwned;
            bool _3358_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3359_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1530;
            bool _out1531;
            bool _out1532;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1533;
            DCOMP.COMP.GenExpr(_3355_on, selfIdent, @params, false, out _out1530, out _out1531, out _out1532, out _out1533);
            _3356_onString = _out1530;
            _3357_onOwned = _out1531;
            _3358_onErased = _out1532;
            _3359_recIdents = _out1533;
            if ((_3352_isDatatype) || (_3353_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3356_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3354_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3353_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3356_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3354_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3359_recIdents;
          }
        } else if (_source108.is_SetValue) {
          Dafny.ISequence<DAST._IExpression> _3360___mcc_h88 = _source108.dtor_elements;
          bool _3361_isDatatype = _3258___mcc_h45;
          bool _3362_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3363_field = _3256___mcc_h43;
          DAST._IExpression _3364_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3365_onString;
            bool _3366_onOwned;
            bool _3367_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3368_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1534;
            bool _out1535;
            bool _out1536;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1537;
            DCOMP.COMP.GenExpr(_3364_on, selfIdent, @params, false, out _out1534, out _out1535, out _out1536, out _out1537);
            _3365_onString = _out1534;
            _3366_onOwned = _out1535;
            _3367_onErased = _out1536;
            _3368_recIdents = _out1537;
            if ((_3361_isDatatype) || (_3362_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3365_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3363_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3362_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3365_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3363_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3368_recIdents;
          }
        } else if (_source108.is_MapValue) {
          Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3369___mcc_h90 = _source108.dtor_mapElems;
          bool _3370_isDatatype = _3258___mcc_h45;
          bool _3371_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3372_field = _3256___mcc_h43;
          DAST._IExpression _3373_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3374_onString;
            bool _3375_onOwned;
            bool _3376_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3377_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1538;
            bool _out1539;
            bool _out1540;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1541;
            DCOMP.COMP.GenExpr(_3373_on, selfIdent, @params, false, out _out1538, out _out1539, out _out1540, out _out1541);
            _3374_onString = _out1538;
            _3375_onOwned = _out1539;
            _3376_onErased = _out1540;
            _3377_recIdents = _out1541;
            if ((_3370_isDatatype) || (_3371_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3374_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3372_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3371_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3374_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3372_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3377_recIdents;
          }
        } else if (_source108.is_This) {
          bool _3378_isDatatype = _3258___mcc_h45;
          bool _3379_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3380_field = _3256___mcc_h43;
          DAST._IExpression _3381_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3382_onString;
            bool _3383_onOwned;
            bool _3384_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3385_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1542;
            bool _out1543;
            bool _out1544;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1545;
            DCOMP.COMP.GenExpr(_3381_on, selfIdent, @params, false, out _out1542, out _out1543, out _out1544, out _out1545);
            _3382_onString = _out1542;
            _3383_onOwned = _out1543;
            _3384_onErased = _out1544;
            _3385_recIdents = _out1545;
            if ((_3378_isDatatype) || (_3379_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3379_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3382_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3380_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3385_recIdents;
          }
        } else if (_source108.is_Ite) {
          DAST._IExpression _3386___mcc_h92 = _source108.dtor_cond;
          DAST._IExpression _3387___mcc_h93 = _source108.dtor_thn;
          DAST._IExpression _3388___mcc_h94 = _source108.dtor_els;
          bool _3389_isDatatype = _3258___mcc_h45;
          bool _3390_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3391_field = _3256___mcc_h43;
          DAST._IExpression _3392_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3393_onString;
            bool _3394_onOwned;
            bool _3395_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3396_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1546;
            bool _out1547;
            bool _out1548;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1549;
            DCOMP.COMP.GenExpr(_3392_on, selfIdent, @params, false, out _out1546, out _out1547, out _out1548, out _out1549);
            _3393_onString = _out1546;
            _3394_onOwned = _out1547;
            _3395_onErased = _out1548;
            _3396_recIdents = _out1549;
            if ((_3389_isDatatype) || (_3390_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3390_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3393_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3391_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3396_recIdents;
          }
        } else if (_source108.is_UnOp) {
          DAST._IUnaryOp _3397___mcc_h98 = _source108.dtor_unOp;
          DAST._IExpression _3398___mcc_h99 = _source108.dtor_expr;
          bool _3399_isDatatype = _3258___mcc_h45;
          bool _3400_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3401_field = _3256___mcc_h43;
          DAST._IExpression _3402_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3403_onString;
            bool _3404_onOwned;
            bool _3405_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3406_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1550;
            bool _out1551;
            bool _out1552;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1553;
            DCOMP.COMP.GenExpr(_3402_on, selfIdent, @params, false, out _out1550, out _out1551, out _out1552, out _out1553);
            _3403_onString = _out1550;
            _3404_onOwned = _out1551;
            _3405_onErased = _out1552;
            _3406_recIdents = _out1553;
            if ((_3399_isDatatype) || (_3400_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3403_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3401_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3400_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3403_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3401_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3406_recIdents;
          }
        } else if (_source108.is_BinOp) {
          DAST._IBinOp _3407___mcc_h102 = _source108.dtor_op;
          DAST._IExpression _3408___mcc_h103 = _source108.dtor_left;
          DAST._IExpression _3409___mcc_h104 = _source108.dtor_right;
          bool _3410_isDatatype = _3258___mcc_h45;
          bool _3411_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3412_field = _3256___mcc_h43;
          DAST._IExpression _3413_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3414_onString;
            bool _3415_onOwned;
            bool _3416_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3417_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1554;
            bool _out1555;
            bool _out1556;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1557;
            DCOMP.COMP.GenExpr(_3413_on, selfIdent, @params, false, out _out1554, out _out1555, out _out1556, out _out1557);
            _3414_onString = _out1554;
            _3415_onOwned = _out1555;
            _3416_onErased = _out1556;
            _3417_recIdents = _out1557;
            if ((_3410_isDatatype) || (_3411_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3414_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3411_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3414_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3412_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3417_recIdents;
          }
        } else if (_source108.is_ArrayLen) {
          DAST._IExpression _3418___mcc_h108 = _source108.dtor_expr;
          BigInteger _3419___mcc_h109 = _source108.dtor_dim;
          bool _3420_isDatatype = _3258___mcc_h45;
          bool _3421_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3422_field = _3256___mcc_h43;
          DAST._IExpression _3423_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3424_onString;
            bool _3425_onOwned;
            bool _3426_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3427_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1558;
            bool _out1559;
            bool _out1560;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1561;
            DCOMP.COMP.GenExpr(_3423_on, selfIdent, @params, false, out _out1558, out _out1559, out _out1560, out _out1561);
            _3424_onString = _out1558;
            _3425_onOwned = _out1559;
            _3426_onErased = _out1560;
            _3427_recIdents = _out1561;
            if ((_3420_isDatatype) || (_3421_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3424_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3422_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3421_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3424_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3422_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3427_recIdents;
          }
        } else if (_source108.is_Select) {
          DAST._IExpression _3428___mcc_h112 = _source108.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3429___mcc_h113 = _source108.dtor_field;
          bool _3430___mcc_h114 = _source108.dtor_isConstant;
          bool _3431___mcc_h115 = _source108.dtor_onDatatype;
          bool _3432_isDatatype = _3258___mcc_h45;
          bool _3433_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3434_field = _3256___mcc_h43;
          DAST._IExpression _3435_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3436_onString;
            bool _3437_onOwned;
            bool _3438_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3439_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1562;
            bool _out1563;
            bool _out1564;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1565;
            DCOMP.COMP.GenExpr(_3435_on, selfIdent, @params, false, out _out1562, out _out1563, out _out1564, out _out1565);
            _3436_onString = _out1562;
            _3437_onOwned = _out1563;
            _3438_onErased = _out1564;
            _3439_recIdents = _out1565;
            if ((_3432_isDatatype) || (_3433_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3436_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3434_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3433_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3436_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3434_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3439_recIdents;
          }
        } else if (_source108.is_SelectFn) {
          DAST._IExpression _3440___mcc_h120 = _source108.dtor_expr;
          Dafny.ISequence<Dafny.Rune> _3441___mcc_h121 = _source108.dtor_field;
          bool _3442___mcc_h122 = _source108.dtor_onDatatype;
          bool _3443___mcc_h123 = _source108.dtor_isStatic;
          BigInteger _3444___mcc_h124 = _source108.dtor_arity;
          bool _3445_isDatatype = _3258___mcc_h45;
          bool _3446_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3447_field = _3256___mcc_h43;
          DAST._IExpression _3448_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3449_onString;
            bool _3450_onOwned;
            bool _3451_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3452_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1566;
            bool _out1567;
            bool _out1568;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1569;
            DCOMP.COMP.GenExpr(_3448_on, selfIdent, @params, false, out _out1566, out _out1567, out _out1568, out _out1569);
            _3449_onString = _out1566;
            _3450_onOwned = _out1567;
            _3451_onErased = _out1568;
            _3452_recIdents = _out1569;
            if ((_3445_isDatatype) || (_3446_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3449_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3447_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3446_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3449_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3447_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3452_recIdents;
          }
        } else if (_source108.is_Index) {
          DAST._IExpression _3453___mcc_h130 = _source108.dtor_expr;
          DAST._ICollKind _3454___mcc_h131 = _source108.dtor_collKind;
          Dafny.ISequence<DAST._IExpression> _3455___mcc_h132 = _source108.dtor_indices;
          bool _3456_isDatatype = _3258___mcc_h45;
          bool _3457_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3458_field = _3256___mcc_h43;
          DAST._IExpression _3459_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3460_onString;
            bool _3461_onOwned;
            bool _3462_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3463_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1570;
            bool _out1571;
            bool _out1572;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1573;
            DCOMP.COMP.GenExpr(_3459_on, selfIdent, @params, false, out _out1570, out _out1571, out _out1572, out _out1573);
            _3460_onString = _out1570;
            _3461_onOwned = _out1571;
            _3462_onErased = _out1572;
            _3463_recIdents = _out1573;
            if ((_3456_isDatatype) || (_3457_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3460_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3458_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3457_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3460_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3458_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3463_recIdents;
          }
        } else if (_source108.is_IndexRange) {
          DAST._IExpression _3464___mcc_h136 = _source108.dtor_expr;
          bool _3465___mcc_h137 = _source108.dtor_isArray;
          Std.Wrappers._IOption<DAST._IExpression> _3466___mcc_h138 = _source108.dtor_low;
          Std.Wrappers._IOption<DAST._IExpression> _3467___mcc_h139 = _source108.dtor_high;
          bool _3468_isDatatype = _3258___mcc_h45;
          bool _3469_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3470_field = _3256___mcc_h43;
          DAST._IExpression _3471_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3472_onString;
            bool _3473_onOwned;
            bool _3474_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3475_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1574;
            bool _out1575;
            bool _out1576;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1577;
            DCOMP.COMP.GenExpr(_3471_on, selfIdent, @params, false, out _out1574, out _out1575, out _out1576, out _out1577);
            _3472_onString = _out1574;
            _3473_onOwned = _out1575;
            _3474_onErased = _out1576;
            _3475_recIdents = _out1577;
            if ((_3468_isDatatype) || (_3469_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3472_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3470_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3469_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3472_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3470_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3475_recIdents;
          }
        } else if (_source108.is_TupleSelect) {
          DAST._IExpression _3476___mcc_h144 = _source108.dtor_expr;
          BigInteger _3477___mcc_h145 = _source108.dtor_index;
          bool _3478_isDatatype = _3258___mcc_h45;
          bool _3479_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3480_field = _3256___mcc_h43;
          DAST._IExpression _3481_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3482_onString;
            bool _3483_onOwned;
            bool _3484_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3485_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1578;
            bool _out1579;
            bool _out1580;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1581;
            DCOMP.COMP.GenExpr(_3481_on, selfIdent, @params, false, out _out1578, out _out1579, out _out1580, out _out1581);
            _3482_onString = _out1578;
            _3483_onOwned = _out1579;
            _3484_onErased = _out1580;
            _3485_recIdents = _out1581;
            if ((_3478_isDatatype) || (_3479_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3482_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3480_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3479_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3482_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3480_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3485_recIdents;
          }
        } else if (_source108.is_Call) {
          DAST._IExpression _3486___mcc_h148 = _source108.dtor_on;
          Dafny.ISequence<Dafny.Rune> _3487___mcc_h149 = _source108.dtor_name;
          Dafny.ISequence<DAST._IType> _3488___mcc_h150 = _source108.dtor_typeArgs;
          Dafny.ISequence<DAST._IExpression> _3489___mcc_h151 = _source108.dtor_args;
          bool _3490_isDatatype = _3258___mcc_h45;
          bool _3491_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3492_field = _3256___mcc_h43;
          DAST._IExpression _3493_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3494_onString;
            bool _3495_onOwned;
            bool _3496_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3497_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1582;
            bool _out1583;
            bool _out1584;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1585;
            DCOMP.COMP.GenExpr(_3493_on, selfIdent, @params, false, out _out1582, out _out1583, out _out1584, out _out1585);
            _3494_onString = _out1582;
            _3495_onOwned = _out1583;
            _3496_onErased = _out1584;
            _3497_recIdents = _out1585;
            if ((_3490_isDatatype) || (_3491_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3494_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3492_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3491_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3494_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3492_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3497_recIdents;
          }
        } else if (_source108.is_Lambda) {
          Dafny.ISequence<DAST._IFormal> _3498___mcc_h156 = _source108.dtor_params;
          DAST._IType _3499___mcc_h157 = _source108.dtor_retType;
          Dafny.ISequence<DAST._IStatement> _3500___mcc_h158 = _source108.dtor_body;
          bool _3501_isDatatype = _3258___mcc_h45;
          bool _3502_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3503_field = _3256___mcc_h43;
          DAST._IExpression _3504_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3505_onString;
            bool _3506_onOwned;
            bool _3507_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3508_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1586;
            bool _out1587;
            bool _out1588;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1589;
            DCOMP.COMP.GenExpr(_3504_on, selfIdent, @params, false, out _out1586, out _out1587, out _out1588, out _out1589);
            _3505_onString = _out1586;
            _3506_onOwned = _out1587;
            _3507_onErased = _out1588;
            _3508_recIdents = _out1589;
            if ((_3501_isDatatype) || (_3502_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3505_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3503_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3502_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3505_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3503_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3508_recIdents;
          }
        } else if (_source108.is_BetaRedex) {
          Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3509___mcc_h162 = _source108.dtor_values;
          DAST._IType _3510___mcc_h163 = _source108.dtor_retType;
          DAST._IExpression _3511___mcc_h164 = _source108.dtor_expr;
          bool _3512_isDatatype = _3258___mcc_h45;
          bool _3513_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3514_field = _3256___mcc_h43;
          DAST._IExpression _3515_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3516_onString;
            bool _3517_onOwned;
            bool _3518_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3519_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1590;
            bool _out1591;
            bool _out1592;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1593;
            DCOMP.COMP.GenExpr(_3515_on, selfIdent, @params, false, out _out1590, out _out1591, out _out1592, out _out1593);
            _3516_onString = _out1590;
            _3517_onOwned = _out1591;
            _3518_onErased = _out1592;
            _3519_recIdents = _out1593;
            if ((_3512_isDatatype) || (_3513_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3516_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3514_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3513_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3516_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3514_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3519_recIdents;
          }
        } else if (_source108.is_IIFE) {
          Dafny.ISequence<Dafny.Rune> _3520___mcc_h168 = _source108.dtor_name;
          DAST._IType _3521___mcc_h169 = _source108.dtor_typ;
          DAST._IExpression _3522___mcc_h170 = _source108.dtor_value;
          DAST._IExpression _3523___mcc_h171 = _source108.dtor_iifeBody;
          bool _3524_isDatatype = _3258___mcc_h45;
          bool _3525_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3526_field = _3256___mcc_h43;
          DAST._IExpression _3527_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3528_onString;
            bool _3529_onOwned;
            bool _3530_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3531_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1594;
            bool _out1595;
            bool _out1596;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1597;
            DCOMP.COMP.GenExpr(_3527_on, selfIdent, @params, false, out _out1594, out _out1595, out _out1596, out _out1597);
            _3528_onString = _out1594;
            _3529_onOwned = _out1595;
            _3530_onErased = _out1596;
            _3531_recIdents = _out1597;
            if ((_3524_isDatatype) || (_3525_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3528_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3526_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3525_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3528_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3526_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3531_recIdents;
          }
        } else if (_source108.is_Apply) {
          DAST._IExpression _3532___mcc_h176 = _source108.dtor_expr;
          Dafny.ISequence<DAST._IExpression> _3533___mcc_h177 = _source108.dtor_args;
          bool _3534_isDatatype = _3258___mcc_h45;
          bool _3535_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3536_field = _3256___mcc_h43;
          DAST._IExpression _3537_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3538_onString;
            bool _3539_onOwned;
            bool _3540_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3541_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1598;
            bool _out1599;
            bool _out1600;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1601;
            DCOMP.COMP.GenExpr(_3537_on, selfIdent, @params, false, out _out1598, out _out1599, out _out1600, out _out1601);
            _3538_onString = _out1598;
            _3539_onOwned = _out1599;
            _3540_onErased = _out1600;
            _3541_recIdents = _out1601;
            if ((_3534_isDatatype) || (_3535_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3538_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3536_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3535_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3538_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3536_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3541_recIdents;
          }
        } else if (_source108.is_TypeTest) {
          DAST._IExpression _3542___mcc_h180 = _source108.dtor_on;
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3543___mcc_h181 = _source108.dtor_dType;
          Dafny.ISequence<Dafny.Rune> _3544___mcc_h182 = _source108.dtor_variant;
          bool _3545_isDatatype = _3258___mcc_h45;
          bool _3546_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3547_field = _3256___mcc_h43;
          DAST._IExpression _3548_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3549_onString;
            bool _3550_onOwned;
            bool _3551_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3552_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1602;
            bool _out1603;
            bool _out1604;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1605;
            DCOMP.COMP.GenExpr(_3548_on, selfIdent, @params, false, out _out1602, out _out1603, out _out1604, out _out1605);
            _3549_onString = _out1602;
            _3550_onOwned = _out1603;
            _3551_onErased = _out1604;
            _3552_recIdents = _out1605;
            if ((_3545_isDatatype) || (_3546_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3549_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3547_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3546_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3549_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3547_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3552_recIdents;
          }
        } else if (_source108.is_InitializationValue) {
          DAST._IType _3553___mcc_h186 = _source108.dtor_typ;
          bool _3554_isDatatype = _3258___mcc_h45;
          bool _3555_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3556_field = _3256___mcc_h43;
          DAST._IExpression _3557_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3558_onString;
            bool _3559_onOwned;
            bool _3560_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3561_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1606;
            bool _out1607;
            bool _out1608;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1609;
            DCOMP.COMP.GenExpr(_3557_on, selfIdent, @params, false, out _out1606, out _out1607, out _out1608, out _out1609);
            _3558_onString = _out1606;
            _3559_onOwned = _out1607;
            _3560_onErased = _out1608;
            _3561_recIdents = _out1609;
            if ((_3554_isDatatype) || (_3555_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3558_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3556_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3555_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3558_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3556_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3561_recIdents;
          }
        } else if (_source108.is_BoolBoundedPool) {
          bool _3562_isDatatype = _3258___mcc_h45;
          bool _3563_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3564_field = _3256___mcc_h43;
          DAST._IExpression _3565_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3566_onString;
            bool _3567_onOwned;
            bool _3568_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3569_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1610;
            bool _out1611;
            bool _out1612;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1613;
            DCOMP.COMP.GenExpr(_3565_on, selfIdent, @params, false, out _out1610, out _out1611, out _out1612, out _out1613);
            _3566_onString = _out1610;
            _3567_onOwned = _out1611;
            _3568_onErased = _out1612;
            _3569_recIdents = _out1613;
            if ((_3562_isDatatype) || (_3563_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3566_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3564_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3563_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3566_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3564_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3569_recIdents;
          }
        } else if (_source108.is_SetBoundedPool) {
          DAST._IExpression _3570___mcc_h188 = _source108.dtor_of;
          bool _3571_isDatatype = _3258___mcc_h45;
          bool _3572_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3573_field = _3256___mcc_h43;
          DAST._IExpression _3574_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3575_onString;
            bool _3576_onOwned;
            bool _3577_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3578_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1614;
            bool _out1615;
            bool _out1616;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1617;
            DCOMP.COMP.GenExpr(_3574_on, selfIdent, @params, false, out _out1614, out _out1615, out _out1616, out _out1617);
            _3575_onString = _out1614;
            _3576_onOwned = _out1615;
            _3577_onErased = _out1616;
            _3578_recIdents = _out1617;
            if ((_3571_isDatatype) || (_3572_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3575_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3573_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3572_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3575_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3573_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3578_recIdents;
          }
        } else if (_source108.is_SeqBoundedPool) {
          DAST._IExpression _3579___mcc_h190 = _source108.dtor_of;
          bool _3580___mcc_h191 = _source108.dtor_includeDuplicates;
          bool _3581_isDatatype = _3258___mcc_h45;
          bool _3582_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3583_field = _3256___mcc_h43;
          DAST._IExpression _3584_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3585_onString;
            bool _3586_onOwned;
            bool _3587_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3588_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1618;
            bool _out1619;
            bool _out1620;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1621;
            DCOMP.COMP.GenExpr(_3584_on, selfIdent, @params, false, out _out1618, out _out1619, out _out1620, out _out1621);
            _3585_onString = _out1618;
            _3586_onOwned = _out1619;
            _3587_onErased = _out1620;
            _3588_recIdents = _out1621;
            if ((_3581_isDatatype) || (_3582_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3585_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3583_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3582_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3585_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3583_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3588_recIdents;
          }
        } else {
          DAST._IExpression _3589___mcc_h194 = _source108.dtor_lo;
          DAST._IExpression _3590___mcc_h195 = _source108.dtor_hi;
          bool _3591_isDatatype = _3258___mcc_h45;
          bool _3592_isConstant = _3257___mcc_h44;
          Dafny.ISequence<Dafny.Rune> _3593_field = _3256___mcc_h43;
          DAST._IExpression _3594_on = _3255___mcc_h42;
          {
            Dafny.ISequence<Dafny.Rune> _3595_onString;
            bool _3596_onOwned;
            bool _3597_onErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3598_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1622;
            bool _out1623;
            bool _out1624;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1625;
            DCOMP.COMP.GenExpr(_3594_on, selfIdent, @params, false, out _out1622, out _out1623, out _out1624, out _out1625);
            _3595_onString = _out1622;
            _3596_onOwned = _out1623;
            _3597_onErased = _out1624;
            _3598_recIdents = _out1625;
            if ((_3591_isDatatype) || (_3592_isConstant)) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3595_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3593_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("()"));
              if (_3592_isConstant) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
              }
              if (mustOwn) {
                s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
                isOwned = true;
              } else {
                isOwned = false;
              }
            } else {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::ops::Deref::deref(&(("), _3595_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".")), DCOMP.__default.escapeIdent(_3593_field)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".borrow()))"));
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
              isOwned = true;
            }
            isErased = false;
            readIdents = _3598_recIdents;
          }
        }
      } else if (_source48.is_SelectFn) {
        DAST._IExpression _3599___mcc_h198 = _source48.dtor_expr;
        Dafny.ISequence<Dafny.Rune> _3600___mcc_h199 = _source48.dtor_field;
        bool _3601___mcc_h200 = _source48.dtor_onDatatype;
        bool _3602___mcc_h201 = _source48.dtor_isStatic;
        BigInteger _3603___mcc_h202 = _source48.dtor_arity;
        BigInteger _3604_arity = _3603___mcc_h202;
        bool _3605_isStatic = _3602___mcc_h201;
        bool _3606_isDatatype = _3601___mcc_h200;
        Dafny.ISequence<Dafny.Rune> _3607_field = _3600___mcc_h199;
        DAST._IExpression _3608_on = _3599___mcc_h198;
        {
          Dafny.ISequence<Dafny.Rune> _3609_onString;
          bool _3610_onOwned;
          bool _3611___v82;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3612_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1626;
          bool _out1627;
          bool _out1628;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1629;
          DCOMP.COMP.GenExpr(_3608_on, selfIdent, @params, false, out _out1626, out _out1627, out _out1628, out _out1629);
          _3609_onString = _out1626;
          _3610_onOwned = _out1627;
          _3611___v82 = _out1628;
          _3612_recIdents = _out1629;
          if (_3605_isStatic) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3609_onString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3607_field));
          } else {
            s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let callTarget = (")), _3609_onString), ((_3610_onOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()")))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            Dafny.ISequence<Dafny.Rune> _3613_args;
            _3613_args = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            BigInteger _3614_i;
            _3614_i = BigInteger.Zero;
            while ((_3614_i) < (_3604_arity)) {
              if ((_3614_i).Sign == 1) {
                _3613_args = Dafny.Sequence<Dafny.Rune>.Concat(_3613_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              _3613_args = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3613_args, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("arg")), Std.Strings.__default.OfNat(_3614_i));
              _3614_i = (_3614_i) + (BigInteger.One);
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("move |")), _3613_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| {\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("callTarget.")), _3607_field), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3613_args), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}\n"));
            s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("}"));
          }
          Dafny.ISequence<Dafny.Rune> _3615_typeShape;
          _3615_typeShape = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("dyn ::std::ops::Fn(");
          BigInteger _3616_i;
          _3616_i = BigInteger.Zero;
          while ((_3616_i) < (_3604_arity)) {
            if ((_3616_i).Sign == 1) {
              _3615_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3615_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            _3615_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3615_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&_"));
            _3616_i = (_3616_i) + (BigInteger.One);
          }
          _3615_typeShape = Dafny.Sequence<Dafny.Rune>.Concat(_3615_typeShape, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> _"));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper(::std::rc::Rc::new("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") as ::std::rc::Rc<")), _3615_typeShape), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">)"));
          isOwned = true;
          isErased = false;
          readIdents = _3612_recIdents;
        }
      } else if (_source48.is_Index) {
        DAST._IExpression _3617___mcc_h203 = _source48.dtor_expr;
        DAST._ICollKind _3618___mcc_h204 = _source48.dtor_collKind;
        Dafny.ISequence<DAST._IExpression> _3619___mcc_h205 = _source48.dtor_indices;
        Dafny.ISequence<DAST._IExpression> _3620_indices = _3619___mcc_h205;
        DAST._ICollKind _3621_collKind = _3618___mcc_h204;
        DAST._IExpression _3622_on = _3617___mcc_h203;
        {
          Dafny.ISequence<Dafny.Rune> _3623_onString;
          bool _3624_onOwned;
          bool _3625_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3626_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1630;
          bool _out1631;
          bool _out1632;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1633;
          DCOMP.COMP.GenExpr(_3622_on, selfIdent, @params, false, out _out1630, out _out1631, out _out1632, out _out1633);
          _3623_onString = _out1630;
          _3624_onOwned = _out1631;
          _3625_onErased = _out1632;
          _3626_recIdents = _out1633;
          readIdents = _3626_recIdents;
          s = _3623_onString;
          BigInteger _3627_i;
          _3627_i = BigInteger.Zero;
          while ((_3627_i) < (new BigInteger((_3620_indices).Count))) {
            if (object.Equals(_3621_collKind, DAST.CollKind.create_Array())) {
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
            }
            if (object.Equals(_3621_collKind, DAST.CollKind.create_Map())) {
              Dafny.ISequence<Dafny.Rune> _3628_idx;
              bool _3629_idxOwned;
              bool _3630_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3631_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1634;
              bool _out1635;
              bool _out1636;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1637;
              DCOMP.COMP.GenExpr((_3620_indices).Select(_3627_i), selfIdent, @params, false, out _out1634, out _out1635, out _out1636, out _out1637);
              _3628_idx = _out1634;
              _3629_idxOwned = _out1635;
              _3630_idxErased = _out1636;
              _3631_recIdentsIdx = _out1637;
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[")), ((_3629_idxOwned) ? (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")) : (Dafny.Sequence<Dafny.Rune>.UnicodeFromString("")))), _3628_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3631_recIdentsIdx);
            } else {
              Dafny.ISequence<Dafny.Rune> _3632_idx;
              bool _3633___v83;
              bool _3634_idxErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3635_recIdentsIdx;
              Dafny.ISequence<Dafny.Rune> _out1638;
              bool _out1639;
              bool _out1640;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1641;
              DCOMP.COMP.GenExpr((_3620_indices).Select(_3627_i), selfIdent, @params, true, out _out1638, out _out1639, out _out1640, out _out1641);
              _3632_idx = _out1638;
              _3633___v83 = _out1639;
              _3634_idxErased = _out1640;
              _3635_recIdentsIdx = _out1641;
              if (!(_3634_idxErased)) {
                _3632_idx = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3632_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")[<usize as ::dafny_runtime::NumCast>::from(")), _3632_idx), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()]"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3635_recIdentsIdx);
            }
            _3627_i = (_3627_i) + (BigInteger.One);
          }
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(&"), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            isOwned = false;
          }
          isErased = _3625_onErased;
        }
      } else if (_source48.is_IndexRange) {
        DAST._IExpression _3636___mcc_h206 = _source48.dtor_expr;
        bool _3637___mcc_h207 = _source48.dtor_isArray;
        Std.Wrappers._IOption<DAST._IExpression> _3638___mcc_h208 = _source48.dtor_low;
        Std.Wrappers._IOption<DAST._IExpression> _3639___mcc_h209 = _source48.dtor_high;
        Std.Wrappers._IOption<DAST._IExpression> _3640_high = _3639___mcc_h209;
        Std.Wrappers._IOption<DAST._IExpression> _3641_low = _3638___mcc_h208;
        bool _3642_isArray = _3637___mcc_h207;
        DAST._IExpression _3643_on = _3636___mcc_h206;
        {
          Dafny.ISequence<Dafny.Rune> _3644_onString;
          bool _3645_onOwned;
          bool _3646_onErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3647_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1642;
          bool _out1643;
          bool _out1644;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1645;
          DCOMP.COMP.GenExpr(_3643_on, selfIdent, @params, false, out _out1642, out _out1643, out _out1644, out _out1645);
          _3644_onString = _out1642;
          _3645_onOwned = _out1643;
          _3646_onErased = _out1644;
          _3647_recIdents = _out1645;
          readIdents = _3647_recIdents;
          s = _3644_onString;
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3648_lowString;
          _3648_lowString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source109 = _3641_low;
          if (_source109.is_None) {
          } else {
            DAST._IExpression _3649___mcc_h1195 = _source109.dtor_value;
            DAST._IExpression _3650_l = _3649___mcc_h1195;
            {
              Dafny.ISequence<Dafny.Rune> _3651_lString;
              bool _3652___v84;
              bool _3653_lErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3654_recIdentsL;
              Dafny.ISequence<Dafny.Rune> _out1646;
              bool _out1647;
              bool _out1648;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1649;
              DCOMP.COMP.GenExpr(_3650_l, selfIdent, @params, true, out _out1646, out _out1647, out _out1648, out _out1649);
              _3651_lString = _out1646;
              _3652___v84 = _out1647;
              _3653_lErased = _out1648;
              _3654_recIdentsL = _out1649;
              if (!(_3653_lErased)) {
                _3651_lString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3651_lString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3648_lowString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3651_lString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3654_recIdentsL);
            }
          }
          Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>> _3655_highString;
          _3655_highString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None();
          Std.Wrappers._IOption<DAST._IExpression> _source110 = _3640_high;
          if (_source110.is_None) {
          } else {
            DAST._IExpression _3656___mcc_h1196 = _source110.dtor_value;
            DAST._IExpression _3657_h = _3656___mcc_h1196;
            {
              Dafny.ISequence<Dafny.Rune> _3658_hString;
              bool _3659___v85;
              bool _3660_hErased;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3661_recIdentsH;
              Dafny.ISequence<Dafny.Rune> _out1650;
              bool _out1651;
              bool _out1652;
              Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1653;
              DCOMP.COMP.GenExpr(_3657_h, selfIdent, @params, true, out _out1650, out _out1651, out _out1652, out _out1653);
              _3658_hString = _out1650;
              _3659___v85 = _out1651;
              _3660_hErased = _out1652;
              _3661_recIdentsH = _out1653;
              if (!(_3660_hErased)) {
                _3658_hString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3658_hString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
              }
              _3655_highString = Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(_3658_hString);
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3661_recIdentsH);
            }
          }
          if (_3642_isArray) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").borrow()"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[")), ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source111) => {
            if (_source111.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              Dafny.ISequence<Dafny.Rune> _3662___mcc_h1197 = _source111.dtor_value;
              Dafny.ISequence<Dafny.Rune> _3663_l = _3662___mcc_h1197;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3663_l), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_3648_lowString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("..")), ((System.Func<Std.Wrappers._IOption<Dafny.ISequence<Dafny.Rune>>, Dafny.ISequence<Dafny.Rune>>)((_source112) => {
            if (_source112.is_None) {
              return Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
            } else {
              Dafny.ISequence<Dafny.Rune> _3664___mcc_h1198 = _source112.dtor_value;
              Dafny.ISequence<Dafny.Rune> _3665_h = _3664___mcc_h1198;
              return Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<usize as ::dafny_runtime::NumCast>::from("), _3665_h), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").unwrap()"));
            }
          }))(_3655_highString)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("]"));
          isErased = _3646_onErased;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".to_vec())"));
          isOwned = true;
        }
      } else if (_source48.is_TupleSelect) {
        DAST._IExpression _3666___mcc_h210 = _source48.dtor_expr;
        BigInteger _3667___mcc_h211 = _source48.dtor_index;
        BigInteger _3668_idx = _3667___mcc_h211;
        DAST._IExpression _3669_on = _3666___mcc_h210;
        {
          Dafny.ISequence<Dafny.Rune> _3670_onString;
          bool _3671___v86;
          bool _3672_tupErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3673_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1654;
          bool _out1655;
          bool _out1656;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1657;
          DCOMP.COMP.GenExpr(_3669_on, selfIdent, @params, false, out _out1654, out _out1655, out _out1656, out _out1657);
          _3670_onString = _out1654;
          _3671___v86 = _out1655;
          _3672_tupErased = _out1656;
          _3673_recIdents = _out1657;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3670_onString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), Std.Strings.__default.OfNat(_3668_idx));
          if (mustOwn) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone()"));
            isOwned = true;
          } else {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), s);
            isOwned = false;
          }
          isErased = _3672_tupErased;
          readIdents = _3673_recIdents;
        }
      } else if (_source48.is_Call) {
        DAST._IExpression _3674___mcc_h212 = _source48.dtor_on;
        Dafny.ISequence<Dafny.Rune> _3675___mcc_h213 = _source48.dtor_name;
        Dafny.ISequence<DAST._IType> _3676___mcc_h214 = _source48.dtor_typeArgs;
        Dafny.ISequence<DAST._IExpression> _3677___mcc_h215 = _source48.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3678_args = _3677___mcc_h215;
        Dafny.ISequence<DAST._IType> _3679_typeArgs = _3676___mcc_h214;
        Dafny.ISequence<Dafny.Rune> _3680_name = _3675___mcc_h213;
        DAST._IExpression _3681_on = _3674___mcc_h212;
        {
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3682_typeArgString;
          _3682_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          if ((new BigInteger((_3679_typeArgs).Count)) >= (BigInteger.One)) {
            BigInteger _3683_typeI;
            _3683_typeI = BigInteger.Zero;
            _3682_typeArgString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::<");
            while ((_3683_typeI) < (new BigInteger((_3679_typeArgs).Count))) {
              if ((_3683_typeI).Sign == 1) {
                _3682_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3682_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              }
              Dafny.ISequence<Dafny.Rune> _3684_typeString;
              Dafny.ISequence<Dafny.Rune> _out1658;
              _out1658 = DCOMP.COMP.GenType((_3679_typeArgs).Select(_3683_typeI), false, false);
              _3684_typeString = _out1658;
              _3682_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3682_typeArgString, _3684_typeString);
              _3683_typeI = (_3683_typeI) + (BigInteger.One);
            }
            _3682_typeArgString = Dafny.Sequence<Dafny.Rune>.Concat(_3682_typeArgString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">"));
          }
          Dafny.ISequence<Dafny.Rune> _3685_argString;
          _3685_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3686_i;
          _3686_i = BigInteger.Zero;
          while ((_3686_i) < (new BigInteger((_3678_args).Count))) {
            if ((_3686_i).Sign == 1) {
              _3685_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3685_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3687_argExpr;
            bool _3688_isOwned;
            bool _3689_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3690_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1659;
            bool _out1660;
            bool _out1661;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1662;
            DCOMP.COMP.GenExpr((_3678_args).Select(_3686_i), selfIdent, @params, false, out _out1659, out _out1660, out _out1661, out _out1662);
            _3687_argExpr = _out1659;
            _3688_isOwned = _out1660;
            _3689_argErased = _out1661;
            _3690_argIdents = _out1662;
            if (_3688_isOwned) {
              _3687_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&("), _3687_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            if (!(_3689_argErased)) {
              _3687_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase("), _3687_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            _3687_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::unerase("), _3687_argExpr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            _3685_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3685_argString, _3687_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3690_argIdents);
            _3686_i = (_3686_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3691_enclosingString;
          bool _3692___v87;
          bool _3693___v88;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3694_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1663;
          bool _out1664;
          bool _out1665;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1666;
          DCOMP.COMP.GenExpr(_3681_on, selfIdent, @params, false, out _out1663, out _out1664, out _out1665, out _out1666);
          _3691_enclosingString = _out1663;
          _3692___v87 = _out1664;
          _3693___v88 = _out1665;
          _3694_recIdents = _out1666;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3694_recIdents);
          DAST._IExpression _source113 = _3681_on;
          if (_source113.is_Literal) {
            DAST._ILiteral _3695___mcc_h1199 = _source113.dtor_Literal_a0;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Ident) {
            Dafny.ISequence<Dafny.Rune> _3696___mcc_h1201 = _source113.dtor_Ident_a0;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Companion) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3697___mcc_h1203 = _source113.dtor_Companion_a0;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3691_enclosingString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Tuple) {
            Dafny.ISequence<DAST._IExpression> _3698___mcc_h1205 = _source113.dtor_Tuple_a0;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_New) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3699___mcc_h1207 = _source113.dtor_path;
            Dafny.ISequence<DAST._IType> _3700___mcc_h1208 = _source113.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3701___mcc_h1209 = _source113.dtor_args;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_NewArray) {
            Dafny.ISequence<DAST._IExpression> _3702___mcc_h1213 = _source113.dtor_dims;
            DAST._IType _3703___mcc_h1214 = _source113.dtor_typ;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_DatatypeValue) {
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3704___mcc_h1217 = _source113.dtor_path;
            Dafny.ISequence<DAST._IType> _3705___mcc_h1218 = _source113.dtor_typeArgs;
            Dafny.ISequence<Dafny.Rune> _3706___mcc_h1219 = _source113.dtor_variant;
            bool _3707___mcc_h1220 = _source113.dtor_isCo;
            Dafny.ISequence<_System._ITuple2<Dafny.ISequence<Dafny.Rune>, DAST._IExpression>> _3708___mcc_h1221 = _source113.dtor_contents;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Convert) {
            DAST._IExpression _3709___mcc_h1227 = _source113.dtor_value;
            DAST._IType _3710___mcc_h1228 = _source113.dtor_from;
            DAST._IType _3711___mcc_h1229 = _source113.dtor_typ;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_SeqConstruct) {
            DAST._IExpression _3712___mcc_h1233 = _source113.dtor_length;
            DAST._IExpression _3713___mcc_h1234 = _source113.dtor_elem;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_SeqValue) {
            Dafny.ISequence<DAST._IExpression> _3714___mcc_h1237 = _source113.dtor_elements;
            DAST._IType _3715___mcc_h1238 = _source113.dtor_typ;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_SetValue) {
            Dafny.ISequence<DAST._IExpression> _3716___mcc_h1241 = _source113.dtor_elements;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_MapValue) {
            Dafny.ISequence<_System._ITuple2<DAST._IExpression, DAST._IExpression>> _3717___mcc_h1243 = _source113.dtor_mapElems;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_This) {
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Ite) {
            DAST._IExpression _3718___mcc_h1245 = _source113.dtor_cond;
            DAST._IExpression _3719___mcc_h1246 = _source113.dtor_thn;
            DAST._IExpression _3720___mcc_h1247 = _source113.dtor_els;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_UnOp) {
            DAST._IUnaryOp _3721___mcc_h1251 = _source113.dtor_unOp;
            DAST._IExpression _3722___mcc_h1252 = _source113.dtor_expr;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_BinOp) {
            DAST._IBinOp _3723___mcc_h1255 = _source113.dtor_op;
            DAST._IExpression _3724___mcc_h1256 = _source113.dtor_left;
            DAST._IExpression _3725___mcc_h1257 = _source113.dtor_right;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_ArrayLen) {
            DAST._IExpression _3726___mcc_h1261 = _source113.dtor_expr;
            BigInteger _3727___mcc_h1262 = _source113.dtor_dim;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Select) {
            DAST._IExpression _3728___mcc_h1265 = _source113.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3729___mcc_h1266 = _source113.dtor_field;
            bool _3730___mcc_h1267 = _source113.dtor_isConstant;
            bool _3731___mcc_h1268 = _source113.dtor_onDatatype;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_SelectFn) {
            DAST._IExpression _3732___mcc_h1273 = _source113.dtor_expr;
            Dafny.ISequence<Dafny.Rune> _3733___mcc_h1274 = _source113.dtor_field;
            bool _3734___mcc_h1275 = _source113.dtor_onDatatype;
            bool _3735___mcc_h1276 = _source113.dtor_isStatic;
            BigInteger _3736___mcc_h1277 = _source113.dtor_arity;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Index) {
            DAST._IExpression _3737___mcc_h1283 = _source113.dtor_expr;
            DAST._ICollKind _3738___mcc_h1284 = _source113.dtor_collKind;
            Dafny.ISequence<DAST._IExpression> _3739___mcc_h1285 = _source113.dtor_indices;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_IndexRange) {
            DAST._IExpression _3740___mcc_h1289 = _source113.dtor_expr;
            bool _3741___mcc_h1290 = _source113.dtor_isArray;
            Std.Wrappers._IOption<DAST._IExpression> _3742___mcc_h1291 = _source113.dtor_low;
            Std.Wrappers._IOption<DAST._IExpression> _3743___mcc_h1292 = _source113.dtor_high;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_TupleSelect) {
            DAST._IExpression _3744___mcc_h1297 = _source113.dtor_expr;
            BigInteger _3745___mcc_h1298 = _source113.dtor_index;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Call) {
            DAST._IExpression _3746___mcc_h1301 = _source113.dtor_on;
            Dafny.ISequence<Dafny.Rune> _3747___mcc_h1302 = _source113.dtor_name;
            Dafny.ISequence<DAST._IType> _3748___mcc_h1303 = _source113.dtor_typeArgs;
            Dafny.ISequence<DAST._IExpression> _3749___mcc_h1304 = _source113.dtor_args;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Lambda) {
            Dafny.ISequence<DAST._IFormal> _3750___mcc_h1309 = _source113.dtor_params;
            DAST._IType _3751___mcc_h1310 = _source113.dtor_retType;
            Dafny.ISequence<DAST._IStatement> _3752___mcc_h1311 = _source113.dtor_body;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_BetaRedex) {
            Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3753___mcc_h1315 = _source113.dtor_values;
            DAST._IType _3754___mcc_h1316 = _source113.dtor_retType;
            DAST._IExpression _3755___mcc_h1317 = _source113.dtor_expr;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_IIFE) {
            Dafny.ISequence<Dafny.Rune> _3756___mcc_h1321 = _source113.dtor_name;
            DAST._IType _3757___mcc_h1322 = _source113.dtor_typ;
            DAST._IExpression _3758___mcc_h1323 = _source113.dtor_value;
            DAST._IExpression _3759___mcc_h1324 = _source113.dtor_iifeBody;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_Apply) {
            DAST._IExpression _3760___mcc_h1329 = _source113.dtor_expr;
            Dafny.ISequence<DAST._IExpression> _3761___mcc_h1330 = _source113.dtor_args;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_TypeTest) {
            DAST._IExpression _3762___mcc_h1333 = _source113.dtor_on;
            Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3763___mcc_h1334 = _source113.dtor_dType;
            Dafny.ISequence<Dafny.Rune> _3764___mcc_h1335 = _source113.dtor_variant;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_InitializationValue) {
            DAST._IType _3765___mcc_h1339 = _source113.dtor_typ;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_BoolBoundedPool) {
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_SetBoundedPool) {
            DAST._IExpression _3766___mcc_h1341 = _source113.dtor_of;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else if (_source113.is_SeqBoundedPool) {
            DAST._IExpression _3767___mcc_h1343 = _source113.dtor_of;
            bool _3768___mcc_h1344 = _source113.dtor_includeDuplicates;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          } else {
            DAST._IExpression _3769___mcc_h1347 = _source113.dtor_lo;
            DAST._IExpression _3770___mcc_h1348 = _source113.dtor_hi;
            {
              _3691_enclosingString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3691_enclosingString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").")), DCOMP.__default.escapeIdent((_3680_name)));
            }
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3691_enclosingString, _3682_typeArgString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3685_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_Lambda) {
        Dafny.ISequence<DAST._IFormal> _3771___mcc_h216 = _source48.dtor_params;
        DAST._IType _3772___mcc_h217 = _source48.dtor_retType;
        Dafny.ISequence<DAST._IStatement> _3773___mcc_h218 = _source48.dtor_body;
        Dafny.ISequence<DAST._IStatement> _3774_body = _3773___mcc_h218;
        DAST._IType _3775_retType = _3772___mcc_h217;
        Dafny.ISequence<DAST._IFormal> _3776_params = _3771___mcc_h216;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3777_paramNames;
          _3777_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3778_i;
          _3778_i = BigInteger.Zero;
          while ((_3778_i) < (new BigInteger((_3776_params).Count))) {
            _3777_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3777_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements(((_3776_params).Select(_3778_i)).dtor_name));
            _3778_i = (_3778_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3779_recursiveGen;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3780_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1667;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1668;
          DCOMP.COMP.GenStmts(_3774_body, ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) ? (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_Some(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this"))) : (Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())), _3777_paramNames, true, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""), out _out1667, out _out1668);
          _3779_recursiveGen = _out1667;
          _3780_recIdents = _out1668;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISequence<Dafny.Rune> _3781_allReadCloned;
          _3781_allReadCloned = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          while (!(_3780_recIdents).Equals(Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements())) {
            Dafny.ISequence<Dafny.Rune> _3782_next;
            foreach (Dafny.ISequence<Dafny.Rune> _assign_such_that_3 in (_3780_recIdents).Elements) {
              _3782_next = (Dafny.ISequence<Dafny.Rune>)_assign_such_that_3;
              if ((_3780_recIdents).Contains(_3782_next)) {
                goto after__ASSIGN_SUCH_THAT_3;
              }
            }
            throw new System.Exception("assign-such-that search produced no value (line 2527)");
          after__ASSIGN_SUCH_THAT_3:;
            if ((!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) && ((_3782_next).Equals(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("_this")))) {
              if (!object.Equals(selfIdent, Std.Wrappers.Option<Dafny.ISequence<Dafny.Rune>>.create_None())) {
                _3781_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(_3781_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let _this = self.clone();\n"));
              }
            } else if (!((_3777_paramNames).Contains(_3782_next))) {
              _3781_allReadCloned = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3781_allReadCloned, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent(_3782_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), DCOMP.__default.escapeIdent(_3782_next)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".clone();\n"));
              readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3782_next));
            }
            _3780_recIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3780_recIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements(_3782_next));
          }
          Dafny.ISequence<Dafny.Rune> _3783_paramsString;
          _3783_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          Dafny.ISequence<Dafny.Rune> _3784_paramTypes;
          _3784_paramTypes = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3778_i = BigInteger.Zero;
          while ((_3778_i) < (new BigInteger((_3776_params).Count))) {
            if ((_3778_i).Sign == 1) {
              _3783_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3783_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
              _3784_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(_3784_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3785_typStr;
            Dafny.ISequence<Dafny.Rune> _out1669;
            _out1669 = DCOMP.COMP.GenType(((_3776_params).Select(_3778_i)).dtor_typ, false, true);
            _3785_typStr = _out1669;
            _3783_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3783_paramsString, DCOMP.__default.escapeIdent(((_3776_params).Select(_3778_i)).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": &")), _3785_typStr);
            _3784_paramTypes = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(_3784_paramTypes, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&")), _3785_typStr);
            _3778_i = (_3778_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3786_retTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1670;
          _out1670 = DCOMP.COMP.GenType(_3775_retType, false, true);
          _3786_retTypeGen = _out1670;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::FunctionWrapper::<::std::rc::Rc<dyn ::std::ops::Fn("), _3784_paramTypes), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(") -> ")), _3786_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(">>({\n")), _3781_allReadCloned), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::std::rc::Rc::new(move |")), _3783_paramsString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("| -> ")), _3786_retTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" {\n")), _3779_recursiveGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n})})"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_BetaRedex) {
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3787___mcc_h219 = _source48.dtor_values;
        DAST._IType _3788___mcc_h220 = _source48.dtor_retType;
        DAST._IExpression _3789___mcc_h221 = _source48.dtor_expr;
        DAST._IExpression _3790_expr = _3789___mcc_h221;
        DAST._IType _3791_retType = _3788___mcc_h220;
        Dafny.ISequence<_System._ITuple2<DAST._IFormal, DAST._IExpression>> _3792_values = _3787___mcc_h219;
        {
          Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3793_paramNames;
          _3793_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements();
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3794_paramNamesSet;
          _3794_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          BigInteger _3795_i;
          _3795_i = BigInteger.Zero;
          while ((_3795_i) < (new BigInteger((_3792_values).Count))) {
            _3793_paramNames = Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.Concat(_3793_paramNames, Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3792_values).Select(_3795_i)).dtor__0).dtor_name));
            _3794_paramNamesSet = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3794_paramNamesSet, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((((_3792_values).Select(_3795_i)).dtor__0).dtor_name));
            _3795_i = (_3795_i) + (BigInteger.One);
          }
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\n");
          Dafny.ISequence<Dafny.Rune> _3796_paramsString;
          _3796_paramsString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          _3795_i = BigInteger.Zero;
          while ((_3795_i) < (new BigInteger((_3792_values).Count))) {
            if ((_3795_i).Sign == 1) {
              _3796_paramsString = Dafny.Sequence<Dafny.Rune>.Concat(_3796_paramsString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3797_typStr;
            Dafny.ISequence<Dafny.Rune> _out1671;
            _out1671 = DCOMP.COMP.GenType((((_3792_values).Select(_3795_i)).dtor__0).dtor_typ, false, true);
            _3797_typStr = _out1671;
            Dafny.ISequence<Dafny.Rune> _3798_valueGen;
            bool _3799___v91;
            bool _3800_valueErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3801_recIdents;
            Dafny.ISequence<Dafny.Rune> _out1672;
            bool _out1673;
            bool _out1674;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1675;
            DCOMP.COMP.GenExpr(((_3792_values).Select(_3795_i)).dtor__1, selfIdent, @params, true, out _out1672, out _out1673, out _out1674, out _out1675);
            _3798_valueGen = _out1672;
            _3799___v91 = _out1673;
            _3800_valueErased = _out1674;
            _3801_recIdents = _out1675;
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("let ")), DCOMP.__default.escapeIdent((((_3792_values).Select(_3795_i)).dtor__0).dtor_name)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3797_typStr), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = "));
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3801_recIdents);
            if (_3800_valueErased) {
              _3798_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3798_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
            }
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3798_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n"));
            _3795_i = (_3795_i) + (BigInteger.One);
          }
          Dafny.ISequence<Dafny.Rune> _3802_recGen;
          bool _3803_recOwned;
          bool _3804_recErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3805_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1676;
          bool _out1677;
          bool _out1678;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1679;
          DCOMP.COMP.GenExpr(_3790_expr, selfIdent, _3793_paramNames, mustOwn, out _out1676, out _out1677, out _out1678, out _out1679);
          _3802_recGen = _out1676;
          _3803_recOwned = _out1677;
          _3804_recErased = _out1678;
          _3805_recIdents = _out1679;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3805_recIdents, _3794_paramNamesSet);
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(s, _3802_recGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = _3803_recOwned;
          isErased = _3804_recErased;
        }
      } else if (_source48.is_IIFE) {
        Dafny.ISequence<Dafny.Rune> _3806___mcc_h222 = _source48.dtor_name;
        DAST._IType _3807___mcc_h223 = _source48.dtor_typ;
        DAST._IExpression _3808___mcc_h224 = _source48.dtor_value;
        DAST._IExpression _3809___mcc_h225 = _source48.dtor_iifeBody;
        DAST._IExpression _3810_iifeBody = _3809___mcc_h225;
        DAST._IExpression _3811_value = _3808___mcc_h224;
        DAST._IType _3812_tpe = _3807___mcc_h223;
        Dafny.ISequence<Dafny.Rune> _3813_name = _3806___mcc_h222;
        {
          Dafny.ISequence<Dafny.Rune> _3814_valueGen;
          bool _3815___v92;
          bool _3816_valueErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3817_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1680;
          bool _out1681;
          bool _out1682;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1683;
          DCOMP.COMP.GenExpr(_3811_value, selfIdent, @params, true, out _out1680, out _out1681, out _out1682, out _out1683);
          _3814_valueGen = _out1680;
          _3815___v92 = _out1681;
          _3816_valueErased = _out1682;
          _3817_recIdents = _out1683;
          if (_3816_valueErased) {
            _3814_valueGen = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyUnerasable::<_>::unerase_owned"), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3814_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          readIdents = _3817_recIdents;
          Dafny.ISequence<Dafny.Rune> _3818_valueTypeGen;
          Dafny.ISequence<Dafny.Rune> _out1684;
          _out1684 = DCOMP.COMP.GenType(_3812_tpe, false, true);
          _3818_valueTypeGen = _out1684;
          Dafny.ISequence<Dafny.Rune> _3819_bodyGen;
          bool _3820___v93;
          bool _3821_bodyErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3822_bodyIdents;
          Dafny.ISequence<Dafny.Rune> _out1685;
          bool _out1686;
          bool _out1687;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1688;
          DCOMP.COMP.GenExpr(_3810_iifeBody, selfIdent, @params, true, out _out1685, out _out1686, out _out1687, out _out1688);
          _3819_bodyGen = _out1685;
          _3820___v93 = _out1686;
          _3821_bodyErased = _out1687;
          _3822_bodyIdents = _out1688;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Difference(_3822_bodyIdents, Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements((_3813_name))));
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{\nlet "), DCOMP.__default.escapeIdent((_3813_name))), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(": ")), _3818_valueTypeGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" = ")), _3814_valueGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(";\n")), _3819_bodyGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n}"));
          isOwned = true;
          isErased = _3821_bodyErased;
        }
      } else if (_source48.is_Apply) {
        DAST._IExpression _3823___mcc_h226 = _source48.dtor_expr;
        Dafny.ISequence<DAST._IExpression> _3824___mcc_h227 = _source48.dtor_args;
        Dafny.ISequence<DAST._IExpression> _3825_args = _3824___mcc_h227;
        DAST._IExpression _3826_func = _3823___mcc_h226;
        {
          Dafny.ISequence<Dafny.Rune> _3827_funcString;
          bool _3828___v94;
          bool _3829_funcErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3830_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1689;
          bool _out1690;
          bool _out1691;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1692;
          DCOMP.COMP.GenExpr(_3826_func, selfIdent, @params, false, out _out1689, out _out1690, out _out1691, out _out1692);
          _3827_funcString = _out1689;
          _3828___v94 = _out1690;
          _3829_funcErased = _out1691;
          _3830_recIdents = _out1692;
          readIdents = _3830_recIdents;
          Dafny.ISequence<Dafny.Rune> _3831_argString;
          _3831_argString = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("");
          BigInteger _3832_i;
          _3832_i = BigInteger.Zero;
          while ((_3832_i) < (new BigInteger((_3825_args).Count))) {
            if ((_3832_i).Sign == 1) {
              _3831_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3831_argString, Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", "));
            }
            Dafny.ISequence<Dafny.Rune> _3833_argExpr;
            bool _3834_isOwned;
            bool _3835_argErased;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3836_argIdents;
            Dafny.ISequence<Dafny.Rune> _out1693;
            bool _out1694;
            bool _out1695;
            Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1696;
            DCOMP.COMP.GenExpr((_3825_args).Select(_3832_i), selfIdent, @params, false, out _out1693, out _out1694, out _out1695, out _out1696);
            _3833_argExpr = _out1693;
            _3834_isOwned = _out1694;
            _3835_argErased = _out1695;
            _3836_argIdents = _out1696;
            if (_3834_isOwned) {
              _3833_argExpr = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("&"), _3833_argExpr);
            }
            _3831_argString = Dafny.Sequence<Dafny.Rune>.Concat(_3831_argString, _3833_argExpr);
            readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(readIdents, _3836_argIdents);
            _3832_i = (_3832_i) + (BigInteger.One);
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(("), _3827_funcString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").0")), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("(")), _3831_argString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("))"));
          isOwned = true;
          isErased = false;
        }
      } else if (_source48.is_TypeTest) {
        DAST._IExpression _3837___mcc_h228 = _source48.dtor_on;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3838___mcc_h229 = _source48.dtor_dType;
        Dafny.ISequence<Dafny.Rune> _3839___mcc_h230 = _source48.dtor_variant;
        Dafny.ISequence<Dafny.Rune> _3840_variant = _3839___mcc_h230;
        Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> _3841_dType = _3838___mcc_h229;
        DAST._IExpression _3842_on = _3837___mcc_h228;
        {
          Dafny.ISequence<Dafny.Rune> _3843_exprGen;
          bool _3844___v95;
          bool _3845_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3846_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1697;
          bool _out1698;
          bool _out1699;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1700;
          DCOMP.COMP.GenExpr(_3842_on, selfIdent, @params, false, out _out1697, out _out1698, out _out1699, out _out1700);
          _3843_exprGen = _out1697;
          _3844___v95 = _out1698;
          _3845_exprErased = _out1699;
          _3846_recIdents = _out1700;
          Dafny.ISequence<Dafny.Rune> _3847_dTypePath;
          Dafny.ISequence<Dafny.Rune> _out1701;
          _out1701 = DCOMP.COMP.GenPath(_3841_dType);
          _3847_dTypePath = _out1701;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("matches!("), _3843_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(".as_ref(), ")), _3847_dTypePath), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::")), DCOMP.__default.escapeIdent(_3840_variant)), Dafny.Sequence<Dafny.Rune>.UnicodeFromString("{ .. })"));
          isOwned = true;
          isErased = true;
          readIdents = _3846_recIdents;
        }
      } else if (_source48.is_InitializationValue) {
        DAST._IType _3848___mcc_h231 = _source48.dtor_typ;
        DAST._IType _3849_typ = _3848___mcc_h231;
        {
          Dafny.ISequence<Dafny.Rune> _3850_typString;
          Dafny.ISequence<Dafny.Rune> _out1702;
          _out1702 = DCOMP.COMP.GenType(_3849_typ, false, false);
          _3850_typString = _out1702;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("<"), _3850_typString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(" as std::default::Default>::default()"));
          isOwned = true;
          isErased = false;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source48.is_BoolBoundedPool) {
        {
          s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("[false, true]");
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.FromElements();
        }
      } else if (_source48.is_SetBoundedPool) {
        DAST._IExpression _3851___mcc_h232 = _source48.dtor_of;
        DAST._IExpression _3852_of = _3851___mcc_h232;
        {
          Dafny.ISequence<Dafny.Rune> _3853_exprGen;
          bool _3854___v96;
          bool _3855_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3856_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1703;
          bool _out1704;
          bool _out1705;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1706;
          DCOMP.COMP.GenExpr(_3852_of, selfIdent, @params, false, out _out1703, out _out1704, out _out1705, out _out1706);
          _3853_exprGen = _out1703;
          _3854___v96 = _out1704;
          _3855_exprErased = _out1705;
          _3856_recIdents = _out1706;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3853_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          isOwned = true;
          isErased = _3855_exprErased;
          readIdents = _3856_recIdents;
        }
      } else if (_source48.is_SeqBoundedPool) {
        DAST._IExpression _3857___mcc_h233 = _source48.dtor_of;
        bool _3858___mcc_h234 = _source48.dtor_includeDuplicates;
        bool _3859_includeDuplicates = _3858___mcc_h234;
        DAST._IExpression _3860_of = _3857___mcc_h233;
        {
          Dafny.ISequence<Dafny.Rune> _3861_exprGen;
          bool _3862___v97;
          bool _3863_exprErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3864_recIdents;
          Dafny.ISequence<Dafny.Rune> _out1707;
          bool _out1708;
          bool _out1709;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1710;
          DCOMP.COMP.GenExpr(_3860_of, selfIdent, @params, false, out _out1707, out _out1708, out _out1709, out _out1710);
          _3861_exprGen = _out1707;
          _3862___v97 = _out1708;
          _3863_exprErased = _out1709;
          _3864_recIdents = _out1710;
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("("), _3861_exprGen), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(").iter()"));
          if (!(_3859_includeDuplicates)) {
            s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::itertools::Itertools::unique("), s), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          isOwned = true;
          isErased = _3863_exprErased;
          readIdents = _3864_recIdents;
        }
      } else {
        DAST._IExpression _3865___mcc_h235 = _source48.dtor_lo;
        DAST._IExpression _3866___mcc_h236 = _source48.dtor_hi;
        DAST._IExpression _3867_hi = _3866___mcc_h236;
        DAST._IExpression _3868_lo = _3865___mcc_h235;
        {
          Dafny.ISequence<Dafny.Rune> _3869_loString;
          bool _3870___v98;
          bool _3871_loErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3872_recIdentsLo;
          Dafny.ISequence<Dafny.Rune> _out1711;
          bool _out1712;
          bool _out1713;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1714;
          DCOMP.COMP.GenExpr(_3868_lo, selfIdent, @params, true, out _out1711, out _out1712, out _out1713, out _out1714);
          _3869_loString = _out1711;
          _3870___v98 = _out1712;
          _3871_loErased = _out1713;
          _3872_recIdentsLo = _out1714;
          Dafny.ISequence<Dafny.Rune> _3873_hiString;
          bool _3874___v99;
          bool _3875_hiErased;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _3876_recIdentsHi;
          Dafny.ISequence<Dafny.Rune> _out1715;
          bool _out1716;
          bool _out1717;
          Dafny.ISet<Dafny.ISequence<Dafny.Rune>> _out1718;
          DCOMP.COMP.GenExpr(_3867_hi, selfIdent, @params, true, out _out1715, out _out1716, out _out1717, out _out1718);
          _3873_hiString = _out1715;
          _3874___v99 = _out1716;
          _3875_hiErased = _out1717;
          _3876_recIdentsHi = _out1718;
          if (!(_3871_loErased)) {
            _3869_loString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3869_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          if (!(_3875_hiErased)) {
            _3873_hiString = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::DafnyErasable::erase_owned("), _3873_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          }
          s = Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.Concat(Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::dafny_runtime::integer_range("), _3869_loString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(", ")), _3873_hiString), Dafny.Sequence<Dafny.Rune>.UnicodeFromString(")"));
          isOwned = true;
          isErased = true;
          readIdents = Dafny.Set<Dafny.ISequence<Dafny.Rune>>.Union(_3872_recIdentsLo, _3876_recIdentsHi);
        }
      }
    }
    public static Dafny.ISequence<Dafny.Rune> Compile(Dafny.ISequence<DAST._IModule> p) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(warnings, unconditional_panic)]\n");
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("#![allow(nonstandard_style)]\n"));
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("extern crate dafny_runtime;\n"));
      BigInteger _3877_i;
      _3877_i = BigInteger.Zero;
      while ((_3877_i) < (new BigInteger((p).Count))) {
        Dafny.ISequence<Dafny.Rune> _3878_generated = Dafny.Sequence<Dafny.Rune>.Empty;
        RAST._IMod _3879_m;
        RAST._IMod _out1719;
        _out1719 = DCOMP.COMP.GenModule((p).Select(_3877_i), Dafny.Sequence<Dafny.ISequence<Dafny.Rune>>.FromElements());
        _3879_m = _out1719;
        _3878_generated = (_3879_m)._ToString(Dafny.Sequence<Dafny.Rune>.UnicodeFromString(""));
        if ((_3877_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\n"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, _3878_generated);
        _3877_i = (_3877_i) + (BigInteger.One);
      }
      return s;
    }
    public static Dafny.ISequence<Dafny.Rune> EmitCallToMain(Dafny.ISequence<Dafny.ISequence<Dafny.Rune>> fullName) {
      Dafny.ISequence<Dafny.Rune> s = Dafny.Sequence<Dafny.Rune>.Empty;
      s = Dafny.Sequence<Dafny.Rune>.UnicodeFromString("\nfn main() {\n");
      BigInteger _3880_i;
      _3880_i = BigInteger.Zero;
      while ((_3880_i) < (new BigInteger((fullName).Count))) {
        if ((_3880_i).Sign == 1) {
          s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("::"));
        }
        s = Dafny.Sequence<Dafny.Rune>.Concat(s, DCOMP.__default.escapeIdent((fullName).Select(_3880_i)));
        _3880_i = (_3880_i) + (BigInteger.One);
      }
      s = Dafny.Sequence<Dafny.Rune>.Concat(s, Dafny.Sequence<Dafny.Rune>.UnicodeFromString("();\n}"));
      return s;
    }
  }
} // end of namespace DCOMP

